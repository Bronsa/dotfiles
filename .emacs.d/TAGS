
/home/bronsa/src/clojure/src/jvm/clojure/lang/IRecord.java,84
package clojure.lang;clojure.lang11,480
public interface IRecord {IRecord13,503

/home/bronsa/src/clojure/src/jvm/clojure/lang/MethodImplCache.java,961
package clojure.lang;clojure.lang13,504
public final class MethodImplCache{MethodImplCache17,550
static public class Entry{Entry19,587
	final public Class c;c20,614
	final public IFn fn;fn21,637
	public Entry(Class c, IFn fn){Entry23,660
public final IPersistentMap protocol;protocol29,728
public final Keyword methodk;methodk30,766
public final int shift;shift31,796
public final int mask;mask32,820
public final Object[] table;    //[class, entry. class, entry ...]table33,843
public final Map map;map34,910
Entry mre = null;mre36,933
public MethodImplCache(IPersistentMap protocol, Keyword methodk){MethodImplCache38,952
public MethodImplCache(IPersistentMap protocol, Keyword methodk, int shift, int mask, Object[] table){MethodImplCache42,1069
public MethodImplCache(IPersistentMap protocol, Keyword methodk, Map map){MethodImplCache51,1324
public IFn fnFor(Class c){fnFor60,1542
IFn findFnFor(Class c){findFnFor67,1664

/home/bronsa/src/clojure/src/jvm/clojure/lang/MultiFn.java,3904
package clojure.lang;clojure.lang13,505
public class MultiFn extends AFn{MultiFn18,609
final public IFn dispatchFn;dispatchFn19,643
final public Object defaultDispatchVal;defaultDispatchVal20,672
final public IRef hierarchy;hierarchy21,712
final String name;name22,741
final ReentrantReadWriteLock rw;rw23,760
volatile IPersistentMap methodTable;methodTable24,793
volatile IPersistentMap preferTable;preferTable25,830
volatile IPersistentMap methodCache;methodCache26,867
volatile Object cachedHierarchy;cachedHierarchy27,904
static final Var assoc = RT.var("clojure.core", "assoc");assoc29,938
static final Var dissoc = RT.var("clojure.core", "dissoc");dissoc30,996
static final Var isa = RT.var("clojure.core", "isa?");isa31,1056
static final Var parents = RT.var("clojure.core", "parents");parents32,1111
public MultiFn(String name, IFn dispatchFn, Object defaultDispatchVal, IRef hierarchy) {MultiFn34,1174
public MultiFn reset(){reset46,1589
public MultiFn addMethod(Object dispatchVal, IFn method) {addMethod58,1800
public MultiFn removeMethod(Object dispatchVal) {removeMethod70,2028
public MultiFn preferMethod(Object dispatchValX, Object dispatchValY) {preferMethod84,2248
 public IFn getMethod(Object dispatchVal) {getMethod144,3906
public Object invoke() {invoke222,5888
public Object invoke(Object arg1) {invoke226,5961
public Object invoke(Object arg1, Object arg2) {invoke230,6074
public Object invoke(Object arg1, Object arg2, Object arg3) {invoke235,6255
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4) {invoke240,6482
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5) {invoke248,6839
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6) {invoke257,7270
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7)invoke267,7775
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke279,8356
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke292,9030
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke306,9778
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke321,10604
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke337,11508
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke354,12490
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke372,13550
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke393,14736
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke416,16043
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke440,17431
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke465,18900
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke491,20450
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke518,22081
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke547,23795
    public IPersistentMap getMethodTable() {getMethodTable577,25568
    public IPersistentMap getPreferTable() {getPreferTable581,25648

/home/bronsa/src/clojure/src/jvm/clojure/lang/ProxyHandler.java,313
package clojure.lang;clojure.lang13,504
public class ProxyHandler implements InvocationHandler{ProxyHandler18,605
final IPersistentMap fns;fns20,686
public ProxyHandler(IPersistentMap fns){ProxyHandler23,714
public Object invoke(Object proxy, Method method, Object[] args) throws Throwable{invoke27,775

/home/bronsa/src/clojure/src/jvm/clojure/lang/Obj.java,336
package clojure.lang;clojure.lang13,516
public abstract class Obj implements IObj, Serializable {Obj17,569
final IPersistentMap _meta;_meta19,628
public Obj(IPersistentMap meta){Obj21,657
public Obj(){Obj25,713
final public IPersistentMap meta(){meta29,745
abstract public Obj withMeta(IPersistentMap meta);withMeta33,799

/home/bronsa/src/clojure/src/jvm/clojure/lang/Symbol.java,1087
package clojure.lang;clojure.lang13,517
public class Symbol extends AFn implements IObj, Comparable, Named, Serializable, IHashEq{Symbol19,609
final String ns;ns21,734
final String name;name22,751
final int hash;hash23,770
final IPersistentMap _meta;_meta24,786
String _str;_str25,814
public String toString(){toString27,828
public String getNamespace(){getNamespace37,971
public String getName(){getName41,1016
static public Symbol create(String ns, String name) {create47,1202
static public Symbol create(String nsname) {create51,1295
static public Symbol intern(String ns, String name){intern55,1381
static public Symbol intern(String nsname){intern59,1505
public boolean equals(Object o){equals74,1955
public int hashCode(){hashCode86,2194
public int hasheq() {hasheq90,2234
public IObj withMeta(IPersistentMap meta){withMeta94,2273
public int compareTo(Object o){compareTo105,2536
public Object invoke(Object obj) {invoke126,2930
public Object invoke(Object obj, Object notFound) {invoke130,2995
public IPersistentMap meta(){meta134,3087

/home/bronsa/src/clojure/src/jvm/clojure/lang/PersistentList.java,3020
package clojure.lang;clojure.lang11,480
public class PersistentList extends ASeq implements IPersistentList, IReduce, List, Counted {PersistentList16,553
public static IFn creator = new RestFn(){creator22,741
final public static EmptyList EMPTY = new EmptyList(null);EMPTY51,1424
public PersistentList(Object first){PersistentList53,1484
PersistentList(IPersistentMap meta, Object _first, IPersistentList _rest, int _count){PersistentList60,1585
public static IPersistentList create(List init){create67,1756
public Object first(){first76,1981
public ISeq next(){next80,2023
public Object peek(){peek86,2100
public IPersistentList pop(){pop90,2142
public int count(){count96,2241
public PersistentList cons(Object o){cons100,2280
public IPersistentCollection empty(){empty104,2378
public PersistentList withMeta(IPersistentMap meta){withMeta108,2451
public Object reduce(IFn f) {reduce114,2598
public Object reduce(IFn f, Object start) {reduce121,2748
    static class EmptyList extends Obj implements IPersistentList, List, ISeq, Counted{EmptyList129,2930
	public int hashCode(){hashCode131,3019
    public boolean equals(Object o) {equals135,3059
	public boolean equiv(Object o){equiv139,3188
    EmptyList(IPersistentMap meta){EmptyList143,3246
        public Object first() {first147,3301
        public ISeq next() {next151,3369
        public ISeq more() {more155,3434
        public PersistentList cons(Object o){cons159,3499
	public IPersistentCollection empty(){empty163,3598
	public EmptyList withMeta(IPersistentMap meta){withMeta167,3656
	public Object peek(){peek173,3776
	public IPersistentList pop(){pop177,3818
	public int count(){count181,3912
	public ISeq seq(){seq185,3949
	public int size(){size190,3989
	public boolean isEmpty(){isEmpty194,4025
	public boolean contains(Object o){contains198,4071
	public Iterator iterator(){iterator202,4127
	public Object[] toArray(){toArray219,4392
	public boolean add(Object o){add223,4449
	public boolean remove(Object o){remove227,4529
	public boolean addAll(Collection collection){addAll231,4612
	public void clear(){clear235,4708
	public boolean retainAll(Collection collection){retainAll239,4779
	public boolean removeAll(Collection collection){removeAll243,4878
	public boolean containsAll(Collection collection){containsAll247,4977
	public Object[] toArray(Object[] objects){toArray251,5064
	public List subList(int fromIndex, int toIndex){subList262,5307
	public Object set(int index, Object element){set266,5407
	public Object remove(int index){remove270,5503
	public int indexOf(Object o){indexOf274,5586
	public int lastIndexOf(Object o){lastIndexOf284,5755
	public ListIterator listIterator(){listIterator288,5827
	public ListIterator listIterator(int index){listIterator292,5901
	public Object get(int index){get296,5989
	public void add(int index, Object element){add300,6054
	public boolean addAll(int index, Collection c){addAll304,6148

/home/bronsa/src/clojure/src/jvm/clojure/lang/IRef.java,349
package clojure.lang;clojure.lang13,505
public interface IRef extends IDeref{IRef15,528
	void setValidator(IFn vf);setValidator17,567
    IFn getValidator();getValidator19,596
    IPersistentMap getWatches();getWatches21,621
    IRef addWatch(Object key, IFn callback);addWatch23,655
    IRef removeWatch(Object key);removeWatch25,701

/home/bronsa/src/clojure/src/jvm/clojure/lang/IndexedSeq.java,156
package clojure.lang;clojure.lang11,475
public interface IndexedSeq extends ISeq, Sequential, Counted{IndexedSeq13,500
public int index();index15,565

/home/bronsa/src/clojure/src/jvm/clojure/lang/AReference.java,452
package clojure.lang;clojure.lang13,505
public class AReference implements IReference {AReference15,528
    public AReference() {AReference18,611
    public AReference(IPersistentMap meta) {AReference22,664
    synchronized public IPersistentMap meta() {meta26,738
    synchronized public IPersistentMap alterMeta(IFn alter, ISeq args)  {alterMeta30,815
    synchronized public IPersistentMap resetMeta(IPersistentMap m) {resetMeta35,989

/home/bronsa/src/clojure/src/jvm/clojure/lang/PersistentArrayMap.java,3160
package clojure.lang;clojure.lang11,480
public class PersistentArrayMap extends APersistentMap implements IObj, IEditableCollection {PersistentArrayMap29,983
final Object[] array;array31,1078
static final int HASHTABLE_THRESHOLD = 16;HASHTABLE_THRESHOLD32,1100
public static final PersistentArrayMap EMPTY = new PersistentArrayMap();EMPTY34,1144
static public IPersistentMap create(Map other){create37,1254
protected PersistentArrayMap(){PersistentArrayMap47,1487
public PersistentArrayMap withMeta(IPersistentMap meta){withMeta52,1572
PersistentArrayMap create(Object... init){create56,1677
IPersistentMap createHT(Object[] init){createHT60,1769
static public PersistentArrayMap createWithCheck(Object[] init){createWithCheck64,1860
static public PersistentArrayMap createAsIfByAssoc(Object[] init){createAsIfByAssoc76,2160
public PersistentArrayMap(Object[] init){PersistentArrayMap142,3696
public PersistentArrayMap(IPersistentMap meta, Object[] init){PersistentArrayMap148,3782
public int count(){count153,3888
public boolean containsKey(Object key){containsKey157,3937
public IMapEntry entryAt(Object key){entryAt161,4007
public IPersistentMap assocEx(Object key, Object val) {assocEx168,4141
public IPersistentMap assoc(Object key, Object val){assoc188,4633
public IPersistentMap without(Object key){without211,5223
public IPersistentMap empty(){empty234,5713
final public Object valAt(Object key, Object notFound){valAt238,5796
public Object valAt(Object key){valAt245,5931
public int capacity(){capacity249,5993
static boolean equalKey(Object k1, Object k2){equalKey277,6540
public Iterator iterator(){iterator283,6673
public ISeq seq(){seq287,6729
public IPersistentMap meta(){meta293,6815
static class Seq extends ASeq implements Counted{Seq297,6863
	final Object[] array;array298,6913
	final int i;i299,6936
	Seq(Object[] array, int i){Seq301,6951
	public Seq(IPersistentMap meta, Object[] array, int i){Seq306,7020
	public Object first(){first312,7132
	public ISeq next(){next316,7204
	public int count(){count322,7304
	public Obj withMeta(IPersistentMap meta){withMeta326,7362
static class Iter implements Iterator{Iter331,7445
	Object[] array;array332,7484
	int i;i333,7501
	Iter(Object[] array){Iter336,7526
	Iter(Object[] array, int i){Iter341,7587
	public boolean hasNext(){hasNext346,7657
	public Object next(){next350,7719
	public void remove(){remove355,7800
public Object kvreduce(IFn f, Object init){kvreduce361,7875
public ITransientMap asTransient(){asTransient370,8107
static final class TransientArrayMap extends ATransientMap {TransientArrayMap374,8184
	int len;len375,8245
	final Object[] array;array376,8255
	Thread owner;owner377,8278
	public TransientArrayMap(Object[] array){TransientArrayMap379,8294
	ITransientMap doAssoc(Object key, Object val){doAssoc395,8679
	ITransientMap doWithout(Object key) {doWithout412,9071
	Object doValAt(Object key, Object notFound) {doValAt426,9310
	int doCount() {doCount433,9442
	IPersistentMap doPersistent(){doPersistent437,9482
	void ensureEditable(){ensureEditable445,9659

/home/bronsa/src/clojure/src/jvm/clojure/lang/ArrayChunk.java,626
package clojure.lang;clojure.lang13,505
public final class ArrayChunk implements IChunk, Serializable {ArrayChunk17,558
final Object[] array;array19,623
final int off;off20,645
final int end;end21,660
public ArrayChunk(Object[] array){ArrayChunk23,676
public ArrayChunk(Object[] array, int off){ArrayChunk27,745
public ArrayChunk(Object[] array, int off, int end){ArrayChunk31,825
public Object nth(int i){nth37,936
public Object nth(int i, Object notFound){nth41,989
public int count(){count47,1097
public IChunk dropFirst(){dropFirst51,1139
public Object reduce(IFn f, Object start) {reduce57,1291

/home/bronsa/src/clojure/src/jvm/clojure/lang/Reflector.java,2608
package clojure.lang;clojure.lang13,505
public class Reflector{Reflector23,745
public static Object invokeInstanceMethod(Object target, String methodName, Object[] args) {invokeInstanceMethod25,770
static Object invokeMatchingMethod(String methodName, List methods, Object target, Object[] args)invokeMatchingMethod47,1491
public static Method getAsMethodOfPublicBase(Class c, Method m){getAsMethodOfPublicBase102,2891
public static boolean isMatch(Method lhs, Method rhs) {isMatch126,3294
public static Object invokeConstructor(Class c, Object[] args) {invokeConstructor150,3804
public static Object invokeStaticMethodVariadic(String className, String methodName, Object... args) {invokeStaticMethodVariadic193,4922
public static Object invokeStaticMethod(String className, String methodName, Object[] args) {invokeStaticMethod198,5086
public static Object invokeStaticMethod(Class c, String methodName, Object[] args) {invokeStaticMethod203,5271
public static Object getStaticField(String className, String fieldName) {getStaticField210,5551
public static Object getStaticField(Class c, String fieldName) {getStaticField215,5705
public static Object setStaticField(String className, String fieldName, Object val) {setStaticField234,6113
public static Object setStaticField(Class c, String fieldName, Object val) {setStaticField239,6284
public static Object getInstanceField(Object target, String fieldName) {getInstanceField257,6668
public static Object setInstanceField(Object target, String fieldName, Object val) {setInstanceField275,7086
public static Object invokeNoArgInstanceMember(Object target, String name) {invokeNoArgInstanceMember294,7527
public static Object invokeInstanceMember(Object target, String name) {invokeInstanceMember303,7832
public static Object invokeInstanceMember(String name, Object target, Object arg1) {invokeInstanceMember321,8232
public static Object invokeInstanceMember(String name, Object target, Object... args) {invokeInstanceMember340,8662
static public Field getField(Class c, String name, boolean getStatics){getField345,8804
static public List getMethods(Class c, int arity, String name, boolean getStatics){getMethods356,9115
static Object boxArg(Class paramType, Object arg){boxArg409,10476
static Object[] boxArgs(Class[] params, Object[] args){boxArgs436,11322
static public boolean paramArgTypeMatch(Class paramType, Class argType){paramArgTypeMatch449,11614
static boolean isCongruent(Class[] params, Object[] args){isCongruent482,12748
public static Object prepRet(Class c, Object x){prepRet500,13169

/home/bronsa/src/clojure/src/jvm/clojure/lang/IChunkedSeq.java,241
package clojure.lang;clojure.lang13,505
public interface IChunkedSeq extends ISeq, Sequential {IChunkedSeq15,528
IChunk chunkedFirst() ;chunkedFirst17,585
ISeq chunkedNext() ;chunkedNext19,610
ISeq chunkedMore() ;chunkedMore21,632

/home/bronsa/src/clojure/src/jvm/clojure/lang/MapEntry.java,362
package clojure.lang;clojure.lang11,490
public class MapEntry extends AMapEntry{MapEntry15,545
final Object _key;_key16,587
final Object _val;_val17,607
public MapEntry(Object key, Object val){MapEntry19,629
public Object key(){key24,714
public Object val(){val28,756
public Object getKey(){getKey32,798
public Object getValue(){getValue36,844

/home/bronsa/src/clojure/src/jvm/clojure/lang/APersistentSet.java,1445
package clojure.lang;clojure.lang13,504
public abstract class APersistentSet extends AFn implements IPersistentSet, Collection, Set, Serializable, IHashEq {APersistentSet20,635
int _hash = -1;_hash21,752
int _hasheq = -1;_hasheq22,768
final IPersistentMap impl;impl23,786
protected APersistentSet(IPersistentMap impl){APersistentSet25,814
public String toString(){toString29,883
public boolean contains(Object key){contains33,942
public Object get(Object key){get37,1013
public int count(){count41,1072
public ISeq seq(){seq45,1117
public Object invoke(Object arg1) {invoke49,1162
public boolean equals(Object obj){equals53,1220
static public boolean setEquals(IPersistentSet s1, Object obj) {setEquals57,1291
public boolean equiv(Object obj){equiv75,1628
public int hashCode(){hashCode93,1896
public int hasheq(){hasheq109,2181
public Object[] toArray(){toArray122,2398
public boolean add(Object o){add126,2458
public boolean remove(Object o){remove130,2535
public boolean addAll(Collection c){addAll134,2615
public void clear(){clear138,2699
public boolean retainAll(Collection c){retainAll142,2767
public boolean removeAll(Collection c){removeAll146,2854
public boolean containsAll(Collection c){containsAll150,2941
public Object[] toArray(Object[] a){toArray159,3063
public int size(){size163,3145
public boolean isEmpty(){isEmpty167,3184
public Iterator iterator(){iterator171,3235

/home/bronsa/src/clojure/src/jvm/clojure/lang/Seqable.java,111
package clojure.lang;clojure.lang13,505
public interface Seqable {Seqable15,528
    ISeq seq();seq16,555

/home/bronsa/src/clojure/src/jvm/clojure/lang/IReference.java,239
package clojure.lang;clojure.lang13,505
public interface IReference extends IMeta {IReference15,528
    IPersistentMap alterMeta(IFn alter, ISeq args) ;alterMeta16,572
    IPersistentMap resetMeta(IPersistentMap m);resetMeta17,625

/home/bronsa/src/clojure/src/jvm/clojure/lang/ChunkBuffer.java,325
package clojure.lang;clojure.lang13,505
final public class ChunkBuffer implements Counted{ChunkBuffer15,528
	Object[] buffer;buffer16,579
	int end;end17,597
public ChunkBuffer(int capacity){ChunkBuffer19,608
public void add(Object o){add24,687
public IChunk chunk(){chunk28,737
public int count(){count34,842

/home/bronsa/src/clojure/src/jvm/clojure/lang/ArraySeq.java,5794
package clojure.lang;clojure.lang13,505
public class ArraySeq extends ASeq implements IndexedSeq, IReduce{ArraySeq17,561
public final Object array;array18,628
final int i;i19,655
final Object[] oa;oa20,668
final Class ct;ct21,687
static public ArraySeq create(){create24,718
static public ArraySeq create(Object... array){create28,768
static ISeq createFromObject(Object array){createFromObject34,906
ArraySeq(Object array, int i){ArraySeq55,1666
ArraySeq(IPersistentMap meta, Object array, int i){ArraySeq63,1873
public Object first(){first71,2090
public ISeq next(){next77,2200
public int count(){count91,2412
public int index(){index97,2511
public ArraySeq withMeta(IPersistentMap meta){withMeta101,2545
public Object reduce(IFn f) {reduce105,2633
public Object reduce(IFn f, Object start) {reduce120,2990
public int indexOf(Object o) {indexOf134,3394
public int lastIndexOf(Object o) {lastIndexOf146,3700
static public class ArraySeq_int extends ASeq implements IndexedSeq, IReduce{ArraySeq_int169,4383
	public final int[] array;array170,4461
	final int i;i171,4488
	ArraySeq_int(IPersistentMap meta, int[] array, int i){ArraySeq_int173,4503
	public Object first(){first179,4614
	public ISeq next(){next183,4661
	public int count(){count189,4778
	public int index(){index193,4830
	public ArraySeq_int withMeta(IPersistentMap meta){withMeta197,4867
	public Object reduce(IFn f) {reduce201,4966
	public Object reduce(IFn f, Object start) {reduce208,5118
	public int indexOf(Object o) {indexOf215,5301
	public int lastIndexOf(Object o) {lastIndexOf225,5500
static public class ArraySeq_float extends ASeq implements IndexedSeq, IReduce{ArraySeq_float237,5710
	public final float[] array;array238,5790
	final int i;i239,5819
	ArraySeq_float(IPersistentMap meta, float[] array, int i){ArraySeq_float241,5834
	public Object first(){first247,5949
	public ISeq next(){next251,6009
	public int count(){count257,6128
	public int index(){index261,6180
	public ArraySeq_float withMeta(IPersistentMap meta){withMeta265,6217
	public Object reduce(IFn f) {reduce269,6320
	public Object reduce(IFn f, Object start) {reduce276,6498
	public int indexOf(Object o) {indexOf283,6707
	public int lastIndexOf(Object o) {lastIndexOf292,6909
static public class ArraySeq_double extends ASeq implements IndexedSeq, IReduce{ArraySeq_double302,7121
	public final double[] array;array303,7202
	final int i;i304,7232
	ArraySeq_double(IPersistentMap meta, double[] array, int i){ArraySeq_double306,7247
	public Object first(){first312,7364
	public ISeq next(){next316,7411
	public int count(){count322,7531
	public int index(){index326,7583
	public ArraySeq_double withMeta(IPersistentMap meta){withMeta330,7620
	public Object reduce(IFn f) {reduce334,7725
	public Object reduce(IFn f, Object start) {reduce341,7877
	public int indexOf(Object o) {indexOf348,8060
	public int lastIndexOf(Object o) {lastIndexOf358,8265
static public class ArraySeq_long extends ASeq implements IndexedSeq, IReduce{ArraySeq_long369,8480
	public final long[] array;array370,8559
	final int i;i371,8587
	ArraySeq_long(IPersistentMap meta, long[] array, int i){ArraySeq_long373,8602
	public Object first(){first379,8715
	public ISeq next(){next383,8775
	public int count(){count389,8893
	public int index(){index393,8945
	public ArraySeq_long withMeta(IPersistentMap meta){withMeta397,8982
	public Object reduce(IFn f) {reduce401,9083
	public Object reduce(IFn f, Object start) {reduce408,9261
	public int indexOf(Object o) {indexOf415,9470
	public int lastIndexOf(Object o) {lastIndexOf425,9671
static public class ArraySeq_byte extends ASeq implements IndexedSeq, IReduce{ArraySeq_byte436,9882
	public final byte[] array;array437,9961
	final int i;i438,9989
	ArraySeq_byte(IPersistentMap meta, byte[] array, int i){ArraySeq_byte440,10004
	public Object first(){first446,10117
	public ISeq next(){next450,10164
	public int count(){count456,10282
	public int index(){index460,10334
	public ArraySeq_byte withMeta(IPersistentMap meta){withMeta464,10371
	public Object reduce(IFn f) {reduce468,10472
	public Object reduce(IFn f, Object start) {reduce475,10624
	public int indexOf(Object o) {indexOf482,10807
	public int lastIndexOf(Object o) {lastIndexOf496,11122
static public class ArraySeq_char extends ASeq implements IndexedSeq, IReduce{ArraySeq_char511,11452
	public final char[] array;array512,11531
	final int i;i513,11559
	ArraySeq_char(IPersistentMap meta, char[] array, int i){ArraySeq_char515,11574
	public Object first(){first521,11687
	public ISeq next(){next525,11734
	public int count(){count531,11852
	public int index(){index535,11904
	public ArraySeq_char withMeta(IPersistentMap meta){withMeta539,11941
	public Object reduce(IFn f) {reduce543,12042
	public Object reduce(IFn f, Object start) {reduce550,12194
	public int indexOf(Object o) {indexOf557,12378
	public int lastIndexOf(Object o) {lastIndexOf571,12703
static public class ArraySeq_boolean extends ASeq implements IndexedSeq, IReduce{ArraySeq_boolean586,13043
	public final boolean[] array;array587,13125
	final int i;i588,13156
	ArraySeq_boolean(IPersistentMap meta, boolean[] array, int i){ArraySeq_boolean590,13171
	public Object first(){first596,13290
	public ISeq next(){next600,13337
	public int count(){count606,13458
	public int index(){index610,13510
	public ArraySeq_boolean withMeta(IPersistentMap meta){withMeta614,13547
	public Object reduce(IFn f) {reduce618,13654
	public Object reduce(IFn f, Object start) {reduce625,13806
	public int indexOf(Object o) {indexOf632,13990
	public int lastIndexOf(Object o) {lastIndexOf646,14317

/home/bronsa/src/clojure/src/jvm/clojure/lang/PersistentTreeMap.java,8403
package clojure.lang;clojure.lang13,505
public class PersistentTreeMap extends APersistentMap implements IObj, Reversible, Sorted{PersistentTreeMap25,729
public final Comparator comp;comp27,821
public final Node tree;tree28,851
public final int _count;_count29,875
final IPersistentMap _meta;_meta30,900
final static public PersistentTreeMap EMPTY = new PersistentTreeMap();EMPTY32,929
static public IPersistentMap create(Map other){create34,1001
public PersistentTreeMap(){PersistentTreeMap44,1208
public PersistentTreeMap withMeta(IPersistentMap meta){withMeta48,1269
public PersistentTreeMap(IPersistentMap meta, Comparator comp){PersistentTreeMap57,1452
PersistentTreeMap(IPersistentMap meta, Comparator comp, Node tree, int _count){PersistentTreeMap64,1585
static public PersistentTreeMap create(ISeq items){create71,1749
static public PersistentTreeMap create(Comparator comp, ISeq items){create82,2106
public boolean containsKey(Object key){containsKey93,2502
public PersistentTreeMap assocEx(Object key, Object val) {assocEx97,2575
public PersistentTreeMap assoc(Object key, Object val){assoc107,2883
public PersistentTreeMap without(Object key){without121,3362
public ISeq seq(){seq134,3693
public IPersistentCollection empty(){empty140,3786
public ISeq rseq() {rseq144,3873
public Comparator comparator(){comparator150,3969
public Object entryKey(Object entry){entryKey154,4018
public ISeq seq(boolean ascending){seq158,4094
public ISeq seqFrom(Object key, boolean ascending){seqFrom164,4209
public NodeIterator iterator(){iterator204,4825
public Object kvreduce(IFn f, Object init){kvreduce208,4898
public NodeIterator reverseIterator(){reverseIterator217,5088
public Iterator keys(){keys221,5169
public Iterator vals(){vals225,5222
public Iterator keys(NodeIterator it){keys229,5275
public Iterator vals(NodeIterator it){vals233,5346
public Object minKey(){minKey237,5417
public Node min(){min242,5495
public Object maxKey(){maxKey252,5610
public Node max(){max257,5688
public int depth(){depth267,5805
int depth(Node t){depth271,5849
public Object valAt(Object key, Object notFound){valAt277,5955
public Object valAt(Object key){valAt282,6074
public int capacity(){capacity286,6136
public int count(){count290,6178
public Node entryAt(Object key){entryAt294,6217
public int doCompare(Object k1, Object k2){doCompare309,6424
Node add(Node t, Object key, Object val, Box found){add315,6565
Node remove(Node t, Object key, Box found){remove336,6994
static Node append(Node left, Node right){append362,7709
static Node balanceLeftDel(Object key, Object val, Node del, Node right){balanceLeftDel396,8857
static Node balanceRightDel(Object key, Object val, Node left, Node del){balanceRightDel409,9432
static Node leftBalance(Object key, Object val, Node ins, Node right){leftBalance422,9997
static Node rightBalance(Object key, Object val, Node left, Node ins){rightBalance434,10501
Node replace(Node t, Object key, Object val){replace445,10998
PersistentTreeMap(Comparator comp, Node tree, int count, IPersistentMap meta){PersistentTreeMap453,11281
static Red red(Object key, Object val, Node left, Node right){red460,11443
static Black black(Object key, Object val, Node left, Node right){black472,11733
public IPersistentMap meta(){meta484,12035
static abstract class Node extends AMapEntry{Node488,12083
	final Object key;key489,12129
	Node(Object key){Node491,12149
	public Object key(){key495,12190
	public Object val(){val499,12230
	public Object getKey(){getKey503,12271
	public Object getValue(){getValue507,12316
	Node left(){left511,12363
	Node right(){right515,12396
	abstract Node addLeft(Node ins);addLeft519,12430
	abstract Node addRight(Node ins);addRight521,12465
	abstract Node removeLeft(Node del);removeLeft523,12501
	abstract Node removeRight(Node del);removeRight525,12539
	abstract Node blacken();blacken527,12578
	abstract Node redden();redden529,12605
	Node balanceLeft(Node parent){balanceLeft531,12631
	Node balanceRight(Node parent){balanceRight535,12731
	abstract Node replace(Object key, Object val, Node left, Node right);replace539,12831
    public Object kvreduce(IFn f, Object init){kvreduce541,12903
static class Black extends Node{Black560,13289
	public Black(Object key){Black561,13322
	Node addLeft(Node ins){addLeft565,13367
	Node addRight(Node ins){addRight569,13428
	Node removeLeft(Node del){removeLeft573,13491
	Node removeRight(Node del){removeRight577,13574
	Node blacken(){blacken581,13658
	Node redden(){redden585,13694
	Node replace(Object key, Object val, Node left, Node right){replace589,13737
static class BlackVal extends Black{BlackVal595,13845
	final Object val;val596,13882
	public BlackVal(Object key, Object val){BlackVal598,13902
	public Object val(){val603,13980
	Node redden(){redden607,14020
static class BlackBranch extends Black{BlackBranch613,14074
	final Node left;left614,14114
	final Node right;right616,14133
	public BlackBranch(Object key, Node left, Node right){BlackBranch618,14153
	public Node left(){left624,14269
	public Node right(){right628,14309
	Node redden(){redden632,14351
static class BlackBranchVal extends BlackBranch{BlackBranchVal638,14416
	final Object val;val639,14465
	public BlackBranchVal(Object key, Object val, Node left, Node right){BlackBranchVal641,14485
	public Object val(){val646,14605
	Node redden(){redden650,14645
static class Red extends Node{Red656,14718
	public Red(Object key){Red657,14749
	Node addLeft(Node ins){addLeft661,14792
	Node addRight(Node ins){addRight665,14861
	Node removeLeft(Node del){removeLeft669,14930
	Node removeRight(Node del){removeRight673,15002
	Node blacken(){blacken677,15074
	Node redden(){redden681,15120
	Node replace(Object key, Object val, Node left, Node right){replace685,15206
static class RedVal extends Red{RedVal691,15312
	final Object val;val692,15345
	public RedVal(Object key, Object val){RedVal694,15365
	public Object val(){val699,15441
	Node blacken(){blacken703,15481
static class RedBranch extends Red{RedBranch709,15538
	final Node left;left710,15574
	final Node right;right712,15593
	public RedBranch(Object key, Node left, Node right){RedBranch714,15613
	public Node left(){left720,15727
	public Node right(){right724,15767
	Node balanceLeft(Node parent){balanceLeft728,15809
	Node balanceRight(Node parent){balanceRight739,16203
	Node blacken(){blacken749,16593
static class RedBranchVal extends RedBranch{RedBranchVal756,16662
	final Object val;val757,16707
	public RedBranchVal(Object key, Object val, Node left, Node right){RedBranchVal759,16727
	public Object val(){val764,16845
	Node blacken(){blacken768,16885
static public class Seq extends ASeq{Seq774,16961
	final ISeq stack;stack775,16999
	final boolean asc;asc776,17018
	final int cnt;cnt777,17038
	public Seq(ISeq stack, boolean asc){Seq779,17055
	public Seq(ISeq stack, boolean asc, int cnt){Seq785,17154
	Seq(IPersistentMap meta, ISeq stack, boolean asc, int cnt){Seq791,17263
	static Seq create(Node t, boolean asc, int cnt){create798,17401
	static ISeq push(Node t, ISeq stack, boolean asc){push802,17503
	public Object first(){first811,17669
	public ISeq next(){next815,17721
	public int count(){count825,17944
	public Obj withMeta(IPersistentMap meta){withMeta831,18022
static public class NodeIterator implements Iterator{NodeIterator836,18112
	Stack stack = new Stack();stack837,18166
	boolean asc;asc838,18194
	NodeIterator(Node t, boolean asc){NodeIterator840,18209
	void push(Node t){push845,18278
	public boolean hasNext(){hasNext853,18384
	public Object next(){next857,18442
	public void remove(){remove863,18548
static class KeyIterator implements Iterator{KeyIterator868,18622
	NodeIterator it;it869,18668
	KeyIterator(NodeIterator it){KeyIterator871,18687
	public boolean hasNext(){hasNext875,18738
	public Object next(){next879,18792
	public void remove(){remove883,18852
static class ValIterator implements Iterator{ValIterator888,18926
	NodeIterator it;it889,18972
	ValIterator(NodeIterator it){ValIterator891,18991
	public boolean hasNext(){hasNext895,19042
	public Object next(){next899,19096
	public void remove(){remove903,19158

/home/bronsa/src/clojure/src/jvm/clojure/lang/Named.java,155
package clojure.lang;clojure.lang13,505
public interface Named{Named15,528
String getNamespace();getNamespace16,552
String getName();getName18,576

/home/bronsa/src/clojure/src/jvm/clojure/lang/Reversible.java,115
package clojure.lang;clojure.lang13,504
public interface Reversible{Reversible15,527
ISeq rseq() ;rseq16,556

/home/bronsa/src/clojure/src/jvm/clojure/lang/EnumerationSeq.java,637
package clojure.lang;clojure.lang13,504
public class EnumerationSeq extends ASeq{EnumerationSeq19,627
final Enumeration iter;iter20,669
final State state;state21,693
    static class State{State23,713
	volatile Object val;val24,737
	volatile Object _rest;_rest25,759
public static EnumerationSeq create(Enumeration iter){create28,786
EnumerationSeq(Enumeration iter){EnumerationSeq34,921
EnumerationSeq(IPersistentMap meta, Enumeration iter, State state){EnumerationSeq41,1051
public Object first(){first47,1176
public ISeq next(){next57,1339
public EnumerationSeq withMeta(IPersistentMap meta){withMeta70,1533

/home/bronsa/src/clojure/src/jvm/clojure/lang/LispReader.java,6507
package clojure.lang;clojure.lang11,480
public class LispReader{LispReader39,1266
static final Symbol QUOTE = Symbol.intern("quote");QUOTE41,1292
static final Symbol THE_VAR = Symbol.intern("var");THE_VAR42,1344
static Symbol UNQUOTE = Symbol.intern("clojure.core", "unquote");UNQUOTE44,1464
static Symbol UNQUOTE_SPLICING = Symbol.intern("clojure.core", "unquote-splicing");UNQUOTE_SPLICING45,1530
static Symbol CONCAT = Symbol.intern("clojure.core", "concat");CONCAT46,1614
static Symbol SEQ = Symbol.intern("clojure.core", "seq");SEQ47,1678
static Symbol LIST = Symbol.intern("clojure.core", "list");LIST48,1736
static Symbol APPLY = Symbol.intern("clojure.core", "apply");APPLY49,1796
static Symbol HASHMAP = Symbol.intern("clojure.core", "hash-map");HASHMAP50,1858
static Symbol HASHSET = Symbol.intern("clojure.core", "hash-set");HASHSET51,1925
static Symbol VECTOR = Symbol.intern("clojure.core", "vector");VECTOR52,1992
static Symbol WITH_META = Symbol.intern("clojure.core", "with-meta");WITH_META53,2056
static Symbol META = Symbol.intern("clojure.core", "meta");META54,2126
static Symbol DEREF = Symbol.intern("clojure.core", "deref");DEREF55,2186
static Keyword UNKNOWN = Keyword.intern(null, "unknown");UNKNOWN56,2248
static IFn[] macros = new IFn[256];macros59,2377
static IFn[] dispatchMacros = new IFn[256];dispatchMacros60,2413
static Pattern symbolPat = Pattern.compile("[:]?([\\D&&[^/]].*/)?([\\D&&[^/]][^/]*)");symbolPat62,2551
static Pattern intPat =intPat65,2796
static Pattern ratioPat = Pattern.compile("([-+]?[0-9]+)/([0-9]+)");ratioPat68,2950
static Pattern floatPat = Pattern.compile("([-+]?[0-9]+(\\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?");floatPat69,3019
static final Symbol SLASH = Symbol.intern("/");SLASH70,3113
static final Symbol CLOJURE_SLASH = Symbol.intern("clojure.core","/");CLOJURE_SLASH71,3161
static Var GENSYM_ENV = Var.create(null).setDynamic();GENSYM_ENV78,3590
static Var ARG_ENV = Var.create(null).setDynamic();ARG_ENV80,3673
static IFn ctorReader = new CtorReader();ctorReader81,3725
static boolean isWhitespace(int ch){isWhitespace115,4837
static void unread(PushbackReader r, int ch) {unread119,4926
public static class ReaderException extends RuntimeException{ReaderException131,5086
	final int line;line132,5148
	final int column;column133,5165
	public ReaderException(int line, int column, Throwable cause){ReaderException135,5185
static public int read1(Reader r){read1142,5315
static public Object read(PushbackReader r, boolean eofIsError, Object eofValue, boolean isRecursive)read153,5444
public static class RegexReader extends AFn{RegexReader430,11772
	static StringReader stringrdr = new StringReader();stringrdr431,11817
	public Object invoke(Object reader, Object doublequote) {invoke433,11871
public static class StringReader extends AFn{StringReader453,12378
	public Object invoke(Object reader, Object doublequote) {invoke454,12424
public static class CommentReader extends AFn{CommentReader515,13781
	public Object invoke(Object reader, Object semicolon) {invoke516,13828
public static class DiscardReader extends AFn{DiscardReader528,14022
	public Object invoke(Object reader, Object underscore) {invoke529,14069
public static class WrappingReader extends AFn{WrappingReader536,14220
	final Symbol sym;sym537,14268
	public WrappingReader(Symbol sym){WrappingReader539,14288
	public Object invoke(Object reader, Object quote) {invoke543,14346
public static class DeprecatedWrappingReader extends AFn{DeprecatedWrappingReader551,14518
	final Symbol sym;sym552,14576
	final String macro;macro553,14595
	public DeprecatedWrappingReader(Symbol sym, String macro){DeprecatedWrappingReader555,14617
	public Object invoke(Object reader, Object quote) {invoke560,14721
public static class VarReader extends AFn{VarReader571,15045
	public Object invoke(Object reader, Object quote) {invoke572,15088
public static class DispatchReader extends AFn{DispatchReader609,15877
	public Object invoke(Object reader, Object hash) {invoke610,15925
static Symbol garg(int n){garg630,16436
public static class FnReader extends AFn{FnReader634,16554
	public Object invoke(Object reader, Object lparen) {invoke635,16596
static Symbol registerArg(int n){registerArg678,17644
static class ArgReader extends AFn{ArgReader693,17971
	public Object invoke(Object reader, Object pct) {invoke694,18007
public static class MetaReader extends AFn{MetaReader716,18606
	public Object invoke(Object reader, Object caret) {invoke717,18650
public static class SyntaxQuoteReader extends AFn{SyntaxQuoteReader759,19970
	public Object invoke(Object reader, Object backquote) {invoke760,20021
	static Object syntaxQuote(Object form) {syntaxQuote776,20344
static boolean isUnquoteSplicing(Object form){isUnquoteSplicing900,24251
static boolean isUnquote(Object form){isUnquote904,24379
static class UnquoteReader extends AFn{UnquoteReader908,24490
	public Object invoke(Object reader, Object comma) {invoke909,24530
public static class CharacterReader extends AFn{CharacterReader929,24949
	public Object invoke(Object reader, Object backslash) {invoke930,24998
public static class ListReader extends AFn{ListReader972,26297
	public Object invoke(Object reader, Object leftparen) {invoke973,26341
public static class EvalReader extends AFn{EvalReader1029,27848
	public Object invoke(Object reader, Object eq) {invoke1030,27892
public static class VectorReader extends AFn{VectorReader1080,29341
	public Object invoke(Object reader, Object leftparen) {invoke1081,29387
public static class MapReader extends AFn{MapReader1088,29570
	public Object invoke(Object reader, Object leftparen) {invoke1089,29613
public static class SetReader extends AFn{SetReader1099,29911
	public Object invoke(Object reader, Object leftbracket) {invoke1100,29954
public static class UnmatchedDelimiterReader extends AFn{UnmatchedDelimiterReader1107,30143
	public Object invoke(Object reader, Object rightdelim) {invoke1108,30201
public static class UnreadableReader extends AFn{UnreadableReader1114,30335
	public Object invoke(Object reader, Object leftangle) {invoke1115,30385
public static List readDelimitedList(char delim, PushbackReader r, boolean isRecursive) {readDelimitedList1120,30498
public static class CtorReader extends AFn{CtorReader1167,31367
	public Object invoke(Object reader, Object firstChar){invoke1168,31411

/home/bronsa/src/clojure/src/jvm/clojure/lang/Numbers.java,28954
package clojure.lang;clojure.lang13,505
public class Numbers{Numbers19,617
static interface Ops{Ops21,640
	Ops combine(Ops y);combine22,662
	Ops opsWith(LongOps x);opsWith24,684
	Ops opsWith(DoubleOps x);opsWith26,710
	Ops opsWith(RatioOps x);opsWith28,738
	Ops opsWith(BigIntOps x);opsWith30,765
	Ops opsWith(BigDecimalOps x);opsWith32,793
	public boolean isZero(Number x);isZero34,825
	public boolean isPos(Number x);isPos36,860
	public boolean isNeg(Number x);isNeg38,894
	public Number add(Number x, Number y);add40,928
	public Number addP(Number x, Number y);addP41,968
	public Number multiply(Number x, Number y);multiply43,1010
	public Number multiplyP(Number x, Number y);multiplyP44,1055
	public Number divide(Number x, Number y);divide46,1102
	public Number quotient(Number x, Number y);quotient48,1146
	public Number remainder(Number x, Number y);remainder50,1192
	public boolean equiv(Number x, Number y);equiv52,1239
	public boolean lt(Number x, Number y);lt54,1283
	public Number negate(Number x);negate56,1324
	public Number negateP(Number x);negateP57,1357
	public Number inc(Number x);inc59,1392
	public Number incP(Number x);incP60,1422
	public Number dec(Number x);dec62,1454
	public Number decP(Number x);decP63,1484
static abstract class OpsP implements Ops{OpsP66,1518
	public Number addP(Number x, Number y){addP67,1561
	public Number multiplyP(Number x, Number y){multiplyP71,1626
	public Number negateP(Number x){negateP75,1701
	public Number incP(Number x){incP79,1759
	public Number decP(Number x){decP83,1811
static public boolean isZero(Object x){isZero89,1866
static public boolean isPos(Object x){isPos93,1943
static public boolean isNeg(Object x){isNeg97,2018
static public Number minus(Object x){minus101,2093
static public Number minusP(Object x){minusP105,2168
static public Number inc(Object x){inc109,2245
static public Number incP(Object x){incP113,2315
static public Number dec(Object x){dec117,2387
static public Number decP(Object x){decP121,2457
static public Number add(Object x, Object y){add125,2529
static public Number addP(Object x, Object y){addP129,2636
static public Number minus(Object x, Object y){minus133,2745
static public Number minusP(Object x, Object y){minusP138,2885
static public Number multiply(Object x, Object y){multiply145,3104
static public Number multiplyP(Object x, Object y){multiplyP149,3221
static public Number divide(Object x, Object y){divide153,3340
static public Number quotient(Object x, Object y){quotient160,3550
static public Number remainder(Object x, Object y){remainder167,3765
static public double quotient(double n, double d){quotient174,3982
static public double remainder(double n, double d){remainder189,4291
static public boolean equiv(Object x, Object y){equiv205,4633
static public boolean equiv(Number x, Number y){equiv209,4724
static public boolean equal(Number x, Number y){equal213,4820
static public boolean lt(Object x, Object y){lt218,4949
static public boolean lte(Object x, Object y){lte222,5055
static public boolean gt(Object x, Object y){gt226,5163
static public boolean gte(Object x, Object y){gte230,5269
static public int compare(Number x, Number y){compare234,5377
static BigInt toBigInt(Object x){toBigInt243,5539
static BigInteger toBigInteger(Object x){toBigInteger252,5757
static BigDecimal toBigDecimal(Object x){toBigDecimal261,5986
static public Ratio toRatio(Object x){toRatio287,6690
static public Number rationalize(Number x){rationalize303,7121
static public Number reduceBigInt(BigInt val){reduceBigInt335,7861
static public Number divide(BigInteger n, BigInteger d){divide342,7987
static public int shiftLeftInt(int x, int n){shiftLeftInt358,8512
static public long shiftLeft(Object x, Object y){shiftLeft362,8577
static public long shiftLeft(Object x, long y){shiftLeft365,8680
static public long shiftLeft(long x, Object y){shiftLeft368,8769
static public long shiftLeft(long x, long n){shiftLeft371,8858
static public int shiftRightInt(int x, int n){shiftRightInt375,8923
static public long shiftRight(Object x, Object y){shiftRight379,8989
static public long shiftRight(Object x, long y){shiftRight382,9094
static public long shiftRight(long x, Object y){shiftRight385,9185
static public long shiftRight(long x, long n){shiftRight388,9276
final static class LongOps implements Ops{LongOps392,9342
	public Ops combine(Ops y){combine393,9385
	final public Ops opsWith(LongOps x){opsWith397,9443
	final public Ops opsWith(DoubleOps x){opsWith401,9500
	final public Ops opsWith(RatioOps x){opsWith405,9565
	final public Ops opsWith(BigIntOps x){opsWith409,9628
	final public Ops opsWith(BigDecimalOps x){opsWith413,9693
	public boolean isZero(Number x){isZero417,9766
	public boolean isPos(Number x){isPos421,9833
	public boolean isNeg(Number x){isNeg425,9898
	final public Number add(Number x, Number y){add429,9963
	final public Number addP(Number x, Number y){addP433,10069
	final public Number multiply(Number x, Number y){multiply441,10280
	final public Number multiplyP(Number x, Number y){multiplyP445,10397
	static long gcd(long u, long v){gcd452,10608
	public Number divide(Number x, Number y){divide462,10723
	public Number quotient(Number x, Number y){quotient481,11062
	public Number remainder(Number x, Number y){remainder485,11156
	public boolean equiv(Number x, Number y){equiv489,11251
	public boolean lt(Number x, Number y){lt493,11339
	final public Number negate(Number x){negate498,11470
	final public Number negateP(Number x){negateP503,11575
	public Number inc(Number x){inc509,11760
	public Number incP(Number x){incP514,11854
	public Number dec(Number x){dec521,11996
	public Number decP(Number x){decP526,12090
final static class DoubleOps extends OpsP{DoubleOps534,12234
	public Ops combine(Ops y){combine535,12277
	final public Ops opsWith(LongOps x){opsWith539,12335
	final public Ops opsWith(DoubleOps x){opsWith543,12392
	final public Ops opsWith(RatioOps x){opsWith547,12451
	final public Ops opsWith(BigIntOps x){opsWith551,12509
	final public Ops opsWith(BigDecimalOps x){opsWith555,12568
	public boolean isZero(Number x){isZero559,12631
	public boolean isPos(Number x){isPos563,12700
	public boolean isNeg(Number x){isNeg567,12767
	final public Number add(Number x, Number y){add571,12834
	final public Number multiply(Number x, Number y){multiply575,12944
	public Number divide(Number x, Number y){divide579,13059
	public Number quotient(Number x, Number y){quotient583,13166
	public Number remainder(Number x, Number y){remainder587,13276
	public boolean equiv(Number x, Number y){equiv591,13388
	public boolean lt(Number x, Number y){lt595,13480
	final public Number negate(Number x){negate600,13615
	public Number inc(Number x){inc604,13701
	public Number dec(Number x){dec608,13781
final static class RatioOps extends OpsP{RatioOps613,13863
	public Ops combine(Ops y){combine614,13905
	final public Ops opsWith(LongOps x){opsWith618,13963
	final public Ops opsWith(DoubleOps x){opsWith622,14020
	final public Ops opsWith(RatioOps x){opsWith626,14085
	final public Ops opsWith(BigIntOps x){opsWith630,14143
	final public Ops opsWith(BigDecimalOps x){opsWith634,14202
	public boolean isZero(Number x){isZero638,14275
	public boolean isPos(Number x){isPos643,14372
	public boolean isNeg(Number x){isNeg648,14467
	static Number normalizeRet(Number ret, Number x, Number y){normalizeRet653,14562
	final public Number add(Number x, Number y){add661,14790
	final public Number multiply(Number x, Number y){multiply670,15080
	public Number divide(Number x, Number y){divide678,15333
	public Number quotient(Number x, Number y){quotient686,15578
	public Number remainder(Number x, Number y){remainder694,15839
	public boolean equiv(Number x, Number y){equiv703,16137
	public boolean lt(Number x, Number y){lt710,16328
	final public Number negate(Number x){negate717,16568
	public Number inc(Number x){inc722,16691
	public Number dec(Number x){dec726,16753
final static class BigIntOps extends OpsP{BigIntOps732,16819
	public Ops combine(Ops y){combine733,16862
	final public Ops opsWith(LongOps x){opsWith737,16920
	final public Ops opsWith(DoubleOps x){opsWith741,16977
	final public Ops opsWith(RatioOps x){opsWith745,17042
	final public Ops opsWith(BigIntOps x){opsWith749,17105
	final public Ops opsWith(BigDecimalOps x){opsWith753,17164
	public boolean isZero(Number x){isZero757,17237
	public boolean isPos(Number x){isPos764,17385
	public boolean isNeg(Number x){isNeg771,17530
	final public Number add(Number x, Number y){add778,17675
	final public Number multiply(Number x, Number y){multiply782,17770
	public Number divide(Number x, Number y){divide786,17875
	public Number quotient(Number x, Number y){quotient790,17981
	public Number remainder(Number x, Number y){remainder794,18080
	public boolean equiv(Number x, Number y){equiv798,18181
	public boolean lt(Number x, Number y){lt802,18270
	final public Number negate(Number x){negate807,18405
	public Number inc(Number x){inc811,18506
	public Number dec(Number x){dec816,18631
final static class BigDecimalOps extends OpsP{BigDecimalOps823,18764
	final static Var MATH_CONTEXT = RT.MATH_CONTEXT;MATH_CONTEXT824,18811
	public Ops combine(Ops y){combine826,18862
	final public Ops opsWith(LongOps x){opsWith830,18920
	final public Ops opsWith(DoubleOps x){opsWith834,18977
	final public Ops opsWith(RatioOps x){opsWith838,19042
	final public Ops opsWith(BigIntOps x){opsWith842,19100
	final public Ops opsWith(BigDecimalOps x){opsWith846,19159
	public boolean isZero(Number x){isZero850,19222
	public boolean isPos(Number x){isPos855,19321
	public boolean isNeg(Number x){isNeg860,19418
	final public Number add(Number x, Number y){add865,19515
	final public Number multiply(Number x, Number y){multiply872,19741
	public Number divide(Number x, Number y){divide879,19982
	public Number quotient(Number x, Number y){quotient886,20211
	public Number remainder(Number x, Number y){remainder893,20472
	public boolean equiv(Number x, Number y){equiv900,20710
	public boolean lt(Number x, Number y){lt904,20807
	final public Number negate(Number x){negate909,20955
	public Number inc(Number x){inc916,21150
	public Number dec(Number x){dec924,21366
static final LongOps LONG_OPS = new LongOps();LONG_OPS933,21594
static final DoubleOps DOUBLE_OPS = new DoubleOps();DOUBLE_OPS934,21641
static final RatioOps RATIO_OPS = new RatioOps();RATIO_OPS935,21694
static final BigIntOps BIGINT_OPS = new BigIntOps();BIGINT_OPS936,21744
static final BigDecimalOps BIGDECIMAL_OPS = new BigDecimalOps();BIGDECIMAL_OPS937,21797
static public enum Category {INTEGER, FLOATING, DECIMAL, RATIO};Category939,21863
static Ops ops(Object x){ops941,21929
static int hasheq(Number x){hasheq964,22409
static Category category(Object x){category978,22661
static long bitOpsCast(Object x){bitOpsCast999,23148
	static public float[] float_array(int size, Object init){float_array1011,23457
	static public float[] float_array(Object sizeOrSeq){float_array1028,23855
static public double[] double_array(int size, Object init){double_array1042,24233
static public double[] double_array(Object sizeOrSeq){double_array1059,24622
static public int[] int_array(int size, Object init){int_array1073,24993
static public int[] int_array(Object sizeOrSeq){int_array1090,25361
static public long[] long_array(int size, Object init){long_array1104,25714
static public long[] long_array(Object sizeOrSeq){long_array1121,26089
static public short[] short_array(int size, Object init){short_array1135,26448
static public short[] short_array(Object sizeOrSeq){short_array1152,26797
static public char[] char_array(int size, Object init){char_array1166,27146
static public char[] char_array(Object sizeOrSeq){char_array1183,27502
static public byte[] byte_array(int size, Object init){byte_array1197,27850
static public byte[] byte_array(Object sizeOrSeq){byte_array1214,28191
static public boolean[] boolean_array(int size, Object init){boolean_array1228,28533
static public boolean[] boolean_array(Object sizeOrSeq){boolean_array1245,28897
static public boolean[] booleans(Object array){booleans1259,29257
static public byte[] bytes(Object array){bytes1263,29335
static public char[] chars(Object array){chars1267,29404
static public short[] shorts(Object array){shorts1271,29473
static public float[] floats(Object array){floats1275,29545
static public double[] doubles(Object array){doubles1279,29617
static public int[] ints(Object array){ints1283,29692
static public long[] longs(Object array){longs1287,29758
static public Number num(Object x){num1291,29827
static public Number num(float x){num1295,29886
static public Number num(double x){num1299,29950
static public double add(double x, double y){add1303,30016
static public double addP(double x, double y){addP1307,30080
static public double minus(double x, double y){minus1311,30145
static public double minusP(double x, double y){minusP1315,30211
static public double minus(double x){minus1319,30278
static public double minusP(double x){minusP1323,30331
static public double inc(double x){inc1327,30385
static public double incP(double x){incP1331,30439
static public double dec(double x){dec1335,30494
static public double decP(double x){decP1339,30548
static public double multiply(double x, double y){multiply1343,30603
static public double multiplyP(double x, double y){multiplyP1347,30672
static public double divide(double x, double y){divide1351,30742
static public boolean equiv(double x, double y){equiv1355,30809
static public boolean lt(double x, double y){lt1359,30877
static public boolean lte(double x, double y){lte1363,30941
static public boolean gt(double x, double y){gt1367,31007
static public boolean gte(double x, double y){gte1371,31071
static public boolean isPos(double x){isPos1375,31137
static public boolean isNeg(double x){isNeg1379,31194
static public boolean isZero(double x){isZero1383,31251
static int throwIntOverflow(){throwIntOverflow1387,31310
static public int unchecked_int_add(int x, int y){unchecked_int_add1395,31466
static public int unchecked_int_subtract(int x, int y){unchecked_int_subtract1399,31535
static public int unchecked_int_negate(int x){unchecked_int_negate1403,31609
static public int unchecked_int_inc(int x){unchecked_int_inc1407,31671
static public int unchecked_int_dec(int x){unchecked_int_dec1411,31733
static public int unchecked_int_multiply(int x, int y){unchecked_int_multiply1415,31795
static public long not(Object x){not1430,32069
static public long not(long x){not1433,32136
static public long and(Object x, Object y){and1440,32243
static public long and(Object x, long y){and1443,32334
static public long and(long x, Object y){and1446,32411
static public long and(long x, long y){and1449,32488
static public long or(Object x, Object y){or1457,32606
static public long or(Object x, long y){or1460,32695
static public long or(long x, Object y){or1463,32770
static public long or(long x, long y){or1466,32845
static public long xor(Object x, Object y){xor1474,32966
static public long xor(Object x, long y){xor1477,33057
static public long xor(long x, Object y){xor1480,33134
static public long xor(long x, long y){xor1483,33211
static public long andNot(Object x, Object y){andNot1487,33272
static public long andNot(Object x, long y){andNot1490,33369
static public long andNot(long x, Object y){andNot1493,33452
static public long andNot(long x, long y){andNot1496,33535
static public long clearBit(Object x, Object y){clearBit1500,33600
static public long clearBit(Object x, long y){clearBit1503,33701
static public long clearBit(long x, Object y){clearBit1506,33788
static public long clearBit(long x, long n){clearBit1509,33875
static public long setBit(Object x, Object y){setBit1513,33950
static public long setBit(Object x, long y){setBit1516,34047
static public long setBit(long x, Object y){setBit1519,34130
static public long setBit(long x, long n){setBit1522,34213
static public long flipBit(Object x, Object y){flipBit1526,34285
static public long flipBit(Object x, long y){flipBit1529,34384
static public long flipBit(long x, Object y){flipBit1532,34469
static public long flipBit(long x, long n){flipBit1535,34554
static public boolean testBit(Object x, Object y){testBit1539,34627
static public boolean testBit(Object x, long y){testBit1542,34729
static public boolean testBit(long x, Object y){testBit1545,34817
static public boolean testBit(long x, long n){testBit1548,34905
static public int unchecked_int_divide(int x, int y){unchecked_int_divide1584,35630
static public int unchecked_int_remainder(int x, int y){unchecked_int_remainder1588,35702
static public Number num(long x){num1624,36287
static public long unchecked_add(long x, long y){return x + y;}unchecked_add1628,36349
static public long unchecked_minus(long x, long y){return x - y;}unchecked_minus1629,36413
static public long unchecked_multiply(long x, long y){return x * y;}unchecked_multiply1630,36479
static public long unchecked_minus(long x){return -x;}unchecked_minus1631,36548
static public long unchecked_inc(long x){return x + 1;}unchecked_inc1632,36603
static public long unchecked_dec(long x){return x - 1;}unchecked_dec1633,36659
static public Number unchecked_add(Object x, Object y){return add(x,y);}unchecked_add1635,36716
static public Number unchecked_minus(Object x, Object y){return minus(x,y);}unchecked_minus1636,36789
static public Number unchecked_multiply(Object x, Object y){return multiply(x,y);}unchecked_multiply1637,36866
static public Number unchecked_minus(Object x){return minus(x);}unchecked_minus1638,36949
static public Number unchecked_inc(Object x){return inc(x);}unchecked_inc1639,37014
static public Number unchecked_dec(Object x){return dec(x);}unchecked_dec1640,37075
static public double unchecked_add(double x, double y){return add(x,y);}unchecked_add1642,37137
static public double unchecked_minus(double x, double y){return minus(x,y);}unchecked_minus1643,37210
static public double unchecked_multiply(double x, double y){return multiply(x,y);}unchecked_multiply1644,37287
static public double unchecked_minus(double x){return minus(x);}unchecked_minus1645,37370
static public double unchecked_inc(double x){return inc(x);}unchecked_inc1646,37435
static public double unchecked_dec(double x){return dec(x);}unchecked_dec1647,37496
static public double unchecked_add(double x, Object y){return add(x,y);}unchecked_add1649,37558
static public double unchecked_minus(double x, Object y){return minus(x,y);}unchecked_minus1650,37631
static public double unchecked_multiply(double x, Object y){return multiply(x,y);}unchecked_multiply1651,37708
static public double unchecked_add(Object x, double y){return add(x,y);}unchecked_add1652,37791
static public double unchecked_minus(Object x, double y){return minus(x,y);}unchecked_minus1653,37864
static public double unchecked_multiply(Object x, double y){return multiply(x,y);}unchecked_multiply1654,37941
static public double unchecked_add(double x, long y){return add(x,y);}unchecked_add1656,38025
static public double unchecked_minus(double x, long y){return minus(x,y);}unchecked_minus1657,38096
static public double unchecked_multiply(double x, long y){return multiply(x,y);}unchecked_multiply1658,38171
static public double unchecked_add(long x, double y){return add(x,y);}unchecked_add1659,38252
static public double unchecked_minus(long x, double y){return minus(x,y);}unchecked_minus1660,38323
static public double unchecked_multiply(long x, double y){return multiply(x,y);}unchecked_multiply1661,38398
static public Number unchecked_add(long x, Object y){return add(x,y);}unchecked_add1663,38480
static public Number unchecked_minus(long x, Object y){return minus(x,y);}unchecked_minus1664,38551
static public Number unchecked_multiply(long x, Object y){return multiply(x,y);}unchecked_multiply1665,38626
static public Number unchecked_add(Object x, long y){return add(x,y);}unchecked_add1666,38707
static public Number unchecked_minus(Object x, long y){return minus(x,y);}unchecked_minus1667,38778
static public Number unchecked_multiply(Object x, long y){return multiply(x,y);}unchecked_multiply1668,38853
static public Number quotient(double x, Object y){return quotient((Object)x,y);}quotient1670,38935
static public Number quotient(Object x, double y){return quotient(x,(Object)y);}quotient1671,39016
static public Number quotient(long x, Object y){return quotient((Object)x,y);}quotient1672,39097
static public Number quotient(Object x, long y){return quotient(x,(Object)y);}quotient1673,39176
static public double quotient(double x, long y){return quotient(x,(double)y);}quotient1674,39255
static public double quotient(long x, double y){return quotient((double)x,y);}quotient1675,39334
static public Number remainder(double x, Object y){return remainder((Object)x,y);}remainder1677,39414
static public Number remainder(Object x, double y){return remainder(x,(Object)y);}remainder1678,39497
static public Number remainder(long x, Object y){return remainder((Object)x,y);}remainder1679,39580
static public Number remainder(Object x, long y){return remainder(x,(Object)y);}remainder1680,39661
static public double remainder(double x, long y){return remainder(x,(double)y);}remainder1681,39742
static public double remainder(long x, double y){return remainder((double)x,y);}remainder1682,39823
static public long add(long x, long y){add1684,39905
static public Number addP(long x, long y){addP1691,40046
static public long minus(long x, long y){minus1698,40202
static public Number minusP(long x, long y){minusP1705,40348
static public long minus(long x){minus1712,40511
static public Number minusP(long x){minusP1718,40614
static public long inc(long x){inc1724,40760
static public Number incP(long x){incP1730,40864
static public long dec(long x){dec1736,40975
static public Number decP(long x){decP1742,41079
static public long multiply(long x, long y){multiply1749,41191
static public Number multiplyP(long x, long y){multiplyP1756,41327
static public long quotient(long x, long y){quotient1763,41483
static public long remainder(long x, long y){remainder1767,41546
static public boolean equiv(long x, long y){equiv1771,41610
static public boolean lt(long x, long y){lt1775,41674
static public boolean lte(long x, long y){lte1779,41734
static public boolean gt(long x, long y){gt1783,41796
static public boolean gte(long x, long y){gte1787,41856
static public boolean isPos(long x){isPos1791,41918
static public boolean isNeg(long x){isNeg1795,41973
static public boolean isZero(long x){isZero1799,42028
static public Number add(long x, Object y){add3522,78473
static public Number add(Object x, long y){add3526,78546
static public Number addP(long x, Object y){addP3530,78619
static public Number addP(Object x, long y){addP3534,78694
static public double add(double x, Object y){add3538,78769
static public double add(Object x, double y){add3542,78860
static public double add(double x, long y){add3546,78951
static public double add(long x, double y){add3550,79013
static public double addP(double x, Object y){addP3554,79075
static public double addP(Object x, double y){addP3558,79168
static public double addP(double x, long y){addP3562,79261
static public double addP(long x, double y){addP3566,79324
static public Number minus(long x, Object y){minus3570,79387
static public Number minus(Object x, long y){minus3574,79464
static public Number minusP(long x, Object y){minusP3578,79541
static public Number minusP(Object x, long y){minusP3582,79620
static public double minus(double x, Object y){minus3586,79699
static public double minus(Object x, double y){minus3590,79794
static public double minus(double x, long y){minus3594,79889
static public double minus(long x, double y){minus3598,79953
static public double minusP(double x, Object y){minusP3602,80017
static public double minusP(Object x, double y){minusP3606,80113
static public double minusP(double x, long y){minusP3610,80209
static public double minusP(long x, double y){minusP3614,80274
static public Number multiply(long x, Object y){multiply3618,80339
static public Number multiply(Object x, long y){multiply3622,80422
static public Number multiplyP(long x, Object y){multiplyP3626,80505
static public Number multiplyP(Object x, long y){multiplyP3630,80590
static public double multiply(double x, Object y){multiply3634,80675
static public double multiply(Object x, double y){multiply3638,80776
static public double multiply(double x, long y){multiply3642,80877
static public double multiply(long x, double y){multiply3646,80944
static public double multiplyP(double x, Object y){multiplyP3650,81011
static public double multiplyP(Object x, double y){multiplyP3654,81114
static public double multiplyP(double x, long y){multiplyP3658,81217
static public double multiplyP(long x, double y){multiplyP3662,81285
static public Number divide(long x, Object y){divide3666,81353
static public Number divide(Object x, long y){divide3670,81432
static public double divide(double x, Object y){divide3674,81511
static public double divide(Object x, double y){divide3678,81602
static public double divide(double x, long y){divide3682,81693
static public double divide(long x, double y){divide3686,81758
static public Number divide(long x, long y){divide3690,81826
static public boolean lt(long x, Object y){lt3694,81912
static public boolean lt(Object x, long y){lt3698,81984
static public boolean lt(double x, Object y){lt3702,82056
static public boolean lt(Object x, double y){lt3706,82144
static public boolean lt(double x, long y){lt3710,82232
static public boolean lt(long x, double y){lt3714,82294
static public boolean lte(long x, Object y){lte3718,82356
static public boolean lte(Object x, long y){lte3722,82430
static public boolean lte(double x, Object y){lte3726,82504
static public boolean lte(Object x, double y){lte3730,82594
static public boolean lte(double x, long y){lte3734,82684
static public boolean lte(long x, double y){lte3738,82748
static public boolean gt(long x, Object y){gt3742,82812
static public boolean gt(Object x, long y){gt3746,82884
static public boolean gt(double x, Object y){gt3750,82956
static public boolean gt(Object x, double y){gt3754,83044
static public boolean gt(double x, long y){gt3758,83132
static public boolean gt(long x, double y){gt3762,83194
static public boolean gte(long x, Object y){gte3766,83256
static public boolean gte(Object x, long y){gte3770,83330
static public boolean gte(double x, Object y){gte3774,83404
static public boolean gte(Object x, double y){gte3778,83494
static public boolean gte(double x, long y){gte3782,83584
static public boolean gte(long x, double y){gte3786,83648
static public boolean equiv(long x, Object y){equiv3790,83712
static public boolean equiv(Object x, long y){equiv3794,83790
static public boolean equiv(double x, Object y){equiv3798,83868
static public boolean equiv(Object x, double y){equiv3802,83960
static public boolean equiv(double x, long y){equiv3806,84052
static public boolean equiv(long x, double y){equiv3810,84118
static boolean isNaN(Object x){isNaN3815,84185
static public double max(double x, double y){max3820,84322
static public Object max(double x, long y){max3824,84395
static public Object max(double x, Object y){max3835,84528
static public Object max(long x, double y){max3848,84721
static public long max(long x, long y){max3860,84855
static public Object max(long x, Object y){max3869,84949
static public Object max(Object x, long y){max3880,85077
static public Object max(Object x, double y){max3891,85205
static public Object max(Object x, Object y){max3904,85399
static public double min(double x, double y){min3918,85566
static public Object min(double x, long y){min3922,85639
static public Object min(double x, Object y){min3933,85773
static public Object min(long x, double y){min3946,85966
static public long min(long x, long y){min3958,86100
static public Object min(long x, Object y){min3966,86193
static public Object min(Object x, long y){min3977,86321
static public Object min(Object x, double y){min3988,86449
static public Object min(Object x, Object y){min4001,86642

/home/bronsa/src/clojure/src/jvm/clojure/lang/StringSeq.java,514
package clojure.lang;clojure.lang13,504
public class StringSeq extends ASeq implements IndexedSeq{StringSeq15,527
public final CharSequence s;s16,586
public final int i;i17,615
static public StringSeq create(CharSequence s){create19,636
StringSeq(IPersistentMap meta, CharSequence s, int i){StringSeq25,758
public Obj withMeta(IPersistentMap meta){withMeta31,856
public Object first(){first37,971
public ISeq next(){next41,1037
public int index(){index47,1139
public int count(){count51,1173

/home/bronsa/src/clojure/src/jvm/clojure/lang/LazySeq.java,2011
package clojure.lang;clojure.lang13,505
public final class LazySeq extends Obj implements ISeq, Sequential, List, IPending, IHashEq{LazySeq17,549
public LazySeq(IFn fn){LazySeq23,695
public Obj withMeta(IPersistentMap meta){withMeta33,830
final synchronized Object sval(){sval37,909
final synchronized public ISeq seq(){seq59,1172
public int count(){count74,1377
public Object first(){first81,1556
public ISeq next(){next88,1639
public ISeq more(){more95,1719
public ISeq cons(Object o){cons102,1814
public IPersistentCollection empty(){empty106,1872
public boolean equiv(Object o){equiv110,1943
public int hashCode(){hashCode114,1997
public int hasheq(){hasheq121,2093
public boolean equals(Object o){equals128,2189
public Object[] toArray(){toArray139,2403
public boolean add(Object o){add143,2463
public boolean remove(Object o){remove147,2540
public boolean addAll(Collection c){addAll151,2620
public void clear(){clear155,2704
public boolean retainAll(Collection c){retainAll159,2772
public boolean removeAll(Collection c){removeAll163,2859
public boolean containsAll(Collection c){containsAll167,2946
public Object[] toArray(Object[] a){toArray176,3068
public int size(){size180,3150
public boolean isEmpty(){isEmpty184,3189
public boolean contains(Object o){contains188,3241
public Iterator iterator(){iterator197,3395
public List subList(int fromIndex, int toIndex){subList206,3554
public Object set(int index, Object element){set210,3651
public Object remove(int index){remove214,3744
public int indexOf(Object o){indexOf218,3824
public int lastIndexOf(Object o){lastIndexOf228,3984
public ListIterator listIterator(){listIterator232,4053
public ListIterator listIterator(int index){listIterator236,4124
public Object get(int index){get240,4209
public void add(int index, Object element){add244,4271
public boolean addAll(int index, Collection c){addAll248,4362
synchronized public boolean isRealized(){isRealized253,4458

/home/bronsa/src/clojure/src/jvm/clojure/lang/Indexed.java,176
package clojure.lang;clojure.lang13,505
public interface Indexed extends Counted{Indexed15,528
Object nth(int i);nth16,570
Object nth(int i, Object notFound);nth18,590

/home/bronsa/src/clojure/src/jvm/clojure/lang/IPending.java,129
package clojure.lang;clojure.lang11,480
public interface IPending{IPending13,503
    boolean isRealized();isRealized14,530

/home/bronsa/src/clojure/src/jvm/clojure/lang/DynamicClassLoader.java,923
package clojure.lang;clojure.lang13,505
public class DynamicClassLoader extends URLClassLoader{DynamicClassLoader24,782
HashMap<Integer, Object[]> constantVals = new HashMap<Integer, Object[]>();constantVals25,838
static ConcurrentHashMap<String, Reference<Class>>classCache =classCache26,914
static final URL[] EMPTY_URLS = new URL[]{};EMPTY_URLS29,1038
static final ReferenceQueue rq = new ReferenceQueue();rq31,1084
public DynamicClassLoader(){DynamicClassLoader33,1140
public DynamicClassLoader(ClassLoader parent){DynamicClassLoader40,1502
public Class defineClass(String name, byte[] bytes, Object srcForm){defineClass44,1579
protected Class<?> findClass(String name) throws ClassNotFoundException{findClass51,1804
public void registerConstants(int id, Object[] val){registerConstants64,2094
public Object[] getConstants(int id){getConstants68,2178
public void addURL(URL url){addURL72,2249

/home/bronsa/src/clojure/src/jvm/clojure/lang/KeywordLookupSite.java,330
package clojure.lang;clojure.lang13,504
public final class KeywordLookupSite implements ILookupSite, ILookupThunk{KeywordLookupSite15,527
final Keyword k;k17,603
public KeywordLookupSite(Keyword k){KeywordLookupSite19,621
public ILookupThunk fault(Object target){fault23,674
public Object get(Object target){get35,891

/home/bronsa/src/clojure/src/jvm/clojure/lang/ILookupThunk.java,131
package clojure.lang;clojure.lang13,504
public interface ILookupThunk{ILookupThunk15,527
Object get(Object target);get17,559

/home/bronsa/src/clojure/src/jvm/clojure/lang/IEditableCollection.java,162
package clojure.lang;clojure.lang13,505
public interface IEditableCollection{IEditableCollection15,528
ITransientCollection asTransient();asTransient16,566

/home/bronsa/src/clojure/src/jvm/clojure/lang/IDeref.java,111
package clojure.lang;clojure.lang13,504
public interface IDeref{IDeref15,527
Object deref() ;deref16,552

/home/bronsa/src/clojure/src/jvm/clojure/lang/APersistentVector.java,4341
package clojure.lang;clojure.lang13,505
public abstract class APersistentVector extends AFn implements IPersistentVector, Iterable,APersistentVector18,578
int _hash = -1;_hash22,915
int _hasheq = -1;_hasheq23,931
public String toString(){toString25,950
public ISeq seq(){seq29,1009
public ISeq rseq(){rseq35,1089
static boolean doEquals(IPersistentVector v, Object obj){doEquals41,1181
static boolean doEquiv(IPersistentVector v, Object obj){doEquiv85,2203
public boolean equals(Object obj){equals128,3162
public boolean equiv(Object obj){equiv132,3229
public int hashCode(){hashCode136,3294
public int hasheq(){hasheq156,3663
public Object get(int index){get170,3878
public Object nth(int i, Object notFound){nth174,3931
public Object remove(int i){remove180,4039
public int indexOf(Object o){indexOf184,4115
public int lastIndexOf(Object o){lastIndexOf191,4235
public ListIterator listIterator(){listIterator198,4364
public ListIterator listIterator(final int index){listIterator202,4428
public List subList(int fromIndex, int toIndex){subList244,5102
public Object set(int i, Object o){set249,5207
public void add(int i, Object o){add253,5290
public boolean addAll(int i, Collection c){addAll257,5371
public Object invoke(Object arg1) {invoke262,5463
public Iterator iterator(){iterator268,5630
public Object peek(){peek287,5917
public boolean containsKey(Object key){containsKey293,6000
public IMapEntry entryAt(Object key){entryAt300,6154
public IPersistentVector assoc(Object key, Object val){assoc310,6344
public Object valAt(Object key, Object notFound){valAt319,6558
public Object valAt(Object key){valAt329,6745
public Object[] toArray(){toArray335,6847
public boolean add(Object o){add339,6907
public boolean remove(Object o){remove343,6984
public boolean addAll(Collection c){addAll347,7064
public void clear(){clear351,7148
public boolean retainAll(Collection c){retainAll355,7216
public boolean removeAll(Collection c){removeAll359,7303
public boolean containsAll(Collection c){containsAll363,7390
public Object[] toArray(Object[] a){toArray372,7512
public int size(){size376,7594
public boolean isEmpty(){isEmpty380,7633
public boolean contains(Object o){contains384,7684
public int length(){length393,7838
public int compareTo(Object o){compareTo397,7879
    static class Seq extends ASeq implements IndexedSeq, IReduce{Seq412,8160
	final IPersistentVector v;v414,8261
	final int i;i415,8289
	public Seq(IPersistentVector v, int i){Seq418,8305
	Seq(IPersistentMap meta, IPersistentVector v, int i){Seq423,8378
	public Object first(){first429,8480
	public ISeq next(){next433,8527
	public int index(){index439,8638
	public int count(){count443,8675
	public APersistentVector.Seq withMeta(IPersistentMap meta){withMeta447,8724
	public Object reduce(IFn f) {reduce451,8837
	public Object reduce(IFn f, Object start) {reduce458,8986
public static class RSeq extends ASeq implements IndexedSeq, Counted{RSeq466,9172
	final IPersistentVector v;v467,9242
	final int i;i468,9270
	public RSeq(IPersistentVector vector, int i){RSeq470,9285
	RSeq(IPersistentMap meta, IPersistentVector v, int i){RSeq475,9369
	public Object first(){first481,9472
	public ISeq next(){next485,9519
	public int index(){index491,9619
	public int count(){count495,9656
	public APersistentVector.RSeq withMeta(IPersistentMap meta){withMeta499,9697
static class SubVector extends APersistentVector implements IObj{SubVector504,9814
	public final IPersistentVector v;v505,9880
	public final int start;start506,9915
	public final int end;end507,9940
	final IPersistentMap _meta;_meta508,9963
	public SubVector(IPersistentMap meta, IPersistentVector v, int start, int end){SubVector512,9995
	public Iterator iterator(){return ((PersistentVector)v).rangedIterator(start,end);}iterator527,10337
	public Object nth(int i){nth529,10423
	public IPersistentVector assocN(int i, Object val){assocN535,10559
	public int count(){count543,10798
	public IPersistentVector cons(Object o){cons547,10845
	public IPersistentCollection empty(){empty551,10956
	public IPersistentStack pop(){pop555,11049
	public SubVector withMeta(IPersistentMap meta){withMeta563,11202
	public IPersistentMap meta(){meta569,11336

/home/bronsa/src/clojure/src/jvm/clojure/lang/IMapEntry.java,155
package clojure.lang;clojure.lang11,475
public interface IMapEntry extends Map.Entry{IMapEntry15,525
Object key();key16,572
Object val();val18,589

/home/bronsa/src/clojure/src/jvm/clojure/lang/FnLoaderThunk.java,707
package clojure.lang;clojure.lang13,500
public class FnLoaderThunk extends RestFn{FnLoaderThunk15,523
final Var v;v17,567
final ClassLoader loader;loader18,580
final String fnClassName;fnClassName19,606
IFn fn;fn20,632
public FnLoaderThunk(Var v, String fnClassName){FnLoaderThunk22,641
public Object invoke(Object arg1) {invoke29,804
public Object invoke(Object arg1, Object arg2) {invoke34,877
public Object invoke(Object arg1, Object arg2, Object arg3) {invoke39,968
protected Object doInvoke(Object args) {doInvoke44,1077
public int getRequiredArity(){getRequiredArity64,1372
public IObj withMeta(IPersistentMap meta){withMeta68,1417
public IPersistentMap meta(){meta72,1477

/home/bronsa/src/clojure/src/jvm/clojure/lang/Settable.java,178
package clojure.lang;clojure.lang13,505
public interface Settable {Settable15,528
    Object doSet(Object val) ;doSet16,556
    Object doReset(Object val) ;doReset17,587

/home/bronsa/src/clojure/src/jvm/clojure/lang/RestFn.java,5449
package clojure.lang;clojure.lang10,479
public abstract class RestFn extends AFunction{RestFn12,502
abstract public int getRequiredArity();getRequiredArity13,550
protected Object doInvoke(Object args) {doInvoke15,591
protected Object doInvoke(Object arg1, Object args) {doInvoke19,649
protected Object doInvoke(Object arg1, Object arg2, Object args) {doInvoke23,720
protected Object doInvoke(Object arg1, Object arg2, Object arg3, Object args) {doInvoke27,804
protected Object doInvoke(Object arg1, Object arg2, Object arg3, Object arg4, Object args) {doInvoke31,901
protected Object doInvoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object args)doInvoke35,1011
protected Object doInvoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object args)doInvoke40,1136
protected Object doInvoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,doInvoke45,1274
protected Object doInvoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,doInvoke50,1449
protected Object doInvoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,doInvoke55,1637
protected Object doInvoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,doInvoke60,1838
protected Object doInvoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,doInvoke65,2053
protected Object doInvoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,doInvoke70,2282
protected Object doInvoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,doInvoke76,2527
protected Object doInvoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,doInvoke82,2786
protected Object doInvoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,doInvoke88,3083
protected Object doInvoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,doInvoke94,3394
protected Object doInvoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,doInvoke100,3719
protected Object doInvoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,doInvoke106,4058
protected Object doInvoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,doInvoke113,4413
protected Object doInvoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,doInvoke121,4808
public Object applyTo(ISeq args) {applyTo129,5216
public Object invoke() {invoke393,14046
public Object invoke(Object arg1) {invoke404,14183
public Object invoke(Object arg1, Object arg2) {invoke417,14438
public Object invoke(Object arg1, Object arg2, Object arg3) {invoke432,14873
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4) {invoke453,15640
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5) {invoke478,16761
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6) {invoke508,18331
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7)invoke546,20467
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke614,24999
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke698,30890
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke800,38300
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke925,46776
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke1091,51473
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke1283,56958
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke1517,63551
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke1783,71151
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke2082,79797
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke2416,89538
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke2787,100442
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke3198,112648
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke3652,126800
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke3887,147379
protected static ISeq ontoArrayPrepend(Object[] array, Object... args){ontoArrayPrepend4084,170186
protected static ISeq findKey(Object key, ISeq args){findKey4091,170384

/home/bronsa/src/clojure/src/jvm/clojure/lang/IReduce.java,171
package clojure.lang;clojure.lang13,505
public interface IReduce{IReduce15,528
Object reduce(IFn f) ;reduce16,554
Object reduce(IFn f, Object start) ;reduce18,578

/home/bronsa/src/clojure/src/jvm/clojure/lang/ITransientMap.java,289
package clojure.lang;clojure.lang13,505
public interface ITransientMap extends ITransientAssociative, Counted{ITransientMap15,528
ITransientMap assoc(Object key, Object val);assoc17,601
ITransientMap without(Object key);without19,647
IPersistentMap persistent();persistent21,683

/home/bronsa/src/clojure/src/jvm/clojure/lang/ExceptionInfo.java,475
package clojure.lang;clojure.lang11,465
public class ExceptionInfo extends RuntimeException implements IExceptionInfo {ExceptionInfo18,695
    public final IPersistentMap data;data19,775
    public ExceptionInfo(String s, IPersistentMap data) {ExceptionInfo21,814
    public ExceptionInfo(String s, IPersistentMap data, Throwable throwable) {ExceptionInfo30,1102
    public IPersistentMap getData() {getData35,1243
    public String toString() {toString39,1309

/home/bronsa/src/clojure/src/jvm/clojure/lang/ILookupSite.java,139
package clojure.lang;clojure.lang13,504
public interface ILookupSite{ILookupSite15,527
ILookupThunk fault(Object target);fault17,558

/home/bronsa/src/clojure/src/jvm/clojure/lang/SeqIterator.java,319
package clojure.lang;clojure.lang13,505
public class SeqIterator implements Iterator{SeqIterator18,597
ISeq seq;seq20,644
public SeqIterator(ISeq seq){SeqIterator22,655
public boolean hasNext(){hasNext26,705
public Object next() throws NoSuchElementException {next30,755
public void remove(){remove38,929

/home/bronsa/src/clojure/src/jvm/clojure/lang/Compile.java,151
package clojure.lang;clojure.lang12,481
public class Compile{Compile26,925
public static void main(String[] args) throws IOException{main38,1612

/home/bronsa/src/clojure/src/jvm/clojure/lang/Agent.java,2436
package clojure.lang;clojure.lang13,505
public class Agent extends ARef {Agent22,793
static class ActionQueue {ActionQueue24,828
	public final IPersistentStack q;q25,855
	public final Throwable error; // non-null indicates fail stateerror26,889
	static final ActionQueue EMPTY = new ActionQueue(PersistentQueue.EMPTY, null);EMPTY27,953
	public ActionQueue( IPersistentStack q, Throwable error )ActionQueue29,1034
static final Keyword CONTINUE = Keyword.intern(null, "continue");CONTINUE36,1140
static final Keyword FAIL = Keyword.intern(null, "fail");FAIL37,1206
volatile Object state;state39,1265
    AtomicReference<ActionQueue> aq = new AtomicReference<ActionQueue>(ActionQueue.EMPTY);aq40,1288
    volatile Keyword errorMode = CONTINUE;errorMode42,1380
    volatile IFn errorHandler = null;errorHandler43,1423
volatile public static ExecutorService pooledExecutor =pooledExecutor49,1617
volatile public static ExecutorService soloExecutor = Executors.newCachedThreadPool(soloExecutor53,1830
final static ThreadLocal<IPersistentVector> nested = new ThreadLocal<IPersistentVector>();nested56,1999
public static void shutdown(){shutdown68,2425
static class Action implements Runnable{Action73,2513
	final Agent agent;agent74,2554
	final IFn fn;fn75,2574
	final ISeq args;args76,2589
	final Executor exec;exec77,2607
	public Action(Agent agent, IFn fn, ISeq args, Executor exec){Action80,2631
	void execute(){execute87,2776
	static void doRun(Action action){doRun105,3041
	public void run(){run162,4220
public Agent(Object state) {Agent167,4261
public Agent(Object state, IPersistentMap meta)  {Agent171,4312
boolean setState(Object newState) {setState176,4404
public Object deref() {deref183,4530
public Throwable getError(){getError187,4572
public void setErrorMode(Keyword k){setErrorMode191,4628
public Keyword getErrorMode(){getErrorMode195,4684
public void setErrorHandler(IFn f){setErrorHandler199,4737
public IFn getErrorHandler(){getErrorHandler203,4795
synchronized public Object restart(Object newState, boolean clearActions){restart207,4850
public Object dispatch(IFn fn, ISeq args, Executor exec) {dispatch234,5392
static void dispatchAction(Action action){dispatchAction246,5675
void enqueue(Action action){enqueue258,5944
public int getQueueCount(){getQueueCount271,6248
static public int releasePendingSends(){releasePendingSends275,6307

/home/bronsa/src/clojure/src/jvm/clojure/lang/IMeta.java,119
package clojure.lang;clojure.lang13,505
public interface IMeta {IMeta15,528
    IPersistentMap meta();meta16,553

/home/bronsa/src/clojure/src/jvm/clojure/lang/LazilyPersistentVector.java,263
package clojure.lang;clojure.lang13,505
public class LazilyPersistentVector{LazilyPersistentVector17,558
static public IPersistentVector createOwning(Object... items){createOwning20,597
static public IPersistentVector create(Collection coll){create28,871

/home/bronsa/src/clojure/src/jvm/clojure/lang/IPersistentMap.java,311
package clojure.lang;clojure.lang11,465
public interface IPersistentMap extends Iterable, Associative, Counted{IPersistentMap14,489
IPersistentMap assoc(Object key, Object val);assoc17,563
IPersistentMap assocEx(Object key, Object val) ;assocEx19,610
IPersistentMap without(Object key) ;without21,660

/home/bronsa/src/clojure/src/jvm/clojure/lang/IPersistentStack.java,193
package clojure.lang;clojure.lang13,505
public interface IPersistentStack extends IPersistentCollection{IPersistentStack15,528
Object peek();peek16,593
IPersistentStack pop();pop18,609

/home/bronsa/src/clojure/src/jvm/clojure/lang/IFn.java,81781
package clojure.lang;clojure.lang13,516
public interface IFn extends Callable, Runnable{IFn17,578
public Object invoke() ;invoke19,628
public Object invoke(Object arg1) ;invoke21,654
public Object invoke(Object arg1, Object arg2) ;invoke23,691
public Object invoke(Object arg1, Object arg2, Object arg3) ;invoke25,741
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4) ;invoke27,804
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5) ;invoke29,880
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6) ;invoke31,969
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7)invoke33,1071
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke36,1188
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke39,1337
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke42,1499
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke45,1675
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke48,1865
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke51,2069
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke54,2287
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke58,2521
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke62,2788
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke66,3069
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke70,3364
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke74,3673
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke78,3996
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke83,4335
public Object applyTo(ISeq arglist) ;applyTo89,4711
static public interface L{long invokePrim();}L91,4750
static public interface L{long invokePrim();}invokePrim91,4750
static public interface D{double invokePrim();}D92,4796
static public interface D{double invokePrim();}invokePrim92,4796
static public interface OL{long invokePrim(Object arg0);}OL93,4844
static public interface OL{long invokePrim(Object arg0);}invokePrim93,4844
static public interface OD{double invokePrim(Object arg0);}OD94,4902
static public interface OD{double invokePrim(Object arg0);}invokePrim94,4902
static public interface LO{Object invokePrim(long arg0);}LO95,4962
static public interface LO{Object invokePrim(long arg0);}invokePrim95,4962
static public interface LL{long invokePrim(long arg0);}LL96,5020
static public interface LL{long invokePrim(long arg0);}invokePrim96,5020
static public interface LD{double invokePrim(long arg0);}LD97,5076
static public interface LD{double invokePrim(long arg0);}invokePrim97,5076
static public interface DO{Object invokePrim(double arg0);}DO98,5134
static public interface DO{Object invokePrim(double arg0);}invokePrim98,5134
static public interface DL{long invokePrim(double arg0);}DL99,5194
static public interface DL{long invokePrim(double arg0);}invokePrim99,5194
static public interface DD{double invokePrim(double arg0);}DD100,5252
static public interface DD{double invokePrim(double arg0);}invokePrim100,5252
static public interface OOL{long invokePrim(Object arg0, Object arg1);}OOL101,5312
static public interface OOL{long invokePrim(Object arg0, Object arg1);}invokePrim101,5312
static public interface OOD{double invokePrim(Object arg0, Object arg1);}OOD102,5384
static public interface OOD{double invokePrim(Object arg0, Object arg1);}invokePrim102,5384
static public interface OLO{Object invokePrim(Object arg0, long arg1);}OLO103,5458
static public interface OLO{Object invokePrim(Object arg0, long arg1);}invokePrim103,5458
static public interface OLL{long invokePrim(Object arg0, long arg1);}OLL104,5530
static public interface OLL{long invokePrim(Object arg0, long arg1);}invokePrim104,5530
static public interface OLD{double invokePrim(Object arg0, long arg1);}OLD105,5600
static public interface OLD{double invokePrim(Object arg0, long arg1);}invokePrim105,5600
static public interface ODO{Object invokePrim(Object arg0, double arg1);}ODO106,5672
static public interface ODO{Object invokePrim(Object arg0, double arg1);}invokePrim106,5672
static public interface ODL{long invokePrim(Object arg0, double arg1);}ODL107,5746
static public interface ODL{long invokePrim(Object arg0, double arg1);}invokePrim107,5746
static public interface ODD{double invokePrim(Object arg0, double arg1);}ODD108,5818
static public interface ODD{double invokePrim(Object arg0, double arg1);}invokePrim108,5818
static public interface LOO{Object invokePrim(long arg0, Object arg1);}LOO109,5892
static public interface LOO{Object invokePrim(long arg0, Object arg1);}invokePrim109,5892
static public interface LOL{long invokePrim(long arg0, Object arg1);}LOL110,5964
static public interface LOL{long invokePrim(long arg0, Object arg1);}invokePrim110,5964
static public interface LOD{double invokePrim(long arg0, Object arg1);}LOD111,6034
static public interface LOD{double invokePrim(long arg0, Object arg1);}invokePrim111,6034
static public interface LLO{Object invokePrim(long arg0, long arg1);}LLO112,6106
static public interface LLO{Object invokePrim(long arg0, long arg1);}invokePrim112,6106
static public interface LLL{long invokePrim(long arg0, long arg1);}LLL113,6176
static public interface LLL{long invokePrim(long arg0, long arg1);}invokePrim113,6176
static public interface LLD{double invokePrim(long arg0, long arg1);}LLD114,6244
static public interface LLD{double invokePrim(long arg0, long arg1);}invokePrim114,6244
static public interface LDO{Object invokePrim(long arg0, double arg1);}LDO115,6314
static public interface LDO{Object invokePrim(long arg0, double arg1);}invokePrim115,6314
static public interface LDL{long invokePrim(long arg0, double arg1);}LDL116,6386
static public interface LDL{long invokePrim(long arg0, double arg1);}invokePrim116,6386
static public interface LDD{double invokePrim(long arg0, double arg1);}LDD117,6456
static public interface LDD{double invokePrim(long arg0, double arg1);}invokePrim117,6456
static public interface DOO{Object invokePrim(double arg0, Object arg1);}DOO118,6528
static public interface DOO{Object invokePrim(double arg0, Object arg1);}invokePrim118,6528
static public interface DOL{long invokePrim(double arg0, Object arg1);}DOL119,6602
static public interface DOL{long invokePrim(double arg0, Object arg1);}invokePrim119,6602
static public interface DOD{double invokePrim(double arg0, Object arg1);}DOD120,6674
static public interface DOD{double invokePrim(double arg0, Object arg1);}invokePrim120,6674
static public interface DLO{Object invokePrim(double arg0, long arg1);}DLO121,6748
static public interface DLO{Object invokePrim(double arg0, long arg1);}invokePrim121,6748
static public interface DLL{long invokePrim(double arg0, long arg1);}DLL122,6820
static public interface DLL{long invokePrim(double arg0, long arg1);}invokePrim122,6820
static public interface DLD{double invokePrim(double arg0, long arg1);}DLD123,6890
static public interface DLD{double invokePrim(double arg0, long arg1);}invokePrim123,6890
static public interface DDO{Object invokePrim(double arg0, double arg1);}DDO124,6962
static public interface DDO{Object invokePrim(double arg0, double arg1);}invokePrim124,6962
static public interface DDL{long invokePrim(double arg0, double arg1);}DDL125,7036
static public interface DDL{long invokePrim(double arg0, double arg1);}invokePrim125,7036
static public interface DDD{double invokePrim(double arg0, double arg1);}DDD126,7108
static public interface DDD{double invokePrim(double arg0, double arg1);}invokePrim126,7108
static public interface OOOL{long invokePrim(Object arg0, Object arg1, Object arg2);}OOOL127,7182
static public interface OOOL{long invokePrim(Object arg0, Object arg1, Object arg2);}invokePrim127,7182
static public interface OOOD{double invokePrim(Object arg0, Object arg1, Object arg2);}OOOD128,7268
static public interface OOOD{double invokePrim(Object arg0, Object arg1, Object arg2);}invokePrim128,7268
static public interface OOLO{Object invokePrim(Object arg0, Object arg1, long arg2);}OOLO129,7356
static public interface OOLO{Object invokePrim(Object arg0, Object arg1, long arg2);}invokePrim129,7356
static public interface OOLL{long invokePrim(Object arg0, Object arg1, long arg2);}OOLL130,7442
static public interface OOLL{long invokePrim(Object arg0, Object arg1, long arg2);}invokePrim130,7442
static public interface OOLD{double invokePrim(Object arg0, Object arg1, long arg2);}OOLD131,7526
static public interface OOLD{double invokePrim(Object arg0, Object arg1, long arg2);}invokePrim131,7526
static public interface OODO{Object invokePrim(Object arg0, Object arg1, double arg2);}OODO132,7612
static public interface OODO{Object invokePrim(Object arg0, Object arg1, double arg2);}invokePrim132,7612
static public interface OODL{long invokePrim(Object arg0, Object arg1, double arg2);}OODL133,7700
static public interface OODL{long invokePrim(Object arg0, Object arg1, double arg2);}invokePrim133,7700
static public interface OODD{double invokePrim(Object arg0, Object arg1, double arg2);}OODD134,7786
static public interface OODD{double invokePrim(Object arg0, Object arg1, double arg2);}invokePrim134,7786
static public interface OLOO{Object invokePrim(Object arg0, long arg1, Object arg2);}OLOO135,7874
static public interface OLOO{Object invokePrim(Object arg0, long arg1, Object arg2);}invokePrim135,7874
static public interface OLOL{long invokePrim(Object arg0, long arg1, Object arg2);}OLOL136,7960
static public interface OLOL{long invokePrim(Object arg0, long arg1, Object arg2);}invokePrim136,7960
static public interface OLOD{double invokePrim(Object arg0, long arg1, Object arg2);}OLOD137,8044
static public interface OLOD{double invokePrim(Object arg0, long arg1, Object arg2);}invokePrim137,8044
static public interface OLLO{Object invokePrim(Object arg0, long arg1, long arg2);}OLLO138,8130
static public interface OLLO{Object invokePrim(Object arg0, long arg1, long arg2);}invokePrim138,8130
static public interface OLLL{long invokePrim(Object arg0, long arg1, long arg2);}OLLL139,8214
static public interface OLLL{long invokePrim(Object arg0, long arg1, long arg2);}invokePrim139,8214
static public interface OLLD{double invokePrim(Object arg0, long arg1, long arg2);}OLLD140,8296
static public interface OLLD{double invokePrim(Object arg0, long arg1, long arg2);}invokePrim140,8296
static public interface OLDO{Object invokePrim(Object arg0, long arg1, double arg2);}OLDO141,8380
static public interface OLDO{Object invokePrim(Object arg0, long arg1, double arg2);}invokePrim141,8380
static public interface OLDL{long invokePrim(Object arg0, long arg1, double arg2);}OLDL142,8466
static public interface OLDL{long invokePrim(Object arg0, long arg1, double arg2);}invokePrim142,8466
static public interface OLDD{double invokePrim(Object arg0, long arg1, double arg2);}OLDD143,8550
static public interface OLDD{double invokePrim(Object arg0, long arg1, double arg2);}invokePrim143,8550
static public interface ODOO{Object invokePrim(Object arg0, double arg1, Object arg2);}ODOO144,8636
static public interface ODOO{Object invokePrim(Object arg0, double arg1, Object arg2);}invokePrim144,8636
static public interface ODOL{long invokePrim(Object arg0, double arg1, Object arg2);}ODOL145,8724
static public interface ODOL{long invokePrim(Object arg0, double arg1, Object arg2);}invokePrim145,8724
static public interface ODOD{double invokePrim(Object arg0, double arg1, Object arg2);}ODOD146,8810
static public interface ODOD{double invokePrim(Object arg0, double arg1, Object arg2);}invokePrim146,8810
static public interface ODLO{Object invokePrim(Object arg0, double arg1, long arg2);}ODLO147,8898
static public interface ODLO{Object invokePrim(Object arg0, double arg1, long arg2);}invokePrim147,8898
static public interface ODLL{long invokePrim(Object arg0, double arg1, long arg2);}ODLL148,8984
static public interface ODLL{long invokePrim(Object arg0, double arg1, long arg2);}invokePrim148,8984
static public interface ODLD{double invokePrim(Object arg0, double arg1, long arg2);}ODLD149,9068
static public interface ODLD{double invokePrim(Object arg0, double arg1, long arg2);}invokePrim149,9068
static public interface ODDO{Object invokePrim(Object arg0, double arg1, double arg2);}ODDO150,9154
static public interface ODDO{Object invokePrim(Object arg0, double arg1, double arg2);}invokePrim150,9154
static public interface ODDL{long invokePrim(Object arg0, double arg1, double arg2);}ODDL151,9242
static public interface ODDL{long invokePrim(Object arg0, double arg1, double arg2);}invokePrim151,9242
static public interface ODDD{double invokePrim(Object arg0, double arg1, double arg2);}ODDD152,9328
static public interface ODDD{double invokePrim(Object arg0, double arg1, double arg2);}invokePrim152,9328
static public interface LOOO{Object invokePrim(long arg0, Object arg1, Object arg2);}LOOO153,9416
static public interface LOOO{Object invokePrim(long arg0, Object arg1, Object arg2);}invokePrim153,9416
static public interface LOOL{long invokePrim(long arg0, Object arg1, Object arg2);}LOOL154,9502
static public interface LOOL{long invokePrim(long arg0, Object arg1, Object arg2);}invokePrim154,9502
static public interface LOOD{double invokePrim(long arg0, Object arg1, Object arg2);}LOOD155,9586
static public interface LOOD{double invokePrim(long arg0, Object arg1, Object arg2);}invokePrim155,9586
static public interface LOLO{Object invokePrim(long arg0, Object arg1, long arg2);}LOLO156,9672
static public interface LOLO{Object invokePrim(long arg0, Object arg1, long arg2);}invokePrim156,9672
static public interface LOLL{long invokePrim(long arg0, Object arg1, long arg2);}LOLL157,9756
static public interface LOLL{long invokePrim(long arg0, Object arg1, long arg2);}invokePrim157,9756
static public interface LOLD{double invokePrim(long arg0, Object arg1, long arg2);}LOLD158,9838
static public interface LOLD{double invokePrim(long arg0, Object arg1, long arg2);}invokePrim158,9838
static public interface LODO{Object invokePrim(long arg0, Object arg1, double arg2);}LODO159,9922
static public interface LODO{Object invokePrim(long arg0, Object arg1, double arg2);}invokePrim159,9922
static public interface LODL{long invokePrim(long arg0, Object arg1, double arg2);}LODL160,10008
static public interface LODL{long invokePrim(long arg0, Object arg1, double arg2);}invokePrim160,10008
static public interface LODD{double invokePrim(long arg0, Object arg1, double arg2);}LODD161,10092
static public interface LODD{double invokePrim(long arg0, Object arg1, double arg2);}invokePrim161,10092
static public interface LLOO{Object invokePrim(long arg0, long arg1, Object arg2);}LLOO162,10178
static public interface LLOO{Object invokePrim(long arg0, long arg1, Object arg2);}invokePrim162,10178
static public interface LLOL{long invokePrim(long arg0, long arg1, Object arg2);}LLOL163,10262
static public interface LLOL{long invokePrim(long arg0, long arg1, Object arg2);}invokePrim163,10262
static public interface LLOD{double invokePrim(long arg0, long arg1, Object arg2);}LLOD164,10344
static public interface LLOD{double invokePrim(long arg0, long arg1, Object arg2);}invokePrim164,10344
static public interface LLLO{Object invokePrim(long arg0, long arg1, long arg2);}LLLO165,10428
static public interface LLLO{Object invokePrim(long arg0, long arg1, long arg2);}invokePrim165,10428
static public interface LLLL{long invokePrim(long arg0, long arg1, long arg2);}LLLL166,10510
static public interface LLLL{long invokePrim(long arg0, long arg1, long arg2);}invokePrim166,10510
static public interface LLLD{double invokePrim(long arg0, long arg1, long arg2);}LLLD167,10590
static public interface LLLD{double invokePrim(long arg0, long arg1, long arg2);}invokePrim167,10590
static public interface LLDO{Object invokePrim(long arg0, long arg1, double arg2);}LLDO168,10672
static public interface LLDO{Object invokePrim(long arg0, long arg1, double arg2);}invokePrim168,10672
static public interface LLDL{long invokePrim(long arg0, long arg1, double arg2);}LLDL169,10756
static public interface LLDL{long invokePrim(long arg0, long arg1, double arg2);}invokePrim169,10756
static public interface LLDD{double invokePrim(long arg0, long arg1, double arg2);}LLDD170,10838
static public interface LLDD{double invokePrim(long arg0, long arg1, double arg2);}invokePrim170,10838
static public interface LDOO{Object invokePrim(long arg0, double arg1, Object arg2);}LDOO171,10922
static public interface LDOO{Object invokePrim(long arg0, double arg1, Object arg2);}invokePrim171,10922
static public interface LDOL{long invokePrim(long arg0, double arg1, Object arg2);}LDOL172,11008
static public interface LDOL{long invokePrim(long arg0, double arg1, Object arg2);}invokePrim172,11008
static public interface LDOD{double invokePrim(long arg0, double arg1, Object arg2);}LDOD173,11092
static public interface LDOD{double invokePrim(long arg0, double arg1, Object arg2);}invokePrim173,11092
static public interface LDLO{Object invokePrim(long arg0, double arg1, long arg2);}LDLO174,11178
static public interface LDLO{Object invokePrim(long arg0, double arg1, long arg2);}invokePrim174,11178
static public interface LDLL{long invokePrim(long arg0, double arg1, long arg2);}LDLL175,11262
static public interface LDLL{long invokePrim(long arg0, double arg1, long arg2);}invokePrim175,11262
static public interface LDLD{double invokePrim(long arg0, double arg1, long arg2);}LDLD176,11344
static public interface LDLD{double invokePrim(long arg0, double arg1, long arg2);}invokePrim176,11344
static public interface LDDO{Object invokePrim(long arg0, double arg1, double arg2);}LDDO177,11428
static public interface LDDO{Object invokePrim(long arg0, double arg1, double arg2);}invokePrim177,11428
static public interface LDDL{long invokePrim(long arg0, double arg1, double arg2);}LDDL178,11514
static public interface LDDL{long invokePrim(long arg0, double arg1, double arg2);}invokePrim178,11514
static public interface LDDD{double invokePrim(long arg0, double arg1, double arg2);}LDDD179,11598
static public interface LDDD{double invokePrim(long arg0, double arg1, double arg2);}invokePrim179,11598
static public interface DOOO{Object invokePrim(double arg0, Object arg1, Object arg2);}DOOO180,11684
static public interface DOOO{Object invokePrim(double arg0, Object arg1, Object arg2);}invokePrim180,11684
static public interface DOOL{long invokePrim(double arg0, Object arg1, Object arg2);}DOOL181,11772
static public interface DOOL{long invokePrim(double arg0, Object arg1, Object arg2);}invokePrim181,11772
static public interface DOOD{double invokePrim(double arg0, Object arg1, Object arg2);}DOOD182,11858
static public interface DOOD{double invokePrim(double arg0, Object arg1, Object arg2);}invokePrim182,11858
static public interface DOLO{Object invokePrim(double arg0, Object arg1, long arg2);}DOLO183,11946
static public interface DOLO{Object invokePrim(double arg0, Object arg1, long arg2);}invokePrim183,11946
static public interface DOLL{long invokePrim(double arg0, Object arg1, long arg2);}DOLL184,12032
static public interface DOLL{long invokePrim(double arg0, Object arg1, long arg2);}invokePrim184,12032
static public interface DOLD{double invokePrim(double arg0, Object arg1, long arg2);}DOLD185,12116
static public interface DOLD{double invokePrim(double arg0, Object arg1, long arg2);}invokePrim185,12116
static public interface DODO{Object invokePrim(double arg0, Object arg1, double arg2);}DODO186,12202
static public interface DODO{Object invokePrim(double arg0, Object arg1, double arg2);}invokePrim186,12202
static public interface DODL{long invokePrim(double arg0, Object arg1, double arg2);}DODL187,12290
static public interface DODL{long invokePrim(double arg0, Object arg1, double arg2);}invokePrim187,12290
static public interface DODD{double invokePrim(double arg0, Object arg1, double arg2);}DODD188,12376
static public interface DODD{double invokePrim(double arg0, Object arg1, double arg2);}invokePrim188,12376
static public interface DLOO{Object invokePrim(double arg0, long arg1, Object arg2);}DLOO189,12464
static public interface DLOO{Object invokePrim(double arg0, long arg1, Object arg2);}invokePrim189,12464
static public interface DLOL{long invokePrim(double arg0, long arg1, Object arg2);}DLOL190,12550
static public interface DLOL{long invokePrim(double arg0, long arg1, Object arg2);}invokePrim190,12550
static public interface DLOD{double invokePrim(double arg0, long arg1, Object arg2);}DLOD191,12634
static public interface DLOD{double invokePrim(double arg0, long arg1, Object arg2);}invokePrim191,12634
static public interface DLLO{Object invokePrim(double arg0, long arg1, long arg2);}DLLO192,12720
static public interface DLLO{Object invokePrim(double arg0, long arg1, long arg2);}invokePrim192,12720
static public interface DLLL{long invokePrim(double arg0, long arg1, long arg2);}DLLL193,12804
static public interface DLLL{long invokePrim(double arg0, long arg1, long arg2);}invokePrim193,12804
static public interface DLLD{double invokePrim(double arg0, long arg1, long arg2);}DLLD194,12886
static public interface DLLD{double invokePrim(double arg0, long arg1, long arg2);}invokePrim194,12886
static public interface DLDO{Object invokePrim(double arg0, long arg1, double arg2);}DLDO195,12970
static public interface DLDO{Object invokePrim(double arg0, long arg1, double arg2);}invokePrim195,12970
static public interface DLDL{long invokePrim(double arg0, long arg1, double arg2);}DLDL196,13056
static public interface DLDL{long invokePrim(double arg0, long arg1, double arg2);}invokePrim196,13056
static public interface DLDD{double invokePrim(double arg0, long arg1, double arg2);}DLDD197,13140
static public interface DLDD{double invokePrim(double arg0, long arg1, double arg2);}invokePrim197,13140
static public interface DDOO{Object invokePrim(double arg0, double arg1, Object arg2);}DDOO198,13226
static public interface DDOO{Object invokePrim(double arg0, double arg1, Object arg2);}invokePrim198,13226
static public interface DDOL{long invokePrim(double arg0, double arg1, Object arg2);}DDOL199,13314
static public interface DDOL{long invokePrim(double arg0, double arg1, Object arg2);}invokePrim199,13314
static public interface DDOD{double invokePrim(double arg0, double arg1, Object arg2);}DDOD200,13400
static public interface DDOD{double invokePrim(double arg0, double arg1, Object arg2);}invokePrim200,13400
static public interface DDLO{Object invokePrim(double arg0, double arg1, long arg2);}DDLO201,13488
static public interface DDLO{Object invokePrim(double arg0, double arg1, long arg2);}invokePrim201,13488
static public interface DDLL{long invokePrim(double arg0, double arg1, long arg2);}DDLL202,13574
static public interface DDLL{long invokePrim(double arg0, double arg1, long arg2);}invokePrim202,13574
static public interface DDLD{double invokePrim(double arg0, double arg1, long arg2);}DDLD203,13658
static public interface DDLD{double invokePrim(double arg0, double arg1, long arg2);}invokePrim203,13658
static public interface DDDO{Object invokePrim(double arg0, double arg1, double arg2);}DDDO204,13744
static public interface DDDO{Object invokePrim(double arg0, double arg1, double arg2);}invokePrim204,13744
static public interface DDDL{long invokePrim(double arg0, double arg1, double arg2);}DDDL205,13832
static public interface DDDL{long invokePrim(double arg0, double arg1, double arg2);}invokePrim205,13832
static public interface DDDD{double invokePrim(double arg0, double arg1, double arg2);}DDDD206,13918
static public interface DDDD{double invokePrim(double arg0, double arg1, double arg2);}invokePrim206,13918
static public interface OOOOL{long invokePrim(Object arg0, Object arg1, Object arg2, Object arg3);}OOOOL207,14006
static public interface OOOOL{long invokePrim(Object arg0, Object arg1, Object arg2, Object arg3);}invokePrim207,14006
static public interface OOOOD{double invokePrim(Object arg0, Object arg1, Object arg2, Object arg3);}OOOOD208,14106
static public interface OOOOD{double invokePrim(Object arg0, Object arg1, Object arg2, Object arg3);}invokePrim208,14106
static public interface OOOLO{Object invokePrim(Object arg0, Object arg1, Object arg2, long arg3);}OOOLO209,14208
static public interface OOOLO{Object invokePrim(Object arg0, Object arg1, Object arg2, long arg3);}invokePrim209,14208
static public interface OOOLL{long invokePrim(Object arg0, Object arg1, Object arg2, long arg3);}OOOLL210,14308
static public interface OOOLL{long invokePrim(Object arg0, Object arg1, Object arg2, long arg3);}invokePrim210,14308
static public interface OOOLD{double invokePrim(Object arg0, Object arg1, Object arg2, long arg3);}OOOLD211,14406
static public interface OOOLD{double invokePrim(Object arg0, Object arg1, Object arg2, long arg3);}invokePrim211,14406
static public interface OOODO{Object invokePrim(Object arg0, Object arg1, Object arg2, double arg3);}OOODO212,14506
static public interface OOODO{Object invokePrim(Object arg0, Object arg1, Object arg2, double arg3);}invokePrim212,14506
static public interface OOODL{long invokePrim(Object arg0, Object arg1, Object arg2, double arg3);}OOODL213,14608
static public interface OOODL{long invokePrim(Object arg0, Object arg1, Object arg2, double arg3);}invokePrim213,14608
static public interface OOODD{double invokePrim(Object arg0, Object arg1, Object arg2, double arg3);}OOODD214,14708
static public interface OOODD{double invokePrim(Object arg0, Object arg1, Object arg2, double arg3);}invokePrim214,14708
static public interface OOLOO{Object invokePrim(Object arg0, Object arg1, long arg2, Object arg3);}OOLOO215,14810
static public interface OOLOO{Object invokePrim(Object arg0, Object arg1, long arg2, Object arg3);}invokePrim215,14810
static public interface OOLOL{long invokePrim(Object arg0, Object arg1, long arg2, Object arg3);}OOLOL216,14910
static public interface OOLOL{long invokePrim(Object arg0, Object arg1, long arg2, Object arg3);}invokePrim216,14910
static public interface OOLOD{double invokePrim(Object arg0, Object arg1, long arg2, Object arg3);}OOLOD217,15008
static public interface OOLOD{double invokePrim(Object arg0, Object arg1, long arg2, Object arg3);}invokePrim217,15008
static public interface OOLLO{Object invokePrim(Object arg0, Object arg1, long arg2, long arg3);}OOLLO218,15108
static public interface OOLLO{Object invokePrim(Object arg0, Object arg1, long arg2, long arg3);}invokePrim218,15108
static public interface OOLLL{long invokePrim(Object arg0, Object arg1, long arg2, long arg3);}OOLLL219,15206
static public interface OOLLL{long invokePrim(Object arg0, Object arg1, long arg2, long arg3);}invokePrim219,15206
static public interface OOLLD{double invokePrim(Object arg0, Object arg1, long arg2, long arg3);}OOLLD220,15302
static public interface OOLLD{double invokePrim(Object arg0, Object arg1, long arg2, long arg3);}invokePrim220,15302
static public interface OOLDO{Object invokePrim(Object arg0, Object arg1, long arg2, double arg3);}OOLDO221,15400
static public interface OOLDO{Object invokePrim(Object arg0, Object arg1, long arg2, double arg3);}invokePrim221,15400
static public interface OOLDL{long invokePrim(Object arg0, Object arg1, long arg2, double arg3);}OOLDL222,15500
static public interface OOLDL{long invokePrim(Object arg0, Object arg1, long arg2, double arg3);}invokePrim222,15500
static public interface OOLDD{double invokePrim(Object arg0, Object arg1, long arg2, double arg3);}OOLDD223,15598
static public interface OOLDD{double invokePrim(Object arg0, Object arg1, long arg2, double arg3);}invokePrim223,15598
static public interface OODOO{Object invokePrim(Object arg0, Object arg1, double arg2, Object arg3);}OODOO224,15698
static public interface OODOO{Object invokePrim(Object arg0, Object arg1, double arg2, Object arg3);}invokePrim224,15698
static public interface OODOL{long invokePrim(Object arg0, Object arg1, double arg2, Object arg3);}OODOL225,15800
static public interface OODOL{long invokePrim(Object arg0, Object arg1, double arg2, Object arg3);}invokePrim225,15800
static public interface OODOD{double invokePrim(Object arg0, Object arg1, double arg2, Object arg3);}OODOD226,15900
static public interface OODOD{double invokePrim(Object arg0, Object arg1, double arg2, Object arg3);}invokePrim226,15900
static public interface OODLO{Object invokePrim(Object arg0, Object arg1, double arg2, long arg3);}OODLO227,16002
static public interface OODLO{Object invokePrim(Object arg0, Object arg1, double arg2, long arg3);}invokePrim227,16002
static public interface OODLL{long invokePrim(Object arg0, Object arg1, double arg2, long arg3);}OODLL228,16102
static public interface OODLL{long invokePrim(Object arg0, Object arg1, double arg2, long arg3);}invokePrim228,16102
static public interface OODLD{double invokePrim(Object arg0, Object arg1, double arg2, long arg3);}OODLD229,16200
static public interface OODLD{double invokePrim(Object arg0, Object arg1, double arg2, long arg3);}invokePrim229,16200
static public interface OODDO{Object invokePrim(Object arg0, Object arg1, double arg2, double arg3);}OODDO230,16300
static public interface OODDO{Object invokePrim(Object arg0, Object arg1, double arg2, double arg3);}invokePrim230,16300
static public interface OODDL{long invokePrim(Object arg0, Object arg1, double arg2, double arg3);}OODDL231,16402
static public interface OODDL{long invokePrim(Object arg0, Object arg1, double arg2, double arg3);}invokePrim231,16402
static public interface OODDD{double invokePrim(Object arg0, Object arg1, double arg2, double arg3);}OODDD232,16502
static public interface OODDD{double invokePrim(Object arg0, Object arg1, double arg2, double arg3);}invokePrim232,16502
static public interface OLOOO{Object invokePrim(Object arg0, long arg1, Object arg2, Object arg3);}OLOOO233,16604
static public interface OLOOO{Object invokePrim(Object arg0, long arg1, Object arg2, Object arg3);}invokePrim233,16604
static public interface OLOOL{long invokePrim(Object arg0, long arg1, Object arg2, Object arg3);}OLOOL234,16704
static public interface OLOOL{long invokePrim(Object arg0, long arg1, Object arg2, Object arg3);}invokePrim234,16704
static public interface OLOOD{double invokePrim(Object arg0, long arg1, Object arg2, Object arg3);}OLOOD235,16802
static public interface OLOOD{double invokePrim(Object arg0, long arg1, Object arg2, Object arg3);}invokePrim235,16802
static public interface OLOLO{Object invokePrim(Object arg0, long arg1, Object arg2, long arg3);}OLOLO236,16902
static public interface OLOLO{Object invokePrim(Object arg0, long arg1, Object arg2, long arg3);}invokePrim236,16902
static public interface OLOLL{long invokePrim(Object arg0, long arg1, Object arg2, long arg3);}OLOLL237,17000
static public interface OLOLL{long invokePrim(Object arg0, long arg1, Object arg2, long arg3);}invokePrim237,17000
static public interface OLOLD{double invokePrim(Object arg0, long arg1, Object arg2, long arg3);}OLOLD238,17096
static public interface OLOLD{double invokePrim(Object arg0, long arg1, Object arg2, long arg3);}invokePrim238,17096
static public interface OLODO{Object invokePrim(Object arg0, long arg1, Object arg2, double arg3);}OLODO239,17194
static public interface OLODO{Object invokePrim(Object arg0, long arg1, Object arg2, double arg3);}invokePrim239,17194
static public interface OLODL{long invokePrim(Object arg0, long arg1, Object arg2, double arg3);}OLODL240,17294
static public interface OLODL{long invokePrim(Object arg0, long arg1, Object arg2, double arg3);}invokePrim240,17294
static public interface OLODD{double invokePrim(Object arg0, long arg1, Object arg2, double arg3);}OLODD241,17392
static public interface OLODD{double invokePrim(Object arg0, long arg1, Object arg2, double arg3);}invokePrim241,17392
static public interface OLLOO{Object invokePrim(Object arg0, long arg1, long arg2, Object arg3);}OLLOO242,17492
static public interface OLLOO{Object invokePrim(Object arg0, long arg1, long arg2, Object arg3);}invokePrim242,17492
static public interface OLLOL{long invokePrim(Object arg0, long arg1, long arg2, Object arg3);}OLLOL243,17590
static public interface OLLOL{long invokePrim(Object arg0, long arg1, long arg2, Object arg3);}invokePrim243,17590
static public interface OLLOD{double invokePrim(Object arg0, long arg1, long arg2, Object arg3);}OLLOD244,17686
static public interface OLLOD{double invokePrim(Object arg0, long arg1, long arg2, Object arg3);}invokePrim244,17686
static public interface OLLLO{Object invokePrim(Object arg0, long arg1, long arg2, long arg3);}OLLLO245,17784
static public interface OLLLO{Object invokePrim(Object arg0, long arg1, long arg2, long arg3);}invokePrim245,17784
static public interface OLLLL{long invokePrim(Object arg0, long arg1, long arg2, long arg3);}OLLLL246,17880
static public interface OLLLL{long invokePrim(Object arg0, long arg1, long arg2, long arg3);}invokePrim246,17880
static public interface OLLLD{double invokePrim(Object arg0, long arg1, long arg2, long arg3);}OLLLD247,17974
static public interface OLLLD{double invokePrim(Object arg0, long arg1, long arg2, long arg3);}invokePrim247,17974
static public interface OLLDO{Object invokePrim(Object arg0, long arg1, long arg2, double arg3);}OLLDO248,18070
static public interface OLLDO{Object invokePrim(Object arg0, long arg1, long arg2, double arg3);}invokePrim248,18070
static public interface OLLDL{long invokePrim(Object arg0, long arg1, long arg2, double arg3);}OLLDL249,18168
static public interface OLLDL{long invokePrim(Object arg0, long arg1, long arg2, double arg3);}invokePrim249,18168
static public interface OLLDD{double invokePrim(Object arg0, long arg1, long arg2, double arg3);}OLLDD250,18264
static public interface OLLDD{double invokePrim(Object arg0, long arg1, long arg2, double arg3);}invokePrim250,18264
static public interface OLDOO{Object invokePrim(Object arg0, long arg1, double arg2, Object arg3);}OLDOO251,18362
static public interface OLDOO{Object invokePrim(Object arg0, long arg1, double arg2, Object arg3);}invokePrim251,18362
static public interface OLDOL{long invokePrim(Object arg0, long arg1, double arg2, Object arg3);}OLDOL252,18462
static public interface OLDOL{long invokePrim(Object arg0, long arg1, double arg2, Object arg3);}invokePrim252,18462
static public interface OLDOD{double invokePrim(Object arg0, long arg1, double arg2, Object arg3);}OLDOD253,18560
static public interface OLDOD{double invokePrim(Object arg0, long arg1, double arg2, Object arg3);}invokePrim253,18560
static public interface OLDLO{Object invokePrim(Object arg0, long arg1, double arg2, long arg3);}OLDLO254,18660
static public interface OLDLO{Object invokePrim(Object arg0, long arg1, double arg2, long arg3);}invokePrim254,18660
static public interface OLDLL{long invokePrim(Object arg0, long arg1, double arg2, long arg3);}OLDLL255,18758
static public interface OLDLL{long invokePrim(Object arg0, long arg1, double arg2, long arg3);}invokePrim255,18758
static public interface OLDLD{double invokePrim(Object arg0, long arg1, double arg2, long arg3);}OLDLD256,18854
static public interface OLDLD{double invokePrim(Object arg0, long arg1, double arg2, long arg3);}invokePrim256,18854
static public interface OLDDO{Object invokePrim(Object arg0, long arg1, double arg2, double arg3);}OLDDO257,18952
static public interface OLDDO{Object invokePrim(Object arg0, long arg1, double arg2, double arg3);}invokePrim257,18952
static public interface OLDDL{long invokePrim(Object arg0, long arg1, double arg2, double arg3);}OLDDL258,19052
static public interface OLDDL{long invokePrim(Object arg0, long arg1, double arg2, double arg3);}invokePrim258,19052
static public interface OLDDD{double invokePrim(Object arg0, long arg1, double arg2, double arg3);}OLDDD259,19150
static public interface OLDDD{double invokePrim(Object arg0, long arg1, double arg2, double arg3);}invokePrim259,19150
static public interface ODOOO{Object invokePrim(Object arg0, double arg1, Object arg2, Object arg3);}ODOOO260,19250
static public interface ODOOO{Object invokePrim(Object arg0, double arg1, Object arg2, Object arg3);}invokePrim260,19250
static public interface ODOOL{long invokePrim(Object arg0, double arg1, Object arg2, Object arg3);}ODOOL261,19352
static public interface ODOOL{long invokePrim(Object arg0, double arg1, Object arg2, Object arg3);}invokePrim261,19352
static public interface ODOOD{double invokePrim(Object arg0, double arg1, Object arg2, Object arg3);}ODOOD262,19452
static public interface ODOOD{double invokePrim(Object arg0, double arg1, Object arg2, Object arg3);}invokePrim262,19452
static public interface ODOLO{Object invokePrim(Object arg0, double arg1, Object arg2, long arg3);}ODOLO263,19554
static public interface ODOLO{Object invokePrim(Object arg0, double arg1, Object arg2, long arg3);}invokePrim263,19554
static public interface ODOLL{long invokePrim(Object arg0, double arg1, Object arg2, long arg3);}ODOLL264,19654
static public interface ODOLL{long invokePrim(Object arg0, double arg1, Object arg2, long arg3);}invokePrim264,19654
static public interface ODOLD{double invokePrim(Object arg0, double arg1, Object arg2, long arg3);}ODOLD265,19752
static public interface ODOLD{double invokePrim(Object arg0, double arg1, Object arg2, long arg3);}invokePrim265,19752
static public interface ODODO{Object invokePrim(Object arg0, double arg1, Object arg2, double arg3);}ODODO266,19852
static public interface ODODO{Object invokePrim(Object arg0, double arg1, Object arg2, double arg3);}invokePrim266,19852
static public interface ODODL{long invokePrim(Object arg0, double arg1, Object arg2, double arg3);}ODODL267,19954
static public interface ODODL{long invokePrim(Object arg0, double arg1, Object arg2, double arg3);}invokePrim267,19954
static public interface ODODD{double invokePrim(Object arg0, double arg1, Object arg2, double arg3);}ODODD268,20054
static public interface ODODD{double invokePrim(Object arg0, double arg1, Object arg2, double arg3);}invokePrim268,20054
static public interface ODLOO{Object invokePrim(Object arg0, double arg1, long arg2, Object arg3);}ODLOO269,20156
static public interface ODLOO{Object invokePrim(Object arg0, double arg1, long arg2, Object arg3);}invokePrim269,20156
static public interface ODLOL{long invokePrim(Object arg0, double arg1, long arg2, Object arg3);}ODLOL270,20256
static public interface ODLOL{long invokePrim(Object arg0, double arg1, long arg2, Object arg3);}invokePrim270,20256
static public interface ODLOD{double invokePrim(Object arg0, double arg1, long arg2, Object arg3);}ODLOD271,20354
static public interface ODLOD{double invokePrim(Object arg0, double arg1, long arg2, Object arg3);}invokePrim271,20354
static public interface ODLLO{Object invokePrim(Object arg0, double arg1, long arg2, long arg3);}ODLLO272,20454
static public interface ODLLO{Object invokePrim(Object arg0, double arg1, long arg2, long arg3);}invokePrim272,20454
static public interface ODLLL{long invokePrim(Object arg0, double arg1, long arg2, long arg3);}ODLLL273,20552
static public interface ODLLL{long invokePrim(Object arg0, double arg1, long arg2, long arg3);}invokePrim273,20552
static public interface ODLLD{double invokePrim(Object arg0, double arg1, long arg2, long arg3);}ODLLD274,20648
static public interface ODLLD{double invokePrim(Object arg0, double arg1, long arg2, long arg3);}invokePrim274,20648
static public interface ODLDO{Object invokePrim(Object arg0, double arg1, long arg2, double arg3);}ODLDO275,20746
static public interface ODLDO{Object invokePrim(Object arg0, double arg1, long arg2, double arg3);}invokePrim275,20746
static public interface ODLDL{long invokePrim(Object arg0, double arg1, long arg2, double arg3);}ODLDL276,20846
static public interface ODLDL{long invokePrim(Object arg0, double arg1, long arg2, double arg3);}invokePrim276,20846
static public interface ODLDD{double invokePrim(Object arg0, double arg1, long arg2, double arg3);}ODLDD277,20944
static public interface ODLDD{double invokePrim(Object arg0, double arg1, long arg2, double arg3);}invokePrim277,20944
static public interface ODDOO{Object invokePrim(Object arg0, double arg1, double arg2, Object arg3);}ODDOO278,21044
static public interface ODDOO{Object invokePrim(Object arg0, double arg1, double arg2, Object arg3);}invokePrim278,21044
static public interface ODDOL{long invokePrim(Object arg0, double arg1, double arg2, Object arg3);}ODDOL279,21146
static public interface ODDOL{long invokePrim(Object arg0, double arg1, double arg2, Object arg3);}invokePrim279,21146
static public interface ODDOD{double invokePrim(Object arg0, double arg1, double arg2, Object arg3);}ODDOD280,21246
static public interface ODDOD{double invokePrim(Object arg0, double arg1, double arg2, Object arg3);}invokePrim280,21246
static public interface ODDLO{Object invokePrim(Object arg0, double arg1, double arg2, long arg3);}ODDLO281,21348
static public interface ODDLO{Object invokePrim(Object arg0, double arg1, double arg2, long arg3);}invokePrim281,21348
static public interface ODDLL{long invokePrim(Object arg0, double arg1, double arg2, long arg3);}ODDLL282,21448
static public interface ODDLL{long invokePrim(Object arg0, double arg1, double arg2, long arg3);}invokePrim282,21448
static public interface ODDLD{double invokePrim(Object arg0, double arg1, double arg2, long arg3);}ODDLD283,21546
static public interface ODDLD{double invokePrim(Object arg0, double arg1, double arg2, long arg3);}invokePrim283,21546
static public interface ODDDO{Object invokePrim(Object arg0, double arg1, double arg2, double arg3);}ODDDO284,21646
static public interface ODDDO{Object invokePrim(Object arg0, double arg1, double arg2, double arg3);}invokePrim284,21646
static public interface ODDDL{long invokePrim(Object arg0, double arg1, double arg2, double arg3);}ODDDL285,21748
static public interface ODDDL{long invokePrim(Object arg0, double arg1, double arg2, double arg3);}invokePrim285,21748
static public interface ODDDD{double invokePrim(Object arg0, double arg1, double arg2, double arg3);}ODDDD286,21848
static public interface ODDDD{double invokePrim(Object arg0, double arg1, double arg2, double arg3);}invokePrim286,21848
static public interface LOOOO{Object invokePrim(long arg0, Object arg1, Object arg2, Object arg3);}LOOOO287,21950
static public interface LOOOO{Object invokePrim(long arg0, Object arg1, Object arg2, Object arg3);}invokePrim287,21950
static public interface LOOOL{long invokePrim(long arg0, Object arg1, Object arg2, Object arg3);}LOOOL288,22050
static public interface LOOOL{long invokePrim(long arg0, Object arg1, Object arg2, Object arg3);}invokePrim288,22050
static public interface LOOOD{double invokePrim(long arg0, Object arg1, Object arg2, Object arg3);}LOOOD289,22148
static public interface LOOOD{double invokePrim(long arg0, Object arg1, Object arg2, Object arg3);}invokePrim289,22148
static public interface LOOLO{Object invokePrim(long arg0, Object arg1, Object arg2, long arg3);}LOOLO290,22248
static public interface LOOLO{Object invokePrim(long arg0, Object arg1, Object arg2, long arg3);}invokePrim290,22248
static public interface LOOLL{long invokePrim(long arg0, Object arg1, Object arg2, long arg3);}LOOLL291,22346
static public interface LOOLL{long invokePrim(long arg0, Object arg1, Object arg2, long arg3);}invokePrim291,22346
static public interface LOOLD{double invokePrim(long arg0, Object arg1, Object arg2, long arg3);}LOOLD292,22442
static public interface LOOLD{double invokePrim(long arg0, Object arg1, Object arg2, long arg3);}invokePrim292,22442
static public interface LOODO{Object invokePrim(long arg0, Object arg1, Object arg2, double arg3);}LOODO293,22540
static public interface LOODO{Object invokePrim(long arg0, Object arg1, Object arg2, double arg3);}invokePrim293,22540
static public interface LOODL{long invokePrim(long arg0, Object arg1, Object arg2, double arg3);}LOODL294,22640
static public interface LOODL{long invokePrim(long arg0, Object arg1, Object arg2, double arg3);}invokePrim294,22640
static public interface LOODD{double invokePrim(long arg0, Object arg1, Object arg2, double arg3);}LOODD295,22738
static public interface LOODD{double invokePrim(long arg0, Object arg1, Object arg2, double arg3);}invokePrim295,22738
static public interface LOLOO{Object invokePrim(long arg0, Object arg1, long arg2, Object arg3);}LOLOO296,22838
static public interface LOLOO{Object invokePrim(long arg0, Object arg1, long arg2, Object arg3);}invokePrim296,22838
static public interface LOLOL{long invokePrim(long arg0, Object arg1, long arg2, Object arg3);}LOLOL297,22936
static public interface LOLOL{long invokePrim(long arg0, Object arg1, long arg2, Object arg3);}invokePrim297,22936
static public interface LOLOD{double invokePrim(long arg0, Object arg1, long arg2, Object arg3);}LOLOD298,23032
static public interface LOLOD{double invokePrim(long arg0, Object arg1, long arg2, Object arg3);}invokePrim298,23032
static public interface LOLLO{Object invokePrim(long arg0, Object arg1, long arg2, long arg3);}LOLLO299,23130
static public interface LOLLO{Object invokePrim(long arg0, Object arg1, long arg2, long arg3);}invokePrim299,23130
static public interface LOLLL{long invokePrim(long arg0, Object arg1, long arg2, long arg3);}LOLLL300,23226
static public interface LOLLL{long invokePrim(long arg0, Object arg1, long arg2, long arg3);}invokePrim300,23226
static public interface LOLLD{double invokePrim(long arg0, Object arg1, long arg2, long arg3);}LOLLD301,23320
static public interface LOLLD{double invokePrim(long arg0, Object arg1, long arg2, long arg3);}invokePrim301,23320
static public interface LOLDO{Object invokePrim(long arg0, Object arg1, long arg2, double arg3);}LOLDO302,23416
static public interface LOLDO{Object invokePrim(long arg0, Object arg1, long arg2, double arg3);}invokePrim302,23416
static public interface LOLDL{long invokePrim(long arg0, Object arg1, long arg2, double arg3);}LOLDL303,23514
static public interface LOLDL{long invokePrim(long arg0, Object arg1, long arg2, double arg3);}invokePrim303,23514
static public interface LOLDD{double invokePrim(long arg0, Object arg1, long arg2, double arg3);}LOLDD304,23610
static public interface LOLDD{double invokePrim(long arg0, Object arg1, long arg2, double arg3);}invokePrim304,23610
static public interface LODOO{Object invokePrim(long arg0, Object arg1, double arg2, Object arg3);}LODOO305,23708
static public interface LODOO{Object invokePrim(long arg0, Object arg1, double arg2, Object arg3);}invokePrim305,23708
static public interface LODOL{long invokePrim(long arg0, Object arg1, double arg2, Object arg3);}LODOL306,23808
static public interface LODOL{long invokePrim(long arg0, Object arg1, double arg2, Object arg3);}invokePrim306,23808
static public interface LODOD{double invokePrim(long arg0, Object arg1, double arg2, Object arg3);}LODOD307,23906
static public interface LODOD{double invokePrim(long arg0, Object arg1, double arg2, Object arg3);}invokePrim307,23906
static public interface LODLO{Object invokePrim(long arg0, Object arg1, double arg2, long arg3);}LODLO308,24006
static public interface LODLO{Object invokePrim(long arg0, Object arg1, double arg2, long arg3);}invokePrim308,24006
static public interface LODLL{long invokePrim(long arg0, Object arg1, double arg2, long arg3);}LODLL309,24104
static public interface LODLL{long invokePrim(long arg0, Object arg1, double arg2, long arg3);}invokePrim309,24104
static public interface LODLD{double invokePrim(long arg0, Object arg1, double arg2, long arg3);}LODLD310,24200
static public interface LODLD{double invokePrim(long arg0, Object arg1, double arg2, long arg3);}invokePrim310,24200
static public interface LODDO{Object invokePrim(long arg0, Object arg1, double arg2, double arg3);}LODDO311,24298
static public interface LODDO{Object invokePrim(long arg0, Object arg1, double arg2, double arg3);}invokePrim311,24298
static public interface LODDL{long invokePrim(long arg0, Object arg1, double arg2, double arg3);}LODDL312,24398
static public interface LODDL{long invokePrim(long arg0, Object arg1, double arg2, double arg3);}invokePrim312,24398
static public interface LODDD{double invokePrim(long arg0, Object arg1, double arg2, double arg3);}LODDD313,24496
static public interface LODDD{double invokePrim(long arg0, Object arg1, double arg2, double arg3);}invokePrim313,24496
static public interface LLOOO{Object invokePrim(long arg0, long arg1, Object arg2, Object arg3);}LLOOO314,24596
static public interface LLOOO{Object invokePrim(long arg0, long arg1, Object arg2, Object arg3);}invokePrim314,24596
static public interface LLOOL{long invokePrim(long arg0, long arg1, Object arg2, Object arg3);}LLOOL315,24694
static public interface LLOOL{long invokePrim(long arg0, long arg1, Object arg2, Object arg3);}invokePrim315,24694
static public interface LLOOD{double invokePrim(long arg0, long arg1, Object arg2, Object arg3);}LLOOD316,24790
static public interface LLOOD{double invokePrim(long arg0, long arg1, Object arg2, Object arg3);}invokePrim316,24790
static public interface LLOLO{Object invokePrim(long arg0, long arg1, Object arg2, long arg3);}LLOLO317,24888
static public interface LLOLO{Object invokePrim(long arg0, long arg1, Object arg2, long arg3);}invokePrim317,24888
static public interface LLOLL{long invokePrim(long arg0, long arg1, Object arg2, long arg3);}LLOLL318,24984
static public interface LLOLL{long invokePrim(long arg0, long arg1, Object arg2, long arg3);}invokePrim318,24984
static public interface LLOLD{double invokePrim(long arg0, long arg1, Object arg2, long arg3);}LLOLD319,25078
static public interface LLOLD{double invokePrim(long arg0, long arg1, Object arg2, long arg3);}invokePrim319,25078
static public interface LLODO{Object invokePrim(long arg0, long arg1, Object arg2, double arg3);}LLODO320,25174
static public interface LLODO{Object invokePrim(long arg0, long arg1, Object arg2, double arg3);}invokePrim320,25174
static public interface LLODL{long invokePrim(long arg0, long arg1, Object arg2, double arg3);}LLODL321,25272
static public interface LLODL{long invokePrim(long arg0, long arg1, Object arg2, double arg3);}invokePrim321,25272
static public interface LLODD{double invokePrim(long arg0, long arg1, Object arg2, double arg3);}LLODD322,25368
static public interface LLODD{double invokePrim(long arg0, long arg1, Object arg2, double arg3);}invokePrim322,25368
static public interface LLLOO{Object invokePrim(long arg0, long arg1, long arg2, Object arg3);}LLLOO323,25466
static public interface LLLOO{Object invokePrim(long arg0, long arg1, long arg2, Object arg3);}invokePrim323,25466
static public interface LLLOL{long invokePrim(long arg0, long arg1, long arg2, Object arg3);}LLLOL324,25562
static public interface LLLOL{long invokePrim(long arg0, long arg1, long arg2, Object arg3);}invokePrim324,25562
static public interface LLLOD{double invokePrim(long arg0, long arg1, long arg2, Object arg3);}LLLOD325,25656
static public interface LLLOD{double invokePrim(long arg0, long arg1, long arg2, Object arg3);}invokePrim325,25656
static public interface LLLLO{Object invokePrim(long arg0, long arg1, long arg2, long arg3);}LLLLO326,25752
static public interface LLLLO{Object invokePrim(long arg0, long arg1, long arg2, long arg3);}invokePrim326,25752
static public interface LLLLL{long invokePrim(long arg0, long arg1, long arg2, long arg3);}LLLLL327,25846
static public interface LLLLL{long invokePrim(long arg0, long arg1, long arg2, long arg3);}invokePrim327,25846
static public interface LLLLD{double invokePrim(long arg0, long arg1, long arg2, long arg3);}LLLLD328,25938
static public interface LLLLD{double invokePrim(long arg0, long arg1, long arg2, long arg3);}invokePrim328,25938
static public interface LLLDO{Object invokePrim(long arg0, long arg1, long arg2, double arg3);}LLLDO329,26032
static public interface LLLDO{Object invokePrim(long arg0, long arg1, long arg2, double arg3);}invokePrim329,26032
static public interface LLLDL{long invokePrim(long arg0, long arg1, long arg2, double arg3);}LLLDL330,26128
static public interface LLLDL{long invokePrim(long arg0, long arg1, long arg2, double arg3);}invokePrim330,26128
static public interface LLLDD{double invokePrim(long arg0, long arg1, long arg2, double arg3);}LLLDD331,26222
static public interface LLLDD{double invokePrim(long arg0, long arg1, long arg2, double arg3);}invokePrim331,26222
static public interface LLDOO{Object invokePrim(long arg0, long arg1, double arg2, Object arg3);}LLDOO332,26318
static public interface LLDOO{Object invokePrim(long arg0, long arg1, double arg2, Object arg3);}invokePrim332,26318
static public interface LLDOL{long invokePrim(long arg0, long arg1, double arg2, Object arg3);}LLDOL333,26416
static public interface LLDOL{long invokePrim(long arg0, long arg1, double arg2, Object arg3);}invokePrim333,26416
static public interface LLDOD{double invokePrim(long arg0, long arg1, double arg2, Object arg3);}LLDOD334,26512
static public interface LLDOD{double invokePrim(long arg0, long arg1, double arg2, Object arg3);}invokePrim334,26512
static public interface LLDLO{Object invokePrim(long arg0, long arg1, double arg2, long arg3);}LLDLO335,26610
static public interface LLDLO{Object invokePrim(long arg0, long arg1, double arg2, long arg3);}invokePrim335,26610
static public interface LLDLL{long invokePrim(long arg0, long arg1, double arg2, long arg3);}LLDLL336,26706
static public interface LLDLL{long invokePrim(long arg0, long arg1, double arg2, long arg3);}invokePrim336,26706
static public interface LLDLD{double invokePrim(long arg0, long arg1, double arg2, long arg3);}LLDLD337,26800
static public interface LLDLD{double invokePrim(long arg0, long arg1, double arg2, long arg3);}invokePrim337,26800
static public interface LLDDO{Object invokePrim(long arg0, long arg1, double arg2, double arg3);}LLDDO338,26896
static public interface LLDDO{Object invokePrim(long arg0, long arg1, double arg2, double arg3);}invokePrim338,26896
static public interface LLDDL{long invokePrim(long arg0, long arg1, double arg2, double arg3);}LLDDL339,26994
static public interface LLDDL{long invokePrim(long arg0, long arg1, double arg2, double arg3);}invokePrim339,26994
static public interface LLDDD{double invokePrim(long arg0, long arg1, double arg2, double arg3);}LLDDD340,27090
static public interface LLDDD{double invokePrim(long arg0, long arg1, double arg2, double arg3);}invokePrim340,27090
static public interface LDOOO{Object invokePrim(long arg0, double arg1, Object arg2, Object arg3);}LDOOO341,27188
static public interface LDOOO{Object invokePrim(long arg0, double arg1, Object arg2, Object arg3);}invokePrim341,27188
static public interface LDOOL{long invokePrim(long arg0, double arg1, Object arg2, Object arg3);}LDOOL342,27288
static public interface LDOOL{long invokePrim(long arg0, double arg1, Object arg2, Object arg3);}invokePrim342,27288
static public interface LDOOD{double invokePrim(long arg0, double arg1, Object arg2, Object arg3);}LDOOD343,27386
static public interface LDOOD{double invokePrim(long arg0, double arg1, Object arg2, Object arg3);}invokePrim343,27386
static public interface LDOLO{Object invokePrim(long arg0, double arg1, Object arg2, long arg3);}LDOLO344,27486
static public interface LDOLO{Object invokePrim(long arg0, double arg1, Object arg2, long arg3);}invokePrim344,27486
static public interface LDOLL{long invokePrim(long arg0, double arg1, Object arg2, long arg3);}LDOLL345,27584
static public interface LDOLL{long invokePrim(long arg0, double arg1, Object arg2, long arg3);}invokePrim345,27584
static public interface LDOLD{double invokePrim(long arg0, double arg1, Object arg2, long arg3);}LDOLD346,27680
static public interface LDOLD{double invokePrim(long arg0, double arg1, Object arg2, long arg3);}invokePrim346,27680
static public interface LDODO{Object invokePrim(long arg0, double arg1, Object arg2, double arg3);}LDODO347,27778
static public interface LDODO{Object invokePrim(long arg0, double arg1, Object arg2, double arg3);}invokePrim347,27778
static public interface LDODL{long invokePrim(long arg0, double arg1, Object arg2, double arg3);}LDODL348,27878
static public interface LDODL{long invokePrim(long arg0, double arg1, Object arg2, double arg3);}invokePrim348,27878
static public interface LDODD{double invokePrim(long arg0, double arg1, Object arg2, double arg3);}LDODD349,27976
static public interface LDODD{double invokePrim(long arg0, double arg1, Object arg2, double arg3);}invokePrim349,27976
static public interface LDLOO{Object invokePrim(long arg0, double arg1, long arg2, Object arg3);}LDLOO350,28076
static public interface LDLOO{Object invokePrim(long arg0, double arg1, long arg2, Object arg3);}invokePrim350,28076
static public interface LDLOL{long invokePrim(long arg0, double arg1, long arg2, Object arg3);}LDLOL351,28174
static public interface LDLOL{long invokePrim(long arg0, double arg1, long arg2, Object arg3);}invokePrim351,28174
static public interface LDLOD{double invokePrim(long arg0, double arg1, long arg2, Object arg3);}LDLOD352,28270
static public interface LDLOD{double invokePrim(long arg0, double arg1, long arg2, Object arg3);}invokePrim352,28270
static public interface LDLLO{Object invokePrim(long arg0, double arg1, long arg2, long arg3);}LDLLO353,28368
static public interface LDLLO{Object invokePrim(long arg0, double arg1, long arg2, long arg3);}invokePrim353,28368
static public interface LDLLL{long invokePrim(long arg0, double arg1, long arg2, long arg3);}LDLLL354,28464
static public interface LDLLL{long invokePrim(long arg0, double arg1, long arg2, long arg3);}invokePrim354,28464
static public interface LDLLD{double invokePrim(long arg0, double arg1, long arg2, long arg3);}LDLLD355,28558
static public interface LDLLD{double invokePrim(long arg0, double arg1, long arg2, long arg3);}invokePrim355,28558
static public interface LDLDO{Object invokePrim(long arg0, double arg1, long arg2, double arg3);}LDLDO356,28654
static public interface LDLDO{Object invokePrim(long arg0, double arg1, long arg2, double arg3);}invokePrim356,28654
static public interface LDLDL{long invokePrim(long arg0, double arg1, long arg2, double arg3);}LDLDL357,28752
static public interface LDLDL{long invokePrim(long arg0, double arg1, long arg2, double arg3);}invokePrim357,28752
static public interface LDLDD{double invokePrim(long arg0, double arg1, long arg2, double arg3);}LDLDD358,28848
static public interface LDLDD{double invokePrim(long arg0, double arg1, long arg2, double arg3);}invokePrim358,28848
static public interface LDDOO{Object invokePrim(long arg0, double arg1, double arg2, Object arg3);}LDDOO359,28946
static public interface LDDOO{Object invokePrim(long arg0, double arg1, double arg2, Object arg3);}invokePrim359,28946
static public interface LDDOL{long invokePrim(long arg0, double arg1, double arg2, Object arg3);}LDDOL360,29046
static public interface LDDOL{long invokePrim(long arg0, double arg1, double arg2, Object arg3);}invokePrim360,29046
static public interface LDDOD{double invokePrim(long arg0, double arg1, double arg2, Object arg3);}LDDOD361,29144
static public interface LDDOD{double invokePrim(long arg0, double arg1, double arg2, Object arg3);}invokePrim361,29144
static public interface LDDLO{Object invokePrim(long arg0, double arg1, double arg2, long arg3);}LDDLO362,29244
static public interface LDDLO{Object invokePrim(long arg0, double arg1, double arg2, long arg3);}invokePrim362,29244
static public interface LDDLL{long invokePrim(long arg0, double arg1, double arg2, long arg3);}LDDLL363,29342
static public interface LDDLL{long invokePrim(long arg0, double arg1, double arg2, long arg3);}invokePrim363,29342
static public interface LDDLD{double invokePrim(long arg0, double arg1, double arg2, long arg3);}LDDLD364,29438
static public interface LDDLD{double invokePrim(long arg0, double arg1, double arg2, long arg3);}invokePrim364,29438
static public interface LDDDO{Object invokePrim(long arg0, double arg1, double arg2, double arg3);}LDDDO365,29536
static public interface LDDDO{Object invokePrim(long arg0, double arg1, double arg2, double arg3);}invokePrim365,29536
static public interface LDDDL{long invokePrim(long arg0, double arg1, double arg2, double arg3);}LDDDL366,29636
static public interface LDDDL{long invokePrim(long arg0, double arg1, double arg2, double arg3);}invokePrim366,29636
static public interface LDDDD{double invokePrim(long arg0, double arg1, double arg2, double arg3);}LDDDD367,29734
static public interface LDDDD{double invokePrim(long arg0, double arg1, double arg2, double arg3);}invokePrim367,29734
static public interface DOOOO{Object invokePrim(double arg0, Object arg1, Object arg2, Object arg3);}DOOOO368,29834
static public interface DOOOO{Object invokePrim(double arg0, Object arg1, Object arg2, Object arg3);}invokePrim368,29834
static public interface DOOOL{long invokePrim(double arg0, Object arg1, Object arg2, Object arg3);}DOOOL369,29936
static public interface DOOOL{long invokePrim(double arg0, Object arg1, Object arg2, Object arg3);}invokePrim369,29936
static public interface DOOOD{double invokePrim(double arg0, Object arg1, Object arg2, Object arg3);}DOOOD370,30036
static public interface DOOOD{double invokePrim(double arg0, Object arg1, Object arg2, Object arg3);}invokePrim370,30036
static public interface DOOLO{Object invokePrim(double arg0, Object arg1, Object arg2, long arg3);}DOOLO371,30138
static public interface DOOLO{Object invokePrim(double arg0, Object arg1, Object arg2, long arg3);}invokePrim371,30138
static public interface DOOLL{long invokePrim(double arg0, Object arg1, Object arg2, long arg3);}DOOLL372,30238
static public interface DOOLL{long invokePrim(double arg0, Object arg1, Object arg2, long arg3);}invokePrim372,30238
static public interface DOOLD{double invokePrim(double arg0, Object arg1, Object arg2, long arg3);}DOOLD373,30336
static public interface DOOLD{double invokePrim(double arg0, Object arg1, Object arg2, long arg3);}invokePrim373,30336
static public interface DOODO{Object invokePrim(double arg0, Object arg1, Object arg2, double arg3);}DOODO374,30436
static public interface DOODO{Object invokePrim(double arg0, Object arg1, Object arg2, double arg3);}invokePrim374,30436
static public interface DOODL{long invokePrim(double arg0, Object arg1, Object arg2, double arg3);}DOODL375,30538
static public interface DOODL{long invokePrim(double arg0, Object arg1, Object arg2, double arg3);}invokePrim375,30538
static public interface DOODD{double invokePrim(double arg0, Object arg1, Object arg2, double arg3);}DOODD376,30638
static public interface DOODD{double invokePrim(double arg0, Object arg1, Object arg2, double arg3);}invokePrim376,30638
static public interface DOLOO{Object invokePrim(double arg0, Object arg1, long arg2, Object arg3);}DOLOO377,30740
static public interface DOLOO{Object invokePrim(double arg0, Object arg1, long arg2, Object arg3);}invokePrim377,30740
static public interface DOLOL{long invokePrim(double arg0, Object arg1, long arg2, Object arg3);}DOLOL378,30840
static public interface DOLOL{long invokePrim(double arg0, Object arg1, long arg2, Object arg3);}invokePrim378,30840
static public interface DOLOD{double invokePrim(double arg0, Object arg1, long arg2, Object arg3);}DOLOD379,30938
static public interface DOLOD{double invokePrim(double arg0, Object arg1, long arg2, Object arg3);}invokePrim379,30938
static public interface DOLLO{Object invokePrim(double arg0, Object arg1, long arg2, long arg3);}DOLLO380,31038
static public interface DOLLO{Object invokePrim(double arg0, Object arg1, long arg2, long arg3);}invokePrim380,31038
static public interface DOLLL{long invokePrim(double arg0, Object arg1, long arg2, long arg3);}DOLLL381,31136
static public interface DOLLL{long invokePrim(double arg0, Object arg1, long arg2, long arg3);}invokePrim381,31136
static public interface DOLLD{double invokePrim(double arg0, Object arg1, long arg2, long arg3);}DOLLD382,31232
static public interface DOLLD{double invokePrim(double arg0, Object arg1, long arg2, long arg3);}invokePrim382,31232
static public interface DOLDO{Object invokePrim(double arg0, Object arg1, long arg2, double arg3);}DOLDO383,31330
static public interface DOLDO{Object invokePrim(double arg0, Object arg1, long arg2, double arg3);}invokePrim383,31330
static public interface DOLDL{long invokePrim(double arg0, Object arg1, long arg2, double arg3);}DOLDL384,31430
static public interface DOLDL{long invokePrim(double arg0, Object arg1, long arg2, double arg3);}invokePrim384,31430
static public interface DOLDD{double invokePrim(double arg0, Object arg1, long arg2, double arg3);}DOLDD385,31528
static public interface DOLDD{double invokePrim(double arg0, Object arg1, long arg2, double arg3);}invokePrim385,31528
static public interface DODOO{Object invokePrim(double arg0, Object arg1, double arg2, Object arg3);}DODOO386,31628
static public interface DODOO{Object invokePrim(double arg0, Object arg1, double arg2, Object arg3);}invokePrim386,31628
static public interface DODOL{long invokePrim(double arg0, Object arg1, double arg2, Object arg3);}DODOL387,31730
static public interface DODOL{long invokePrim(double arg0, Object arg1, double arg2, Object arg3);}invokePrim387,31730
static public interface DODOD{double invokePrim(double arg0, Object arg1, double arg2, Object arg3);}DODOD388,31830
static public interface DODOD{double invokePrim(double arg0, Object arg1, double arg2, Object arg3);}invokePrim388,31830
static public interface DODLO{Object invokePrim(double arg0, Object arg1, double arg2, long arg3);}DODLO389,31932
static public interface DODLO{Object invokePrim(double arg0, Object arg1, double arg2, long arg3);}invokePrim389,31932
static public interface DODLL{long invokePrim(double arg0, Object arg1, double arg2, long arg3);}DODLL390,32032
static public interface DODLL{long invokePrim(double arg0, Object arg1, double arg2, long arg3);}invokePrim390,32032
static public interface DODLD{double invokePrim(double arg0, Object arg1, double arg2, long arg3);}DODLD391,32130
static public interface DODLD{double invokePrim(double arg0, Object arg1, double arg2, long arg3);}invokePrim391,32130
static public interface DODDO{Object invokePrim(double arg0, Object arg1, double arg2, double arg3);}DODDO392,32230
static public interface DODDO{Object invokePrim(double arg0, Object arg1, double arg2, double arg3);}invokePrim392,32230
static public interface DODDL{long invokePrim(double arg0, Object arg1, double arg2, double arg3);}DODDL393,32332
static public interface DODDL{long invokePrim(double arg0, Object arg1, double arg2, double arg3);}invokePrim393,32332
static public interface DODDD{double invokePrim(double arg0, Object arg1, double arg2, double arg3);}DODDD394,32432
static public interface DODDD{double invokePrim(double arg0, Object arg1, double arg2, double arg3);}invokePrim394,32432
static public interface DLOOO{Object invokePrim(double arg0, long arg1, Object arg2, Object arg3);}DLOOO395,32534
static public interface DLOOO{Object invokePrim(double arg0, long arg1, Object arg2, Object arg3);}invokePrim395,32534
static public interface DLOOL{long invokePrim(double arg0, long arg1, Object arg2, Object arg3);}DLOOL396,32634
static public interface DLOOL{long invokePrim(double arg0, long arg1, Object arg2, Object arg3);}invokePrim396,32634
static public interface DLOOD{double invokePrim(double arg0, long arg1, Object arg2, Object arg3);}DLOOD397,32732
static public interface DLOOD{double invokePrim(double arg0, long arg1, Object arg2, Object arg3);}invokePrim397,32732
static public interface DLOLO{Object invokePrim(double arg0, long arg1, Object arg2, long arg3);}DLOLO398,32832
static public interface DLOLO{Object invokePrim(double arg0, long arg1, Object arg2, long arg3);}invokePrim398,32832
static public interface DLOLL{long invokePrim(double arg0, long arg1, Object arg2, long arg3);}DLOLL399,32930
static public interface DLOLL{long invokePrim(double arg0, long arg1, Object arg2, long arg3);}invokePrim399,32930
static public interface DLOLD{double invokePrim(double arg0, long arg1, Object arg2, long arg3);}DLOLD400,33026
static public interface DLOLD{double invokePrim(double arg0, long arg1, Object arg2, long arg3);}invokePrim400,33026
static public interface DLODO{Object invokePrim(double arg0, long arg1, Object arg2, double arg3);}DLODO401,33124
static public interface DLODO{Object invokePrim(double arg0, long arg1, Object arg2, double arg3);}invokePrim401,33124
static public interface DLODL{long invokePrim(double arg0, long arg1, Object arg2, double arg3);}DLODL402,33224
static public interface DLODL{long invokePrim(double arg0, long arg1, Object arg2, double arg3);}invokePrim402,33224
static public interface DLODD{double invokePrim(double arg0, long arg1, Object arg2, double arg3);}DLODD403,33322
static public interface DLODD{double invokePrim(double arg0, long arg1, Object arg2, double arg3);}invokePrim403,33322
static public interface DLLOO{Object invokePrim(double arg0, long arg1, long arg2, Object arg3);}DLLOO404,33422
static public interface DLLOO{Object invokePrim(double arg0, long arg1, long arg2, Object arg3);}invokePrim404,33422
static public interface DLLOL{long invokePrim(double arg0, long arg1, long arg2, Object arg3);}DLLOL405,33520
static public interface DLLOL{long invokePrim(double arg0, long arg1, long arg2, Object arg3);}invokePrim405,33520
static public interface DLLOD{double invokePrim(double arg0, long arg1, long arg2, Object arg3);}DLLOD406,33616
static public interface DLLOD{double invokePrim(double arg0, long arg1, long arg2, Object arg3);}invokePrim406,33616
static public interface DLLLO{Object invokePrim(double arg0, long arg1, long arg2, long arg3);}DLLLO407,33714
static public interface DLLLO{Object invokePrim(double arg0, long arg1, long arg2, long arg3);}invokePrim407,33714
static public interface DLLLL{long invokePrim(double arg0, long arg1, long arg2, long arg3);}DLLLL408,33810
static public interface DLLLL{long invokePrim(double arg0, long arg1, long arg2, long arg3);}invokePrim408,33810
static public interface DLLLD{double invokePrim(double arg0, long arg1, long arg2, long arg3);}DLLLD409,33904
static public interface DLLLD{double invokePrim(double arg0, long arg1, long arg2, long arg3);}invokePrim409,33904
static public interface DLLDO{Object invokePrim(double arg0, long arg1, long arg2, double arg3);}DLLDO410,34000
static public interface DLLDO{Object invokePrim(double arg0, long arg1, long arg2, double arg3);}invokePrim410,34000
static public interface DLLDL{long invokePrim(double arg0, long arg1, long arg2, double arg3);}DLLDL411,34098
static public interface DLLDL{long invokePrim(double arg0, long arg1, long arg2, double arg3);}invokePrim411,34098
static public interface DLLDD{double invokePrim(double arg0, long arg1, long arg2, double arg3);}DLLDD412,34194
static public interface DLLDD{double invokePrim(double arg0, long arg1, long arg2, double arg3);}invokePrim412,34194
static public interface DLDOO{Object invokePrim(double arg0, long arg1, double arg2, Object arg3);}DLDOO413,34292
static public interface DLDOO{Object invokePrim(double arg0, long arg1, double arg2, Object arg3);}invokePrim413,34292
static public interface DLDOL{long invokePrim(double arg0, long arg1, double arg2, Object arg3);}DLDOL414,34392
static public interface DLDOL{long invokePrim(double arg0, long arg1, double arg2, Object arg3);}invokePrim414,34392
static public interface DLDOD{double invokePrim(double arg0, long arg1, double arg2, Object arg3);}DLDOD415,34490
static public interface DLDOD{double invokePrim(double arg0, long arg1, double arg2, Object arg3);}invokePrim415,34490
static public interface DLDLO{Object invokePrim(double arg0, long arg1, double arg2, long arg3);}DLDLO416,34590
static public interface DLDLO{Object invokePrim(double arg0, long arg1, double arg2, long arg3);}invokePrim416,34590
static public interface DLDLL{long invokePrim(double arg0, long arg1, double arg2, long arg3);}DLDLL417,34688
static public interface DLDLL{long invokePrim(double arg0, long arg1, double arg2, long arg3);}invokePrim417,34688
static public interface DLDLD{double invokePrim(double arg0, long arg1, double arg2, long arg3);}DLDLD418,34784
static public interface DLDLD{double invokePrim(double arg0, long arg1, double arg2, long arg3);}invokePrim418,34784
static public interface DLDDO{Object invokePrim(double arg0, long arg1, double arg2, double arg3);}DLDDO419,34882
static public interface DLDDO{Object invokePrim(double arg0, long arg1, double arg2, double arg3);}invokePrim419,34882
static public interface DLDDL{long invokePrim(double arg0, long arg1, double arg2, double arg3);}DLDDL420,34982
static public interface DLDDL{long invokePrim(double arg0, long arg1, double arg2, double arg3);}invokePrim420,34982
static public interface DLDDD{double invokePrim(double arg0, long arg1, double arg2, double arg3);}DLDDD421,35080
static public interface DLDDD{double invokePrim(double arg0, long arg1, double arg2, double arg3);}invokePrim421,35080
static public interface DDOOO{Object invokePrim(double arg0, double arg1, Object arg2, Object arg3);}DDOOO422,35180
static public interface DDOOO{Object invokePrim(double arg0, double arg1, Object arg2, Object arg3);}invokePrim422,35180
static public interface DDOOL{long invokePrim(double arg0, double arg1, Object arg2, Object arg3);}DDOOL423,35282
static public interface DDOOL{long invokePrim(double arg0, double arg1, Object arg2, Object arg3);}invokePrim423,35282
static public interface DDOOD{double invokePrim(double arg0, double arg1, Object arg2, Object arg3);}DDOOD424,35382
static public interface DDOOD{double invokePrim(double arg0, double arg1, Object arg2, Object arg3);}invokePrim424,35382
static public interface DDOLO{Object invokePrim(double arg0, double arg1, Object arg2, long arg3);}DDOLO425,35484
static public interface DDOLO{Object invokePrim(double arg0, double arg1, Object arg2, long arg3);}invokePrim425,35484
static public interface DDOLL{long invokePrim(double arg0, double arg1, Object arg2, long arg3);}DDOLL426,35584
static public interface DDOLL{long invokePrim(double arg0, double arg1, Object arg2, long arg3);}invokePrim426,35584
static public interface DDOLD{double invokePrim(double arg0, double arg1, Object arg2, long arg3);}DDOLD427,35682
static public interface DDOLD{double invokePrim(double arg0, double arg1, Object arg2, long arg3);}invokePrim427,35682
static public interface DDODO{Object invokePrim(double arg0, double arg1, Object arg2, double arg3);}DDODO428,35782
static public interface DDODO{Object invokePrim(double arg0, double arg1, Object arg2, double arg3);}invokePrim428,35782
static public interface DDODL{long invokePrim(double arg0, double arg1, Object arg2, double arg3);}DDODL429,35884
static public interface DDODL{long invokePrim(double arg0, double arg1, Object arg2, double arg3);}invokePrim429,35884
static public interface DDODD{double invokePrim(double arg0, double arg1, Object arg2, double arg3);}DDODD430,35984
static public interface DDODD{double invokePrim(double arg0, double arg1, Object arg2, double arg3);}invokePrim430,35984
static public interface DDLOO{Object invokePrim(double arg0, double arg1, long arg2, Object arg3);}DDLOO431,36086
static public interface DDLOO{Object invokePrim(double arg0, double arg1, long arg2, Object arg3);}invokePrim431,36086
static public interface DDLOL{long invokePrim(double arg0, double arg1, long arg2, Object arg3);}DDLOL432,36186
static public interface DDLOL{long invokePrim(double arg0, double arg1, long arg2, Object arg3);}invokePrim432,36186
static public interface DDLOD{double invokePrim(double arg0, double arg1, long arg2, Object arg3);}DDLOD433,36284
static public interface DDLOD{double invokePrim(double arg0, double arg1, long arg2, Object arg3);}invokePrim433,36284
static public interface DDLLO{Object invokePrim(double arg0, double arg1, long arg2, long arg3);}DDLLO434,36384
static public interface DDLLO{Object invokePrim(double arg0, double arg1, long arg2, long arg3);}invokePrim434,36384
static public interface DDLLL{long invokePrim(double arg0, double arg1, long arg2, long arg3);}DDLLL435,36482
static public interface DDLLL{long invokePrim(double arg0, double arg1, long arg2, long arg3);}invokePrim435,36482
static public interface DDLLD{double invokePrim(double arg0, double arg1, long arg2, long arg3);}DDLLD436,36578
static public interface DDLLD{double invokePrim(double arg0, double arg1, long arg2, long arg3);}invokePrim436,36578
static public interface DDLDO{Object invokePrim(double arg0, double arg1, long arg2, double arg3);}DDLDO437,36676
static public interface DDLDO{Object invokePrim(double arg0, double arg1, long arg2, double arg3);}invokePrim437,36676
static public interface DDLDL{long invokePrim(double arg0, double arg1, long arg2, double arg3);}DDLDL438,36776
static public interface DDLDL{long invokePrim(double arg0, double arg1, long arg2, double arg3);}invokePrim438,36776
static public interface DDLDD{double invokePrim(double arg0, double arg1, long arg2, double arg3);}DDLDD439,36874
static public interface DDLDD{double invokePrim(double arg0, double arg1, long arg2, double arg3);}invokePrim439,36874
static public interface DDDOO{Object invokePrim(double arg0, double arg1, double arg2, Object arg3);}DDDOO440,36974
static public interface DDDOO{Object invokePrim(double arg0, double arg1, double arg2, Object arg3);}invokePrim440,36974
static public interface DDDOL{long invokePrim(double arg0, double arg1, double arg2, Object arg3);}DDDOL441,37076
static public interface DDDOL{long invokePrim(double arg0, double arg1, double arg2, Object arg3);}invokePrim441,37076
static public interface DDDOD{double invokePrim(double arg0, double arg1, double arg2, Object arg3);}DDDOD442,37176
static public interface DDDOD{double invokePrim(double arg0, double arg1, double arg2, Object arg3);}invokePrim442,37176
static public interface DDDLO{Object invokePrim(double arg0, double arg1, double arg2, long arg3);}DDDLO443,37278
static public interface DDDLO{Object invokePrim(double arg0, double arg1, double arg2, long arg3);}invokePrim443,37278
static public interface DDDLL{long invokePrim(double arg0, double arg1, double arg2, long arg3);}DDDLL444,37378
static public interface DDDLL{long invokePrim(double arg0, double arg1, double arg2, long arg3);}invokePrim444,37378
static public interface DDDLD{double invokePrim(double arg0, double arg1, double arg2, long arg3);}DDDLD445,37476
static public interface DDDLD{double invokePrim(double arg0, double arg1, double arg2, long arg3);}invokePrim445,37476
static public interface DDDDO{Object invokePrim(double arg0, double arg1, double arg2, double arg3);}DDDDO446,37576
static public interface DDDDO{Object invokePrim(double arg0, double arg1, double arg2, double arg3);}invokePrim446,37576
static public interface DDDDL{long invokePrim(double arg0, double arg1, double arg2, double arg3);}DDDDL447,37678
static public interface DDDDL{long invokePrim(double arg0, double arg1, double arg2, double arg3);}invokePrim447,37678
static public interface DDDDD{double invokePrim(double arg0, double arg1, double arg2, double arg3);}DDDDD448,37778
static public interface DDDDD{double invokePrim(double arg0, double arg1, double arg2, double arg3);}invokePrim448,37778

/home/bronsa/src/clojure/src/jvm/clojure/lang/APersistentMap.java,1909
package clojure.lang;clojure.lang11,480
public abstract class APersistentMap extends AFn implements IPersistentMap, Map, Iterable, Serializable, MapEquivalence, IHashEq {APersistentMap16,553
int _hash = -1;_hash17,684
int _hasheq = -1;_hasheq18,700
public String toString(){toString20,719
public IPersistentCollection cons(Object o){cons24,778
public boolean equals(Object obj){equals48,1358
static public boolean mapEquals(IPersistentMap m1, Object obj){mapEquals52,1426
public boolean equiv(Object obj){equiv73,1866
public int hashCode(){hashCode95,2328
static public int mapHash(IPersistentMap m){mapHash103,2424
public int hasheq(){hasheq114,2715
static public int mapHasheq(IPersistentMap m) {mapHasheq122,2817
static public class KeySeq extends ASeq{KeySeq133,3059
	ISeq seq;seq134,3100
	static public KeySeq create(ISeq seq){create136,3112
	public Object first(){first151,3350
	public ISeq next(){next155,3423
	public KeySeq withMeta(IPersistentMap meta){withMeta159,3477
static public class ValSeq extends ASeq{ValSeq164,3561
	ISeq seq;seq165,3602
	static public ValSeq create(ISeq seq){create167,3614
	public Object first(){first182,3852
	public ISeq next(){next186,3927
	public ValSeq withMeta(IPersistentMap meta){withMeta190,3981
public Object invoke(Object arg1) {invoke196,4066
public Object invoke(Object arg1, Object notFound) {invoke200,4126
public void clear(){clear206,4246
public boolean containsValue(Object value){containsValue210,4314
public Set entrySet(){entrySet214,4395
public Object get(Object key){get242,4894
public boolean isEmpty(){isEmpty246,4948
public Set keySet(){keySet250,4999
public Object put(Object key, Object value){put284,5546
public void putAll(Map t){putAll288,5638
public Object remove(Object key){remove292,5712
public int size(){size296,5793
public Collection values(){values300,5832

/home/bronsa/src/clojure/src/jvm/clojure/lang/Sequential.java,87
package clojure.lang;clojure.lang1,0
public interface Sequential {Sequential12,498

/home/bronsa/src/clojure/src/jvm/clojure/lang/ILookup.java,178
package clojure.lang;clojure.lang13,504
public interface ILookup{ILookup15,527
Object valAt(Object key);valAt16,553
Object valAt(Object key, Object notFound);valAt18,580

/home/bronsa/src/clojure/src/jvm/clojure/lang/IProxy.java,347
package clojure.lang;clojure.lang13,505
public interface IProxy{IProxy15,528
    public void __initClojureFnMappings(IPersistentMap m);__initClojureFnMappings17,554
    public void __updateClojureFnMappings(IPersistentMap m);__updateClojureFnMappings18,613
    public IPersistentMap __getClojureFnMappings();__getClojureFnMappings19,674

/home/bronsa/src/clojure/src/jvm/clojure/lang/Keyword.java,3577
package clojure.lang;clojure.lang13,517
public class Keyword implements IFn, Comparable, Named, Serializable, IHashEq {Keyword24,797
static final ReferenceQueue rq = new ReferenceQueue();rq27,972
public final Symbol sym;sym28,1027
final int hash;hash29,1052
String _str;_str30,1068
public static Keyword intern(Symbol sym){intern32,1082
public static Keyword intern(String ns, String name){intern48,1552
public static Keyword intern(String nsname){intern52,1650
public static Keyword find(Symbol sym){find61,1823
public static Keyword find(String ns, String name){find69,1988
public static Keyword find(String nsname){find73,2085
public final int hashCode(){hashCode77,2171
public int hasheq() {hasheq81,2217
public String toString(){toString85,2256
public Object throwArity(){throwArity91,2348
public Object call() {call96,2509
public void run(){run100,2557
public Object invoke() {invoke104,2623
public int compareTo(Object o){compareTo108,2673
public String getNamespace(){getNamespace113,2751
public String getName(){getName117,2812
final public Object invoke(Object obj) {invoke132,3095
final public Object invoke(Object obj, Object notFound) {invoke138,3231
public Object invoke(Object arg1, Object arg2, Object arg3) {invoke144,3403
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4) {invoke148,3490
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5) {invoke152,3590
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6) {invoke156,3703
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7)invoke160,3829
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke165,3970
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke170,4143
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke175,4329
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke180,4529
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke185,4743
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke190,4971
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke196,5215
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke202,5473
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke208,5764
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke214,6069
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke220,6388
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke226,6721
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke232,7068
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke239,7431
public Object applyTo(ISeq arglist) {applyTo248,7832

/home/bronsa/src/clojure/src/jvm/clojure/lang/ITransientVector.java,233
package clojure.lang;clojure.lang13,505
public interface ITransientVector extends ITransientAssociative, Indexed{ITransientVector15,528
ITransientVector assocN(int i, Object val);assocN17,603
ITransientVector pop();pop19,648

/home/bronsa/src/clojure/src/jvm/clojure/lang/PersistentQueue.java,2016
package clojure.lang;clojure.lang11,490
public class PersistentQueue extends Obj implements IPersistentList, Collection, Counted, IHashEq{PersistentQueue24,864
final public static PersistentQueue EMPTY = new PersistentQueue(null, 0, null, null);EMPTY26,965
final int cnt;cnt29,1058
final ISeq f;f30,1073
final PersistentVector r;r31,1088
int _hash = -1;_hash33,1158
int _hasheq = -1;_hasheq34,1175
PersistentQueue(IPersistentMap meta, int cnt, ISeq f, PersistentVector r){PersistentQueue36,1196
public boolean equiv(Object obj){equiv43,1336
public boolean equals(Object obj){equals57,1625
public int hashCode(){hashCode71,1916
public int hasheq() {hasheq84,2157
public Object peek(){peek97,2375
public PersistentQueue pop(){pop101,2425
public int count(){count115,2762
public ISeq seq(){seq119,2801
public PersistentQueue cons(Object o){cons125,2890
public IPersistentCollection empty(){empty132,3135
public PersistentQueue withMeta(IPersistentMap meta){withMeta136,3211
static class Seq extends ASeq{Seq140,3317
	final ISeq f;f141,3349
	final ISeq rseq;rseq142,3365
	Seq(ISeq f, ISeq rseq){Seq144,3386
	Seq(IPersistentMap meta, ISeq f, ISeq rseq){Seq149,3454
	public Object first(){first155,3559
	public ISeq next(){next159,3611
	public int count(){count172,3807
	public Seq withMeta(IPersistentMap meta){withMeta176,3875
public Object[] toArray(){toArray183,4004
public boolean add(Object o){add187,4068
public boolean remove(Object o){remove191,4149
public boolean addAll(Collection c){addAll195,4233
public void clear(){clear199,4321
public boolean retainAll(Collection c){retainAll203,4393
public boolean removeAll(Collection c){removeAll207,4484
public boolean containsAll(Collection c){containsAll211,4575
public Object[] toArray(Object[] a){toArray220,4705
public int size(){size224,4791
public boolean isEmpty(){isEmpty228,4834
public boolean contains(Object o){contains232,4889
public Iterator iterator(){iterator241,5052

/home/bronsa/src/clojure/src/jvm/clojure/lang/RT.java,22750
package clojure.lang;clojure.lang13,516
public class RT{RT31,1025
static final public Boolean T = Boolean.TRUE;//Keyword.intern(Symbol.intern(null, "t"));T33,1043
static final public Boolean F = Boolean.FALSE;//Keyword.intern(Symbol.intern(null, "t"));F34,1132
static final public String LOADER_SUFFIX = "__init";LOADER_SUFFIX35,1222
final static IPersistentMap DEFAULT_IMPORTS = map(DEFAULT_IMPORTS38,1299
static public Charset UTF8 = Charset.forName("UTF-8");UTF8169,9886
static Object readTrueFalseUnknown(String s){readTrueFalseUnknown171,9942
static public final Namespace CLOJURE_NS = Namespace.findOrCreate(Symbol.intern("clojure.core"));CLOJURE_NS179,10129
final static public Var OUT =OUT181,10309
final static public Var IN =IN183,10438
final static public Var ERR =ERR186,10609
final static Keyword TAG_KEY = Keyword.intern(null, "tag");TAG_KEY189,10774
final static Keyword CONST_KEY = Keyword.intern(null, "const");CONST_KEY190,10834
final static public Var AGENT = Var.intern(CLOJURE_NS, Symbol.intern("*agent*"), null).setDynamic();AGENT191,10898
static Object readeval = readTrueFalseUnknown(System.getProperty("clojure.read.eval","true"));readeval192,10999
final static public Var READEVAL = Var.intern(CLOJURE_NS, Symbol.intern("*read-eval*"),  readeval).setDynamic();READEVAL193,11094
final static public Var DATA_READERS = Var.intern(CLOJURE_NS, Symbol.intern("*data-readers*"), RT.map()).setDynamic();DATA_READERS194,11207
final static public Var DEFAULT_DATA_READER_FN = Var.intern(CLOJURE_NS, Symbol.intern("*default-data-reader-fn*"), RT.map()).setDynamic();DEFAULT_DATA_READER_FN195,11326
final static public Var DEFAULT_DATA_READERS = Var.intern(CLOJURE_NS, Symbol.intern("default-data-readers"), RT.map());DEFAULT_DATA_READERS196,11465
final static public Var ASSERT = Var.intern(CLOJURE_NS, Symbol.intern("*assert*"), T).setDynamic();ASSERT197,11585
final static public Var MATH_CONTEXT = Var.intern(CLOJURE_NS, Symbol.intern("*math-context*"), null).setDynamic();MATH_CONTEXT198,11685
static Keyword LINE_KEY = Keyword.intern(null, "line");LINE_KEY199,11800
static Keyword COLUMN_KEY = Keyword.intern(null, "column");COLUMN_KEY200,11856
static Keyword FILE_KEY = Keyword.intern(null, "file");FILE_KEY201,11916
static Keyword DECLARED_KEY = Keyword.intern(null, "declared");DECLARED_KEY202,11972
static Keyword DOC_KEY = Keyword.intern(null, "doc");DOC_KEY203,12036
final static public Var USE_CONTEXT_CLASSLOADER =USE_CONTEXT_CLASSLOADER204,12090
static final public Var UNCHECKED_MATH = Var.intern(Namespace.findOrCreate(Symbol.intern("clojure.core")),UNCHECKED_MATH207,12236
final static Symbol LOAD_FILE = Symbol.intern("load-file");LOAD_FILE213,12661
final static Symbol IN_NAMESPACE = Symbol.intern("in-ns");IN_NAMESPACE214,12721
final static Symbol NAMESPACE = Symbol.intern("ns");NAMESPACE215,12780
static final Symbol IDENTICAL = Symbol.intern("identical?");IDENTICAL216,12833
final static Var CMD_LINE_ARGS = Var.intern(CLOJURE_NS, Symbol.intern("*command-line-args*"), null).setDynamic();CMD_LINE_ARGS217,12894
final public static Var CURRENT_NS = Var.intern(CLOJURE_NS, Symbol.intern("*ns*"),CURRENT_NS219,13017
final static Var FLUSH_ON_NEWLINE = Var.intern(CLOJURE_NS, Symbol.intern("*flush-on-newline*"), T).setDynamic();FLUSH_ON_NEWLINE222,13175
final static Var PRINT_META = Var.intern(CLOJURE_NS, Symbol.intern("*print-meta*"), F).setDynamic();PRINT_META223,13288
final static Var PRINT_READABLY = Var.intern(CLOJURE_NS, Symbol.intern("*print-readably*"), T).setDynamic();PRINT_READABLY224,13389
final static Var PRINT_DUP = Var.intern(CLOJURE_NS, Symbol.intern("*print-dup*"), F).setDynamic();PRINT_DUP225,13498
final static Var WARN_ON_REFLECTION = Var.intern(CLOJURE_NS, Symbol.intern("*warn-on-reflection*"), F).setDynamic();WARN_ON_REFLECTION226,13597
final static Var ALLOW_UNRESOLVED_VARS = Var.intern(CLOJURE_NS, Symbol.intern("*allow-unresolved-vars*"), F).setDynamic();ALLOW_UNRESOLVED_VARS227,13714
final static Var IN_NS_VAR = Var.intern(CLOJURE_NS, Symbol.intern("in-ns"), F);IN_NS_VAR229,13838
final static Var NS_VAR = Var.intern(CLOJURE_NS, Symbol.intern("ns"), F);NS_VAR230,13918
final static Var FN_LOADER_VAR = Var.intern(CLOJURE_NS, Symbol.intern("*fn-loader*"), null).setDynamic();FN_LOADER_VAR231,13992
static final Var PRINT_INITIALIZED = Var.intern(CLOJURE_NS, Symbol.intern("print-initialized"));PRINT_INITIALIZED232,14098
static final Var PR_ON = Var.intern(CLOJURE_NS, Symbol.intern("pr-on"));PR_ON233,14195
final static IFn inNamespace = new AFn(){inNamespace235,14366
final static IFn bootNamespace = new AFn(){bootNamespace244,14569
public static List<String> processCommandLine(String[] args){processCommandLine253,14802
public static PrintWriter errPrintWriter(){errPrintWriter264,15147
static public final Object[] EMPTY_ARRAY = new Object[]{};EMPTY_ARRAY273,15353
static public final Comparator DEFAULT_COMPARATOR = new DefaultComparator();DEFAULT_COMPARATOR274,15412
private static final class DefaultComparator implements Comparator, Serializable {DefaultComparator276,15490
    public int compare(Object o1, Object o2){compare277,15573
static AtomicInteger id = new AtomicInteger(1);id288,15888
static public void addURL(Object url) throws MalformedURLException{addURL290,15937
static public Keyword keyword(String ns, String name){keyword336,17664
static public Var var(String ns, String name){var340,17773
static public Var var(String ns, String name, Object init){var344,17919
public static void loadResourceScript(String name) throws IOException{loadResourceScript348,18084
public static void maybeLoadResourceScript(String name) throws IOException{maybeLoadResourceScript352,18191
public static void loadResourceScript(String name, boolean failIfNotFound) throws IOException{loadResourceScript356,18304
public static void loadResourceScript(Class c, String name) throws IOException{loadResourceScript360,18455
public static void loadResourceScript(Class c, String name, boolean failIfNotFound) throws IOException{loadResourceScript364,18574
static public void init() {init381,19090
static public long lastModified(URL url, String libfile) throws IOException{lastModified385,19188
static void compile(String cljfile) throws IOException{compile394,19463
static public void load(String scriptbase) throws IOException, ClassNotFoundException{load410,19892
static public void load(String scriptbase, boolean failIfNotFound) throws IOException, ClassNotFoundException{load414,20007
static void doInit() throws ClassNotFoundException, IOException{doInit446,21145
static public int nextID(){nextID468,21740
public static void loadLibrary(String libname){loadLibrary473,21871
static public ISeq seq(Object coll){seq480,22026
static ISeq seqFrom(Object coll){seqFrom489,22211
static public Object seqOrElse(Object o) {seqOrElse509,22840
static public ISeq keys(Object coll){keys513,22921
static public ISeq vals(Object coll){vals517,23011
static public IPersistentMap meta(Object x){meta521,23101
public static int count(Object o){count527,23216
static int countFrom(Object o){countFrom533,23355
static public IPersistentCollection conj(IPersistentCollection coll, Object x){conj559,23994
static public ISeq cons(Object x, Object coll){cons565,24149
static public Object first(Object x){first575,24378
static public Object second(Object x){second584,24544
static public Object third(Object x){third588,24610
static public Object fourth(Object x){fourth592,24681
static public ISeq next(Object x){next596,24759
static public ISeq more(Object x){more605,24920
static public Object peek(Object x){peek631,25464
static public Object pop(Object x){pop637,25573
static public Object get(Object coll, Object key){get643,25680
static Object getFrom(Object coll, Object key){getFrom649,25829
static public Object get(Object coll, Object key, Object notFound){get670,26323
static Object getFrom(Object coll, Object key, Object notFound){getFrom676,26509
static public Associative assoc(Object coll, Object key, Object val){assoc699,27108
static public Object contains(Object coll, Object key){contains705,27302
static public Object find(Object coll, Object key){find727,28036
static public ISeq findKey(Keyword key, ISeq keyvals) {findKey743,28421
static public Object dissoc(Object coll, Object key) {dissoc755,28692
static public Object nth(Object coll, int n){nth761,28829
static Object nthFrom(Object coll, int n){nthFrom767,28991
static public Object nth(Object coll, int n, Object notFound){nth802,29980
static Object nthFrom(Object coll, int n, Object notFound){nthFrom810,30176
static public Object assocN(int n, Object val, Object coll){assocN861,31429
static boolean hasTag(Object o, Object tag){hasTag876,31789
static public Object box(Object x){box883,31969
static public Character box(char x){box887,32019
static public Object box(boolean x){box891,32089
static public Object box(Boolean x){box895,32148
static public Number box(byte x){box899,32213
static public Number box(short x){box903,32275
static public Number box(int x){box907,32338
static public Number box(long x){box911,32399
static public Number box(float x){box915,32461
static public Number box(double x){box919,32524
static public char charCast(Object x){charCast923,32588
static public char charCast(byte x){charCast934,32883
static public char charCast(short x){charCast941,33056
static public char charCast(char x){charCast948,33230
static public char charCast(int x){charCast952,33284
static public char charCast(long x){charCast959,33456
static public char charCast(float x){charCast966,33629
static public char charCast(double x){charCast972,33833
static public boolean booleanCast(Object x){booleanCast978,34038
static public boolean booleanCast(boolean x){booleanCast984,34170
static public byte byteCast(Object x){byteCast988,34230
static public byte byteCast(byte x){byteCast998,34491
static public byte byteCast(short x){byteCast1002,34545
static public byte byteCast(int x){byteCast1009,34719
static public byte byteCast(long x){byteCast1016,34891
static public byte byteCast(float x){byteCast1023,35064
static public byte byteCast(double x){byteCast1029,35258
static public short shortCast(Object x){shortCast1035,35453
static public short shortCast(byte x){shortCast1045,35723
static public short shortCast(short x){shortCast1049,35776
static public short shortCast(int x){shortCast1053,35830
static public short shortCast(long x){shortCast1060,36007
static public short shortCast(float x){shortCast1067,36185
static public short shortCast(double x){shortCast1073,36385
static public int intCast(Object x){intCast1079,36586
static public int intCast(char x){intCast1090,36801
static public int intCast(byte x){intCast1094,36850
static public int intCast(short x){intCast1098,36899
static public int intCast(int x){intCast1102,36949
static public int intCast(float x){intCast1106,36997
static public int intCast(long x){intCast1112,37179
static public int intCast(double x){intCast1119,37332
static public long longCast(Object x){longCast1125,37515
static public long longCast(byte x){longCast1154,38354
static public long longCast(short x){longCast1158,38408
static public long longCast(int x){longCast1162,38463
static public long longCast(float x){longCast1166,38513
static public long longCast(long x){longCast1172,38693
static public long longCast(double x){longCast1176,38744
static public float floatCast(Object x){floatCast1182,38925
static public float floatCast(byte x){floatCast1194,39215
static public float floatCast(short x){floatCast1198,39271
static public float floatCast(int x){floatCast1202,39328
static public float floatCast(float x){floatCast1206,39380
static public float floatCast(long x){floatCast1210,39434
static public float floatCast(double x){floatCast1214,39487
static public double doubleCast(Object x){doubleCast1221,39677
static public double doubleCast(byte x){doubleCast1225,39759
static public double doubleCast(short x){doubleCast1229,39817
static public double doubleCast(int x){doubleCast1233,39876
static public double doubleCast(float x){doubleCast1237,39930
static public double doubleCast(long x){doubleCast1241,39986
static public double doubleCast(double x){doubleCast1245,40041
static public byte uncheckedByteCast(Object x){uncheckedByteCast1249,40098
static public byte uncheckedByteCast(byte x){uncheckedByteCast1253,40186
static public byte uncheckedByteCast(short x){uncheckedByteCast1257,40249
static public byte uncheckedByteCast(int x){uncheckedByteCast1261,40320
static public byte uncheckedByteCast(long x){uncheckedByteCast1265,40389
static public byte uncheckedByteCast(float x){uncheckedByteCast1269,40459
static public byte uncheckedByteCast(double x){uncheckedByteCast1273,40530
static public short uncheckedShortCast(Object x){uncheckedShortCast1277,40602
static public short uncheckedShortCast(byte x){uncheckedShortCast1281,40693
static public short uncheckedShortCast(short x){uncheckedShortCast1285,40758
static public short uncheckedShortCast(int x){uncheckedShortCast1289,40824
static public short uncheckedShortCast(long x){uncheckedShortCast1293,40896
static public short uncheckedShortCast(float x){uncheckedShortCast1297,40969
static public short uncheckedShortCast(double x){uncheckedShortCast1301,41043
static public char uncheckedCharCast(Object x){uncheckedCharCast1305,41118
static public char uncheckedCharCast(byte x){uncheckedCharCast1311,41281
static public char uncheckedCharCast(short x){uncheckedCharCast1315,41351
static public char uncheckedCharCast(char x){uncheckedCharCast1319,41422
static public char uncheckedCharCast(int x){uncheckedCharCast1323,41485
static public char uncheckedCharCast(long x){uncheckedCharCast1327,41554
static public char uncheckedCharCast(float x){uncheckedCharCast1331,41624
static public char uncheckedCharCast(double x){uncheckedCharCast1335,41695
static public int uncheckedIntCast(Object x){uncheckedIntCast1339,41767
static public int uncheckedIntCast(byte x){uncheckedIntCast1345,41916
static public int uncheckedIntCast(short x){uncheckedIntCast1349,41977
static public int uncheckedIntCast(char x){uncheckedIntCast1353,42039
static public int uncheckedIntCast(int x){uncheckedIntCast1357,42100
static public int uncheckedIntCast(long x){uncheckedIntCast1361,42160
static public int uncheckedIntCast(float x){uncheckedIntCast1365,42227
static public int uncheckedIntCast(double x){uncheckedIntCast1369,42295
static public long uncheckedLongCast(Object x){uncheckedLongCast1373,42364
static public long uncheckedLongCast(byte x){uncheckedLongCast1377,42452
static public long uncheckedLongCast(short x){uncheckedLongCast1381,42515
static public long uncheckedLongCast(int x){uncheckedLongCast1385,42579
static public long uncheckedLongCast(long x){uncheckedLongCast1389,42641
static public long uncheckedLongCast(float x){uncheckedLongCast1393,42704
static public long uncheckedLongCast(double x){uncheckedLongCast1397,42775
static public float uncheckedFloatCast(Object x){uncheckedFloatCast1401,42847
static public float uncheckedFloatCast(byte x){uncheckedFloatCast1405,42938
static public float uncheckedFloatCast(short x){uncheckedFloatCast1409,43003
static public float uncheckedFloatCast(int x){uncheckedFloatCast1413,43069
static public float uncheckedFloatCast(long x){uncheckedFloatCast1417,43133
static public float uncheckedFloatCast(float x){uncheckedFloatCast1421,43198
static public float uncheckedFloatCast(double x){uncheckedFloatCast1425,43264
static public double uncheckedDoubleCast(Object x){uncheckedDoubleCast1429,43339
static public double uncheckedDoubleCast(byte x){uncheckedDoubleCast1433,43433
static public double uncheckedDoubleCast(short x){uncheckedDoubleCast1437,43500
static public double uncheckedDoubleCast(int x){uncheckedDoubleCast1441,43568
static public double uncheckedDoubleCast(long x){uncheckedDoubleCast1445,43634
static public double uncheckedDoubleCast(float x){uncheckedDoubleCast1449,43701
static public double uncheckedDoubleCast(double x){uncheckedDoubleCast1453,43769
static public IPersistentMap map(Object... init){map1457,43838
static public IPersistentMap mapUniqueKeys(Object... init){mapUniqueKeys1465,44108
static public IPersistentSet set(Object... init){set1473,44367
static public IPersistentVector vector(Object... init){vector1477,44469
static public IPersistentVector subvec(IPersistentVector v, int start, int end){subvec1481,44579
static public ISeq list(){list1494,44965
static public ISeq list(Object arg1){list1498,45009
static public ISeq list(Object arg1, Object arg2){list1502,45084
static public ISeq list(Object arg1, Object arg2, Object arg3){list1506,45174
static public ISeq list(Object arg1, Object arg2, Object arg3, Object arg4){list1510,45283
static public ISeq list(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5){list1514,45411
static public ISeq listStar(Object arg1, ISeq rest){listStar1518,45558
static public ISeq listStar(Object arg1, Object arg2, ISeq rest){listStar1522,45647
static public ISeq listStar(Object arg1, Object arg2, Object arg3, ISeq rest){listStar1526,45761
static public ISeq listStar(Object arg1, Object arg2, Object arg3, Object arg4, ISeq rest){listStar1530,45900
static public ISeq listStar(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, ISeq rest){listStar1534,46064
static public ISeq arrayToList(Object[] a) {arrayToList1538,46253
static public Object[] object_array(Object sizeOrSeq){object_array1545,46404
static public Object[] toArray(Object coll) {toArray1559,46750
static public Object[] seqToArray(ISeq seq){seqToArray1586,47544
    static public Object[] seqToPassedArray(ISeq seq, Object[] passed){seqToPassedArray1595,47783
static public Object seqToTypedArray(ISeq seq) {seqToTypedArray1609,48249
static public Object seqToTypedArray(Class type, ISeq seq) {seqToTypedArray1614,48406
static public int length(ISeq list){length1644,49457
static public int boundedLength(ISeq list, int limit) {boundedLength1652,49577
static Character readRet(int ret){readRet1662,49813
static public Character readChar(Reader r) throws IOException{readChar1668,49906
static public Character peekChar(Reader r) throws IOException{peekChar1673,50015
static public int getLineNumber(Reader r){getLineNumber1688,50261
static public int getColumnNumber(Reader r){getColumnNumber1694,50424
static public LineNumberingPushbackReader getLineNumberingReader(Reader r){getLineNumberingReader1700,50591
static public boolean isLineNumberingReader(Reader r){isLineNumberingReader1706,50786
static public boolean isReduced(Object r){isReduced1710,50894
static public String resolveClassNameInContext(String className){resolveClassNameInContext1714,50970
static public boolean suppressRead(){suppressRead1719,51091
static public String printString(Object x){printString1724,51186
static public Object readString(String s){readString1735,51377
static public void print(Object x, Writer w) throws IOException{print1745,51596
static public void formatAesthetic(Writer w, Object obj) throws IOException{formatAesthetic1909,55163
static public void formatStandard(Writer w, Object obj) throws IOException{formatStandard1916,55312
static public Object format(Object o, String s, Object... args) throws IOException{format1951,55940
static public ISeq doFormat(Writer w, String s, ISeq args) throws IOException{doFormat1965,56251
static public Object[] setValues(Object... vals){setValues2019,57685
static public ClassLoader makeClassLoader(){makeClassLoader2027,57831
static public ClassLoader baseLoader(){baseLoader2042,58244
static public InputStream resourceAsStream(ClassLoader loader, String name){resourceAsStream2050,58519
static public URL getResource(ClassLoader loader, String name){getResource2058,58753
static public Class classForName(String name) {classForName2066,58958
static Class classForNameNonLoading(String name) {classForNameNonLoading2078,59143
static public Class loadClassForName(String name) throws ClassNotFoundException{loadClassForName2089,59331
static public float aget(float[] xs, int i){aget2101,59577
static public float aset(float[] xs, int i, float v){aset2105,59640
static public int alength(float[] xs){alength2110,59720
static public float[] aclone(float[] xs){aclone2114,59781
static public double aget(double[] xs, int i){aget2118,59846
static public double aset(double[] xs, int i, double v){aset2122,59911
static public int alength(double[] xs){alength2127,59994
static public double[] aclone(double[] xs){aclone2131,60056
static public int aget(int[] xs, int i){aget2135,60123
static public int aset(int[] xs, int i, int v){aset2139,60182
static public int alength(int[] xs){alength2144,60256
static public int[] aclone(int[] xs){aclone2148,60315
static public long aget(long[] xs, int i){aget2152,60376
static public long aset(long[] xs, int i, long v){aset2156,60437
static public int alength(long[] xs){alength2161,60514
static public long[] aclone(long[] xs){aclone2165,60574
static public char aget(char[] xs, int i){aget2169,60637
static public char aset(char[] xs, int i, char v){aset2173,60698
static public int alength(char[] xs){alength2178,60775
static public char[] aclone(char[] xs){aclone2182,60835
static public byte aget(byte[] xs, int i){aget2186,60898
static public byte aset(byte[] xs, int i, byte v){aset2190,60959
static public int alength(byte[] xs){alength2195,61036
static public byte[] aclone(byte[] xs){aclone2199,61096
static public short aget(short[] xs, int i){aget2203,61159
static public short aset(short[] xs, int i, short v){aset2207,61222
static public int alength(short[] xs){alength2212,61302
static public short[] aclone(short[] xs){aclone2216,61363
static public boolean aget(boolean[] xs, int i){aget2220,61428
static public boolean aset(boolean[] xs, int i, boolean v){aset2224,61495
static public int alength(boolean[] xs){alength2229,61581
static public boolean[] aclone(boolean[] xs){aclone2233,61644
static public Object aget(Object[] xs, int i){aget2237,61713
static public Object aset(Object[] xs, int i, Object v){aset2241,61778
static public int alength(Object[] xs){alength2246,61861
static public Object[] aclone(Object[] xs){aclone2250,61923

/home/bronsa/src/clojure/src/jvm/clojure/lang/IChunk.java,185
package clojure.lang;clojure.lang13,505
public interface IChunk extends Indexed{IChunk15,528
IChunk dropFirst();dropFirst17,570
Object reduce(IFn f, Object start) ;reduce19,591

/home/bronsa/src/clojure/src/jvm/clojure/lang/IPersistentSet.java,293
package clojure.lang;clojure.lang13,504
public interface IPersistentSet extends IPersistentCollection, Counted{IPersistentSet15,527
	public IPersistentSet disjoin(Object key) ;disjoin16,599
	public boolean contains(Object key);contains17,644
	public Object get(Object key);get18,682

/home/bronsa/src/clojure/src/jvm/clojure/lang/TransactionalHashMap.java,1173
package clojure.lang;clojure.lang13,505
public class TransactionalHashMap<K, V> extends AbstractMap<K, V> implements ConcurrentMap<K, V>{TransactionalHashMap18,592
final Ref[] bins;bins19,690
IPersistentMap mapAt(int bin){mapAt21,709
final int binFor(Object k){binFor25,787
Entry entryAt(Object k){entryAt34,999
public TransactionalHashMap() {TransactionalHashMap38,1064
public TransactionalHashMap(int nBins) {TransactionalHashMap42,1111
public TransactionalHashMap(Map<? extends K, ? extends V> m) {TransactionalHashMap48,1257
public int size(){size53,1352
public boolean isEmpty(){isEmpty62,1468
public boolean containsKey(Object k){containsKey66,1518
public V get(Object k){get70,1587
public V put(K k, V v){put77,1693
public V remove(Object k){remove85,1866
public void putAll(Map<? extends K, ? extends V> map){putAll101,2177
public void clear(){clear109,2371
public Set<Entry<K, V>> entrySet(){entrySet121,2578
public V putIfAbsent(K k, V v){putIfAbsent140,3025
public boolean remove(Object k, Object v){remove153,3260
public boolean replace(K k, V oldv, V newv){replace173,3659
public V replace(K k, V v){replace185,3921

/home/bronsa/src/clojure/src/jvm/clojure/lang/BigInt.java,1304
package clojure.lang;clojure.lang13,508
public final class BigInt extends Number{BigInt18,590
final public long lpart;lpart20,633
final public BigInteger bipart;bipart21,658
final public static BigInt ZERO = new BigInt(0,null);ZERO23,691
final public static BigInt ONE = new BigInt(1,null);ONE24,745
public int hashCode(){hashCode28,819
public boolean equals(Object obj){equals34,943
public static BigInt fromBigInteger(BigInteger val){fromBigInteger52,1317
public static BigInt fromLong(long val){fromLong59,1478
public BigInteger toBigInteger(){toBigInteger63,1553
public BigDecimal toBigDecimal(){toBigDecimal70,1669
public int intValue(){intValue79,1826
public long longValue(){longValue86,1928
public float floatValue(){floatValue93,2027
public double doubleValue(){doubleValue100,2130
public byte byteValue(){byteValue107,2235
public short shortValue(){shortValue114,2341
public static BigInt valueOf(long val){valueOf121,2451
public String toString(){toString125,2525
public int bitLength(){bitLength131,2633
public BigInt add(BigInt y) {add135,2696
public BigInt multiply(BigInt y) {multiply144,2994
public BigInt quotient(BigInt y) {quotient153,3310
public BigInt remainder(BigInt y) {remainder160,3532
public boolean lt(BigInt y) {lt167,3758

/home/bronsa/src/clojure/src/jvm/clojure/lang/Box.java,136
package clojure.lang;clojure.lang13,516
public class Box{Box15,539
public Object val;val17,558
public Box(Object val){Box19,578

/home/bronsa/src/clojure/src/jvm/clojure/lang/IBlockingDeref.java,155
package clojure.lang;clojure.lang13,500
public interface IBlockingDeref{IBlockingDeref15,523
Object deref(long ms, Object timeoutValue) ;deref16,556

/home/bronsa/src/clojure/src/jvm/clojure/lang/ITransientSet.java,289
package clojure.lang;clojure.lang13,504
public interface ITransientSet extends ITransientCollection, Counted{ITransientSet15,527
	public ITransientSet disjoin(Object key) ;disjoin16,597
	public boolean contains(Object key);contains17,641
	public Object get(Object key);get18,679

/home/bronsa/src/clojure/src/jvm/clojure/lang/IPersistentList.java,136
package clojure.lang;clojure.lang11,475
public interface IPersistentList extends Sequential, IPersistentStack{IPersistentList14,502

/home/bronsa/src/clojure/src/jvm/clojure/lang/Associative.java,281
package clojure.lang;clojure.lang1,0
public interface Associative extends IPersistentCollection, ILookup{Associative12,498
boolean containsKey(Object key);containsKey13,568
IMapEntry entryAt(Object key);entryAt15,604
Associative assoc(Object key, Object val);assoc17,638

/home/bronsa/src/clojure/src/jvm/clojure/lang/AFunction.java,392
package clojure.lang;clojure.lang13,505
public abstract class AFunction extends AFn implements IObj, Comparator, Fn, Serializable {AFunction18,587
public volatile MethodImplCache __methodImplCache;__methodImplCache20,680
public IPersistentMap meta(){meta22,732
public IObj withMeta(final IPersistentMap meta){withMeta26,779
public int compare(Object o1, Object o2){compare46,1146

/home/bronsa/src/clojure/src/jvm/clojure/lang/Intrinsics.java,204
package clojure.lang;clojure.lang13,499
public class Intrinsics implements Opcodes{Intrinsics17,551
static IPersistentMap ops = RT.map(ops22,654
static IPersistentMap preds = RT.map(preds112,6731

/home/bronsa/src/clojure/src/jvm/clojure/lang/PersistentHashSet.java,1425
package clojure.lang;clojure.lang13,504
public class PersistentHashSet extends APersistentSet implements IObj, IEditableCollection {PersistentHashSet17,551
static public final PersistentHashSet EMPTY = new PersistentHashSet(null, PersistentHashMap.EMPTY);EMPTY19,645
final IPersistentMap _meta;_meta21,746
public static PersistentHashSet create(Object... init){create23,775
public static PersistentHashSet create(List init){create32,972
static public PersistentHashSet create(ISeq items){create41,1146
public static PersistentHashSet createWithCheck(Object... init){createWithCheck50,1351
public static PersistentHashSet createWithCheck(List init){createWithCheck61,1652
static public PersistentHashSet createWithCheck(ISeq items){createWithCheck74,1945
PersistentHashSet(IPersistentMap meta, IPersistentMap impl){PersistentHashSet85,2272
public IPersistentSet disjoin(Object key) {disjoin90,2370
public IPersistentSet cons(Object o){cons96,2508
public IPersistentCollection empty(){empty102,2636
public PersistentHashSet withMeta(IPersistentMap meta){withMeta106,2710
public ITransientCollection asTransient() {asTransient110,2812
public IPersistentMap meta(){meta114,2931
static final class TransientHashSet extends ATransientSet {TransientHashSet118,2979
	TransientHashSet(ITransientMap impl) {TransientHashSet119,3039
	public IPersistentCollection persistent() {persistent123,3098

/home/bronsa/src/clojure/src/jvm/clojure/lang/SeqEnumeration.java,297
package clojure.lang;clojure.lang13,504
public class SeqEnumeration implements Enumeration{SeqEnumeration17,558
ISeq seq;seq18,610
public SeqEnumeration(ISeq seq){SeqEnumeration20,621
public boolean hasMoreElements(){hasMoreElements24,674
public Object nextElement(){nextElement28,732

/home/bronsa/src/clojure/src/jvm/clojure/lang/Compiler.java,63355
package clojure.lang;clojure.lang13,505
public class Compiler implements Opcodes{Compiler37,1013
static final Symbol DEF = Symbol.intern("def");DEF39,1056
static final Symbol LOOP = Symbol.intern("loop*");LOOP40,1104
static final Symbol RECUR = Symbol.intern("recur");RECUR41,1155
static final Symbol IF = Symbol.intern("if");IF42,1207
static final Symbol LET = Symbol.intern("let*");LET43,1253
static final Symbol LETFN = Symbol.intern("letfn*");LETFN44,1302
static final Symbol DO = Symbol.intern("do");DO45,1355
static final Symbol FN = Symbol.intern("fn*");FN46,1401
static final Symbol FNONCE = (Symbol) Symbol.intern("fn*").withMeta(RT.map(Keyword.intern(null, "once"), RT.T));FNONCE47,1448
static final Symbol QUOTE = Symbol.intern("quote");QUOTE48,1561
static final Symbol THE_VAR = Symbol.intern("var");THE_VAR49,1613
static final Symbol DOT = Symbol.intern(".");DOT50,1665
static final Symbol ASSIGN = Symbol.intern("set!");ASSIGN51,1711
static final Symbol TRY = Symbol.intern("try");TRY53,1829
static final Symbol CATCH = Symbol.intern("catch");CATCH54,1877
static final Symbol FINALLY = Symbol.intern("finally");FINALLY55,1929
static final Symbol THROW = Symbol.intern("throw");THROW56,1985
static final Symbol MONITOR_ENTER = Symbol.intern("monitor-enter");MONITOR_ENTER57,2037
static final Symbol MONITOR_EXIT = Symbol.intern("monitor-exit");MONITOR_EXIT58,2105
static final Symbol IMPORT = Symbol.intern("clojure.core", "import*");IMPORT59,2171
static final Symbol DEFTYPE = Symbol.intern("deftype*");DEFTYPE61,2303
static final Symbol CASE = Symbol.intern("case*");CASE62,2360
static final Symbol CLASS = Symbol.intern("Class");CLASS65,2468
static final Symbol NEW = Symbol.intern("new");NEW66,2520
static final Symbol THIS = Symbol.intern("this");THIS67,2568
static final Symbol REIFY = Symbol.intern("reify*");REIFY68,2618
static final Symbol LIST = Symbol.intern("clojure.core", "list");LIST72,2889
static final Symbol HASHMAP = Symbol.intern("clojure.core", "hash-map");HASHMAP73,2955
static final Symbol VECTOR = Symbol.intern("clojure.core", "vector");VECTOR74,3028
static final Symbol IDENTITY = Symbol.intern("clojure.core", "identity");IDENTITY75,3098
static final Symbol _AMP_ = Symbol.intern("&");_AMP_77,3173
static final Symbol ISEQ = Symbol.intern("clojure.lang.ISeq");ISEQ78,3221
static final Keyword inlineKey = Keyword.intern(null, "inline");inlineKey80,3285
static final Keyword inlineAritiesKey = Keyword.intern(null, "inline-arities");inlineAritiesKey81,3350
static final Keyword staticKey = Keyword.intern(null, "static");staticKey82,3430
static final Keyword arglistsKey = Keyword.intern(null, "arglists");arglistsKey83,3495
static final Symbol INVOKE_STATIC = Symbol.intern("invokeStatic");INVOKE_STATIC84,3564
static final Keyword volatileKey = Keyword.intern(null, "volatile");volatileKey86,3632
static final Keyword implementsKey = Keyword.intern(null, "implements");implementsKey87,3701
static final String COMPILE_STUB_PREFIX = "compile__stub";COMPILE_STUB_PREFIX88,3774
static final Keyword protocolKey = Keyword.intern(null, "protocol");protocolKey90,3834
static final Keyword onKey = Keyword.intern(null, "on");onKey91,3903
static Keyword dynamicKey = Keyword.intern("dynamic");dynamicKey92,3960
static final Symbol NS = Symbol.intern("ns");NS94,4016
static final Symbol IN_NS = Symbol.intern("in-ns");IN_NS95,4062
static final public IPersistentMap specials = PersistentHashMap.create(specials102,4289
final static Type CLASS_TYPE = Type.getType(Class.class);CLASS_TYPE147,5970
final static Type NS_TYPE = Type.getType(Namespace.class);NS_TYPE148,6028
final static Type UTIL_TYPE = Type.getType(Util.class);UTIL_TYPE149,6087
final static Type REFLECTOR_TYPE = Type.getType(Reflector.class);REFLECTOR_TYPE150,6143
final static Type THROWABLE_TYPE = Type.getType(Throwable.class);THROWABLE_TYPE151,6209
final static Type BOOLEAN_OBJECT_TYPE = Type.getType(Boolean.class);BOOLEAN_OBJECT_TYPE152,6275
final static Type IPERSISTENTMAP_TYPE = Type.getType(IPersistentMap.class);IPERSISTENTMAP_TYPE153,6344
final static Type IOBJ_TYPE = Type.getType(IObj.class);IOBJ_TYPE154,6420
static final public Var LOCAL_ENV = Var.create(null).setDynamic();LOCAL_ENV182,7161
static final public Var LOOP_LOCALS = Var.create().setDynamic();LOOP_LOCALS185,7252
static final public Var LOOP_LABEL = Var.create().setDynamic();LOOP_LABEL188,7326
static final public Var CONSTANTS = Var.create().setDynamic();CONSTANTS191,7408
static final public Var CONSTANT_IDS = Var.create().setDynamic();CONSTANT_IDS194,7490
static final public Var KEYWORD_CALLSITES = Var.create().setDynamic();KEYWORD_CALLSITES197,7575
static final public Var PROTOCOL_CALLSITES = Var.create().setDynamic();PROTOCOL_CALLSITES200,7661
static final public Var VAR_CALLSITES = Var.create().setDynamic();VAR_CALLSITES203,7745
static final public Var KEYWORDS = Var.create().setDynamic();KEYWORDS206,7832
static final public Var VARS = Var.create().setDynamic();VARS209,7910
static final public Var METHOD = Var.create(null).setDynamic();METHOD212,7979
static final public Var IN_CATCH_FINALLY = Var.create(null).setDynamic();IN_CATCH_FINALLY215,8058
static final public Var NO_RECUR = Var.create(null).setDynamic();NO_RECUR217,8133
static final public Var LOADER = Var.create().setDynamic();LOADER220,8221
static final public Var SOURCE = Var.intern(Namespace.findOrCreate(Symbol.intern("clojure.core")),SOURCE223,8291
static final public Var SOURCE_PATH = Var.intern(Namespace.findOrCreate(Symbol.intern("clojure.core")),SOURCE_PATH227,8508
static final public Var COMPILE_PATH = Var.intern(Namespace.findOrCreate(Symbol.intern("clojure.core")),COMPILE_PATH231,8728
static final public Var COMPILE_FILES = Var.intern(Namespace.findOrCreate(Symbol.intern("clojure.core")),COMPILE_FILES234,8946
static final public Var INSTANCE = Var.intern(Namespace.findOrCreate(Symbol.intern("clojure.core")),INSTANCE237,9167
static final public Var ADD_ANNOTATIONS = Var.intern(Namespace.findOrCreate(Symbol.intern("clojure.core")),ADD_ANNOTATIONS240,9342
static final public Keyword disableLocalsClearingKey = Keyword.intern("disable-locals-clearing");disableLocalsClearingKey243,9530
static final public Keyword elideMetaKey = Keyword.intern("elide-meta");elideMetaKey244,9628
static final public Var COMPILER_OPTIONS = Var.intern(Namespace.findOrCreate(Symbol.intern("clojure.core")),COMPILER_OPTIONS246,9702
static public Object getCompilerOption(Keyword k){getCompilerOption249,9923
static Object elideMeta(Object m){elideMeta253,10021
static final public Var LINE = Var.create(0).setDynamic();LINE268,10483
static final public Var COLUMN = Var.create(0).setDynamic();COLUMN269,10542
static final public Var LINE_BEFORE = Var.create(0).setDynamic();LINE_BEFORE272,10614
static final public Var COLUMN_BEFORE = Var.create(0).setDynamic();COLUMN_BEFORE273,10680
static final public Var LINE_AFTER = Var.create(0).setDynamic();LINE_AFTER274,10748
static final public Var COLUMN_AFTER = Var.create(0).setDynamic();COLUMN_AFTER275,10813
static final public Var NEXT_LOCAL_NUM = Var.create(0).setDynamic();NEXT_LOCAL_NUM278,10891
static final public Var RET_LOCAL_NUM = Var.create().setDynamic();RET_LOCAL_NUM281,10971
static final public Var COMPILE_STUB_SYM = Var.create(null).setDynamic();COMPILE_STUB_SYM284,11040
static final public Var COMPILE_STUB_CLASS = Var.create(null).setDynamic();COMPILE_STUB_CLASS285,11114
static final public Var CLEAR_PATH = Var.create(null).setDynamic();CLEAR_PATH289,11209
static final public Var CLEAR_ROOT = Var.create(null).setDynamic();CLEAR_ROOT292,11303
static final public Var CLEAR_SITES = Var.create(null).setDynamic();CLEAR_SITES295,11412
    public enum C{C297,11482
private class Recur {};Recur304,11633
static final public Class RECUR_CLASS = Recur.class;RECUR_CLASS305,11657
interface Expr{Expr307,11715
	Object eval() ;eval308,11731
	void emit(C context, ObjExpr objx, GeneratorAdapter gen);emit310,11749
	boolean hasJavaClass() ;hasJavaClass312,11809
	Class getJavaClass() ;getJavaClass314,11836
public static abstract class UntypedExpr implements Expr{UntypedExpr317,11863
	public Class getJavaClass(){getJavaClass319,11922
	public boolean hasJavaClass(){hasJavaClass323,12015
interface IParser{IParser328,12069
	Expr parse(C context, Object form) ;parse329,12088
static boolean isSpecial(Object sym){isSpecial332,12129
static Symbol resolveSymbol(Symbol sym){resolveSymbol336,12205
static class DefExpr implements Expr{DefExpr361,12819
	public final Var var;var362,12857
	public final Expr init;init363,12880
	public final Expr meta;meta364,12905
	public final boolean initProvided;initProvided365,12930
	public final boolean isDynamic;isDynamic366,12966
	public final String source;source367,12999
	public final int line;line368,13028
	public final int column;column369,13052
	final static Method bindRootMethod = Method.getMethod("void bindRoot(Object)");bindRootMethod370,13078
	final static Method setTagMethod = Method.getMethod("void setTag(clojure.lang.Symbol)");setTagMethod371,13159
	final static Method setMetaMethod = Method.getMethod("void setMeta(clojure.lang.IPersistentMap)");setMetaMethod372,13249
	final static Method setDynamicMethod = Method.getMethod("clojure.lang.Var setDynamic(boolean)");setDynamicMethod373,13349
	final static Method symintern = Method.getMethod("clojure.lang.Symbol intern(String, String)");symintern374,13447
	public DefExpr(String source, int line, int column, Var var, Expr init, Expr meta, boolean initProvided, boolean isDynamic){DefExpr376,13545
    public Object eval() {eval400,14313
	public void emit(C context, ObjExpr objx, GeneratorAdapter gen){emit427,15007
	public boolean hasJavaClass(){hasJavaClass460,15808
	public Class getJavaClass(){getJavaClass464,15859
	static class Parser implements IParser{Parser468,15913
		public Expr parse(C context, Object form) {parse469,15954
public static class AssignExpr implements Expr{AssignExpr536,19144
	public final AssignableExpr target;target537,19192
	public final Expr val;val538,19229
	public AssignExpr(AssignableExpr target, Expr val){AssignExpr540,19254
	public Object eval() {eval545,19353
	public void emit(C context, ObjExpr objx, GeneratorAdapter gen){emit549,19414
	public boolean hasJavaClass() {hasJavaClass553,19530
	public Class getJavaClass() {getJavaClass557,19596
	static class Parser implements IParser{Parser561,19660
		public Expr parse(C context, Object frm) {parse562,19701
public static class VarExpr implements Expr, AssignableExpr{VarExpr574,20163
	public final Var var;var575,20224
	public final Object tag;tag576,20247
	final static Method getMethod = Method.getMethod("Object get()");getMethod577,20273
	final static Method setMethod = Method.getMethod("Object set(Object)");setMethod578,20340
	public VarExpr(Var var, Symbol tag){VarExpr580,20414
	public Object eval() {eval585,20521
	public void emit(C context, ObjExpr objx, GeneratorAdapter gen){emit589,20571
	public boolean hasJavaClass(){hasJavaClass597,20724
	public Class getJavaClass() {getJavaClass601,20782
	public Object evalAssign(Expr val) {evalAssign605,20852
	public void emitAssign(C context, ObjExpr objx, GeneratorAdapter gen,emitAssign609,20924
public static class TheVarExpr implements Expr{TheVarExpr619,21184
	public final Var var;var620,21232
	public TheVarExpr(Var var){TheVarExpr622,21256
	public Object eval() {eval626,21307
	public void emit(C context, ObjExpr objx, GeneratorAdapter gen){emit630,21349
	public boolean hasJavaClass(){hasJavaClass636,21488
	public Class getJavaClass() {getJavaClass640,21539
	static class Parser implements IParser{Parser644,21594
		public Expr parse(C context, Object form) {parse645,21635
public static class KeywordExpr extends LiteralExpr{KeywordExpr655,21900
	public final Keyword k;k656,21953
	public KeywordExpr(Keyword k){KeywordExpr658,21979
	Object val(){val662,22029
	public Object eval() {eval666,22060
	public void emit(C context, ObjExpr objx, GeneratorAdapter gen){emit670,22100
	public boolean hasJavaClass(){hasJavaClass677,22242
	public Class getJavaClass() {getJavaClass681,22293
public static class ImportExpr implements Expr{ImportExpr686,22354
	public final String c;c687,22402
	final static Method forNameMethod = Method.getMethod("Class forName(String)");forNameMethod688,22426
	final static Method importClassMethod = Method.getMethod("Class importClass(Class)");importClassMethod689,22506
	final static Method derefMethod = Method.getMethod("Object deref()");derefMethod690,22593
	public ImportExpr(String c){ImportExpr692,22665
	public Object eval() {eval696,22713
	public void emit(C context, ObjExpr objx, GeneratorAdapter gen){emit702,22846
	public boolean hasJavaClass(){hasJavaClass713,23188
	public Class getJavaClass() {getJavaClass717,23240
	static class Parser implements IParser{Parser721,23345
		public Expr parse(C context, Object form) {parse722,23386
public static abstract class LiteralExpr implements Expr{LiteralExpr728,23494
	abstract Object val();val729,23552
	public Object eval(){eval731,23577
static interface AssignableExpr{AssignableExpr736,23622
	Object evalAssign(Expr val) ;evalAssign737,23655
	void emitAssign(C context, ObjExpr objx, GeneratorAdapter gen, Expr val);emitAssign739,23687
static public interface MaybePrimitiveExpr extends Expr{MaybePrimitiveExpr742,23765
	public boolean canEmitPrimitive();canEmitPrimitive743,23822
	public void emitUnboxed(C context, ObjExpr objx, GeneratorAdapter gen);emitUnboxed744,23858
static public abstract class HostExpr implements Expr, MaybePrimitiveExpr{HostExpr747,23934
	final static Type BOOLEAN_TYPE = Type.getType(Boolean.class);BOOLEAN_TYPE748,24009
	final static Type CHAR_TYPE = Type.getType(Character.class);CHAR_TYPE749,24072
	final static Type INTEGER_TYPE = Type.getType(Integer.class);INTEGER_TYPE750,24134
	final static Type LONG_TYPE = Type.getType(Long.class);LONG_TYPE751,24197
	final static Type FLOAT_TYPE = Type.getType(Float.class);FLOAT_TYPE752,24254
	final static Type DOUBLE_TYPE = Type.getType(Double.class);DOUBLE_TYPE753,24313
	final static Type SHORT_TYPE = Type.getType(Short.class);SHORT_TYPE754,24374
	final static Type BYTE_TYPE = Type.getType(Byte.class);BYTE_TYPE755,24433
	final static Type NUMBER_TYPE = Type.getType(Number.class);NUMBER_TYPE756,24490
	final static Method charValueMethod = Method.getMethod("char charValue()");charValueMethod758,24552
	final static Method booleanValueMethod = Method.getMethod("boolean booleanValue()");booleanValueMethod759,24629
	final static Method charValueOfMethod = Method.getMethod("Character valueOf(char)");charValueOfMethod761,24716
	final static Method intValueOfMethod = Method.getMethod("Integer valueOf(int)");intValueOfMethod762,24802
	final static Method longValueOfMethod = Method.getMethod("Long valueOf(long)");longValueOfMethod763,24884
	final static Method floatValueOfMethod = Method.getMethod("Float valueOf(float)");floatValueOfMethod764,24965
	final static Method doubleValueOfMethod = Method.getMethod("Double valueOf(double)");doubleValueOfMethod765,25049
	final static Method shortValueOfMethod = Method.getMethod("Short valueOf(short)");shortValueOfMethod766,25136
	final static Method byteValueOfMethod = Method.getMethod("Byte valueOf(byte)");byteValueOfMethod767,25220
	final static Method intValueMethod = Method.getMethod("int intValue()");intValueMethod769,25302
	final static Method longValueMethod = Method.getMethod("long longValue()");longValueMethod770,25376
	final static Method floatValueMethod = Method.getMethod("float floatValue()");floatValueMethod771,25453
	final static Method doubleValueMethod = Method.getMethod("double doubleValue()");doubleValueMethod772,25533
	final static Method byteValueMethod = Method.getMethod("byte byteValue()");byteValueMethod773,25616
	final static Method shortValueMethod = Method.getMethod("short shortValue()");shortValueMethod774,25693
	final static Method fromIntMethod = Method.getMethod("clojure.lang.Num from(int)");fromIntMethod776,25774
	final static Method fromLongMethod = Method.getMethod("clojure.lang.Num from(long)");fromLongMethod777,25859
	final static Method fromDoubleMethod = Method.getMethod("clojure.lang.Num from(double)");fromDoubleMethod778,25946
	public static void emitBoxReturn(ObjExpr objx, GeneratorAdapter gen, Class returnType){emitBoxReturn782,26044
	public static void emitUnboxArg(ObjExpr objx, GeneratorAdapter gen, Class paramType){emitUnboxArg833,27652
	static class Parser implements IParser{Parser897,29689
		public Expr parse(C context, Object frm) {parse898,29730
	static Class tagToClass(Object tag) {tagToClass1015,33658
static abstract class FieldExpr extends HostExpr{FieldExpr1064,35020
static class InstanceFieldExpr extends FieldExpr implements AssignableExpr{InstanceFieldExpr1067,35073
	public final Expr target;target1068,35149
	public final Class targetClass;targetClass1069,35176
	public final java.lang.reflect.Field field;field1070,35209
	public final String fieldName;fieldName1071,35254
	public final int line;line1072,35286
	public final int column;column1073,35310
	public final Symbol tag;tag1074,35336
	final static Method invokeNoArgInstanceMember = Method.getMethod("Object invokeNoArgInstanceMember(Object,String)");invokeNoArgInstanceMember1075,35362
	final static Method setInstanceFieldMethod = Method.getMethod("Object setInstanceField(Object,String,Object)");setInstanceFieldMethod1076,35480
	public InstanceFieldExpr(int line, int column, Expr target, String fieldName, Symbol tag) {InstanceFieldExpr1079,35595
	public Object eval() {eval1095,36227
	public boolean canEmitPrimitive(){canEmitPrimitive1099,36327
	public void emitUnboxed(C context, ObjExpr objx, GeneratorAdapter gen){emitUnboxed1104,36460
	public void emit(C context, ObjExpr objx, GeneratorAdapter gen){emit1116,36878
	public boolean hasJavaClass() {hasJavaClass1140,37539
	public Class getJavaClass() {getJavaClass1144,37615
	public Object evalAssign(Expr val) {evalAssign1148,37717
	public void emitAssign(C context, ObjExpr objx, GeneratorAdapter gen,emitAssign1152,37834
static class StaticFieldExpr extends FieldExpr implements AssignableExpr{StaticFieldExpr1176,38544
	public final String fieldName;fieldName1178,38645
	public final Class c;c1179,38677
	public final java.lang.reflect.Field field;field1180,38700
	public final Symbol tag;tag1181,38745
	final int line;line1184,38986
	final int column;column1185,39003
	public StaticFieldExpr(int line, int column, Class c, String fieldName, Symbol tag) {StaticFieldExpr1187,39023
	public Object eval() {eval1205,39408
	public boolean canEmitPrimitive(){canEmitPrimitive1209,39485
	public void emitUnboxed(C context, ObjExpr objx, GeneratorAdapter gen){emitUnboxed1213,39569
	public void emit(C context, ObjExpr objx, GeneratorAdapter gen){emit1218,39763
	public boolean hasJavaClass(){hasJavaClass1233,40199
	public Class getJavaClass() {getJavaClass1237,40250
	public Object evalAssign(Expr val) {evalAssign1243,40451
	public void emitAssign(C context, ObjExpr objx, GeneratorAdapter gen,emitAssign1247,40554
static Class maybePrimitiveType(Expr e){maybePrimitiveType1261,40931
static Class maybeJavaClass(Collection<Expr> exprs){maybeJavaClass1278,41247
static abstract class MethodExpr extends HostExpr{MethodExpr1303,41721
	static void emitArgsAsArray(IPersistentVector args, ObjExpr objx, GeneratorAdapter gen){emitArgsAsArray1304,41772
	public static void emitTypedArgs(ObjExpr objx, GeneratorAdapter gen, Class[] parameterTypes, IPersistentVector args){emitTypedArgs1316,42088
static class InstanceMethodExpr extends MethodExpr{InstanceMethodExpr1370,43765
	public final Expr target;target1371,43817
	public final String methodName;methodName1372,43844
	public final IPersistentVector args;args1373,43877
	public final String source;source1374,43915
	public final int line;line1375,43944
	public final int column;column1376,43968
	public final Symbol tag;tag1377,43994
	public final java.lang.reflect.Method method;method1378,44020
	final static Method invokeInstanceMethodMethod =invokeInstanceMethodMethod1380,44068
	public InstanceMethodExpr(String source, int line, int column, Symbol tag, Expr target, String methodName, IPersistentVector args)InstanceMethodExpr1384,44196
	public Object eval() {eval1435,45872
	public boolean canEmitPrimitive(){canEmitPrimitive1459,46504
	public void emitUnboxed(C context, ObjExpr objx, GeneratorAdapter gen){emitUnboxed1463,46613
	public void emit(C context, ObjExpr objx, GeneratorAdapter gen){emit1487,47436
	public boolean hasJavaClass(){hasJavaClass1525,48651
	public Class getJavaClass() {getJavaClass1529,48727
static class StaticMethodExpr extends MethodExpr{StaticMethodExpr1535,48839
	public final Class c;c1537,48916
	public final String methodName;methodName1538,48939
	public final IPersistentVector args;args1539,48972
	public final String source;source1540,49010
	public final int line;line1541,49039
	public final int column;column1542,49063
	public final java.lang.reflect.Method method;method1543,49089
	public final Symbol tag;tag1544,49136
	final static Method forNameMethod = Method.getMethod("Class forName(String)");forNameMethod1545,49162
	final static Method invokeStaticMethodMethod =invokeStaticMethodMethod1546,49242
	public StaticMethodExpr(String source, int line, int column, Symbol tag, Class c, String methodName, IPersistentVector args)StaticMethodExpr1550,49365
	public Object eval() {eval1586,50594
	public boolean canEmitPrimitive(){canEmitPrimitive1609,51174
	public boolean canEmitIntrinsicPredicate(){canEmitIntrinsicPredicate1613,51283
	public void emitIntrinsicPredicate(C context, ObjExpr objx, GeneratorAdapter gen, Label falseLabel){emitIntrinsicPredicate1617,51412
	public void emitUnboxed(C context, ObjExpr objx, GeneratorAdapter gen){emitUnboxed1636,52098
	public void emit(C context, ObjExpr objx, GeneratorAdapter gen){emit1669,53028
	public boolean hasJavaClass(){hasJavaClass1714,54344
	public Class getJavaClass() {getJavaClass1718,54420
static class UnresolvedVarExpr implements Expr{UnresolvedVarExpr1723,54531
	public final Symbol symbol;symbol1724,54579
	public UnresolvedVarExpr(Symbol symbol){UnresolvedVarExpr1726,54609
	public boolean hasJavaClass(){hasJavaClass1730,54679
	public Class getJavaClass() {getJavaClass1734,54731
	public void emit(C context, ObjExpr objx, GeneratorAdapter gen){emit1739,54848
	public Object eval() {eval1742,54918
static class NumberExpr extends LiteralExpr implements MaybePrimitiveExpr{NumberExpr1748,55030
	final Number n;n1749,55105
	public final int id;id1750,55122
	public NumberExpr(Number n){NumberExpr1752,55145
	Object val(){val1757,55226
	public void emit(C context, ObjExpr objx, GeneratorAdapter gen){emit1761,55257
	public boolean hasJavaClass() {hasJavaClass1770,55487
	public Class getJavaClass(){getJavaClass1774,55539
	public boolean canEmitPrimitive(){canEmitPrimitive1785,55825
	public void emitUnboxed(C context, ObjExpr objx, GeneratorAdapter gen){emitUnboxed1789,55880
	static public Expr parse(Number form){parse1798,56130
static class ConstantExpr extends LiteralExpr{ConstantExpr1808,56335
	public final Object v;v1811,56500
	public final int id;id1812,56524
	public ConstantExpr(Object v){ConstantExpr1814,56547
	Object val(){val1822,56761
	public void emit(C context, ObjExpr objx, GeneratorAdapter gen){emit1826,56792
	public boolean hasJavaClass(){hasJavaClass1841,57213
	public Class getJavaClass() {getJavaClass1846,57324
	static class Parser implements IParser{Parser1851,57443
		public Expr parse(C context, Object form){parse1852,57484
static class NilExpr extends LiteralExpr{NilExpr1873,58013
	Object val(){val1874,58055
	public void emit(C context, ObjExpr objx, GeneratorAdapter gen){emit1878,58089
	public boolean hasJavaClass(){hasJavaClass1884,58240
	public Class getJavaClass() {getJavaClass1888,58291
final static NilExpr NIL_EXPR = new NilExpr();NIL_EXPR1893,58343
static class BooleanExpr extends LiteralExpr{BooleanExpr1895,58391
	public final boolean val;val1896,58437
	public BooleanExpr(boolean val){BooleanExpr1899,58466
	Object val(){val1903,58522
	public void emit(C context, ObjExpr objx, GeneratorAdapter gen){emit1907,58569
	public boolean hasJavaClass(){hasJavaClass1918,58846
	public Class getJavaClass() {getJavaClass1922,58897
final static BooleanExpr TRUE_EXPR = new BooleanExpr(true);TRUE_EXPR1927,58958
final static BooleanExpr FALSE_EXPR = new BooleanExpr(false);FALSE_EXPR1928,59018
static class StringExpr extends LiteralExpr{StringExpr1930,59081
	public final String str;str1931,59126
	public StringExpr(String str){StringExpr1933,59153
	Object val(){val1937,59207
	public void emit(C context, ObjExpr objx, GeneratorAdapter gen){emit1941,59240
	public boolean hasJavaClass(){hasJavaClass1946,59357
	public Class getJavaClass() {getJavaClass1950,59408
static class MonitorEnterExpr extends UntypedExpr{MonitorEnterExpr1956,59469
	final Expr target;target1957,59520
	public MonitorEnterExpr(Expr target){MonitorEnterExpr1959,59541
	public Object eval() {eval1963,59608
	public void emit(C context, ObjExpr objx, GeneratorAdapter gen){emit1967,59707
	static class Parser implements IParser{Parser1973,59876
		public Expr parse(C context, Object form) {parse1974,59917
static class MonitorExitExpr extends UntypedExpr{MonitorExitExpr1980,60045
	final Expr target;target1981,60095
	public MonitorExitExpr(Expr target){MonitorExitExpr1983,60116
	public Object eval() {eval1987,60182
	public void emit(C context, ObjExpr objx, GeneratorAdapter gen){emit1991,60280
	static class Parser implements IParser{Parser1997,60448
		public Expr parse(C context, Object form) {parse1998,60489
public static class TryExpr implements Expr{TryExpr2005,60617
	public final Expr tryExpr;tryExpr2006,60662
	public final Expr finallyExpr;finallyExpr2007,60690
	public final PersistentVector catchExprs;catchExprs2008,60722
	public final int retLocal;retLocal2009,60765
	public final int finallyLocal;finallyLocal2010,60793
	public static class CatchClause{CatchClause2012,60826
		public final Class c;c2014,60888
		public final LocalBinding lb;lb2015,60912
		public final Expr handler;handler2016,60944
		Label label;label2017,60973
		Label endLabel;endLabel2018,60988
		public CatchClause(Class c, LocalBinding lb, Expr handler){CatchClause2021,61008
	public TryExpr(Expr tryExpr, PersistentVector catchExprs, Expr finallyExpr, int retLocal, int finallyLocal){TryExpr2028,61137
	public Object eval() {eval2036,61407
	public void emit(C context, ObjExpr objx, GeneratorAdapter gen){emit2040,61496
	public boolean hasJavaClass() {hasJavaClass2113,63940
	public Class getJavaClass() {getJavaClass2117,64010
	static class Parser implements IParser{Parser2121,64078
		public Expr parse(C context, Object frm) {parse2123,64120
static class ThrowExpr extends UntypedExpr{ThrowExpr2282,69718
	public final Expr excExpr;excExpr2283,69762
	public ThrowExpr(Expr excExpr){ThrowExpr2285,69791
	public Object eval() {eval2290,69855
	public void emit(C context, ObjExpr objx, GeneratorAdapter gen){emit2294,69934
	static class Parser implements IParser{Parser2300,70102
		public Expr parse(C context, Object form) {parse2301,70143
static public boolean subsumes(Class[] c1, Class[] c2){subsumes2310,70375
static int getMatchingParams(String methodName, ArrayList<Class[]> paramlists, IPersistentVector argexprs,getMatchingParams2329,70843
public static class NewExpr implements Expr{NewExpr2385,72438
	public final IPersistentVector args;args2386,72483
	public final Constructor ctor;ctor2387,72521
	public final Class c;c2388,72553
	final static Method invokeConstructorMethod =invokeConstructorMethod2389,72576
	final static Method forNameMethod = Method.getMethod("Class forName(String)");forNameMethod2392,72775
	public NewExpr(Class c, IPersistentVector args, int line, int column) {NewExpr2395,72857
	public Object eval() {eval2430,73928
	public void emit(C context, ObjExpr objx, GeneratorAdapter gen){emit2448,74339
	public boolean hasJavaClass(){hasJavaClass2478,75180
	public Class getJavaClass() {getJavaClass2482,75231
	static class Parser implements IParser{Parser2486,75278
		public Expr parse(C context, Object frm) {parse2487,75319
public static class MetaExpr implements Expr{MetaExpr2506,76047
	public final Expr expr;expr2507,76093
	public final Expr meta;meta2508,76118
	final static Type IOBJ_TYPE = Type.getType(IObj.class);IOBJ_TYPE2509,76143
	final static Method withMetaMethod = Method.getMethod("clojure.lang.IObj withMeta(clojure.lang.IPersistentMap)");withMetaMethod2510,76200
	public MetaExpr(Expr expr, Expr meta){MetaExpr2513,76317
	public Object eval() {eval2518,76401
	public void emit(C context, ObjExpr objx, GeneratorAdapter gen){emit2522,76499
	public boolean hasJavaClass() {hasJavaClass2534,76814
	public Class getJavaClass() {getJavaClass2538,76881
public static class IfExpr implements Expr, MaybePrimitiveExpr{IfExpr2543,76948
	public final Expr testExpr;testExpr2544,77012
	public final Expr thenExpr;thenExpr2545,77041
	public final Expr elseExpr;elseExpr2546,77070
	public final int line;line2547,77099
	public final int column;column2548,77123
	public IfExpr(int line, int column, Expr testExpr, Expr thenExpr, Expr elseExpr){IfExpr2551,77151
	public Object eval() {eval2559,77366
	public void emit(C context, ObjExpr objx, GeneratorAdapter gen){emit2566,77515
	public void emitUnboxed(C context, ObjExpr objx, GeneratorAdapter gen){emitUnboxed2570,77621
	public void doEmit(C context, ObjExpr objx, GeneratorAdapter gen, boolean emitUnboxed){doEmit2574,77734
	public boolean hasJavaClass() {hasJavaClass2620,79032
	public boolean canEmitPrimitive(){canEmitPrimitive2631,79499
	public Class getJavaClass() {getJavaClass2648,80006
	static class Parser implements IParser{Parser2655,80193
		public Expr parse(C context, Object frm) {parse2656,80234
static final public IPersistentMap CHAR_MAP =CHAR_MAP2691,81550
static public String munge(String name){munge2718,82057
public static class EmptyExpr implements Expr{EmptyExpr2731,82311
	public final Object coll;coll2732,82358
	final static Type HASHMAP_TYPE = Type.getType(PersistentArrayMap.class);HASHMAP_TYPE2733,82385
	final static Type HASHSET_TYPE = Type.getType(PersistentHashSet.class);HASHSET_TYPE2734,82459
	final static Type VECTOR_TYPE = Type.getType(PersistentVector.class);VECTOR_TYPE2735,82532
	final static Type LIST_TYPE = Type.getType(PersistentList.class);LIST_TYPE2736,82603
	final static Type EMPTY_LIST_TYPE = Type.getType(PersistentList.EmptyList.class);EMPTY_LIST_TYPE2737,82670
	public EmptyExpr(Object coll){EmptyExpr2740,82755
	public Object eval() {eval2744,82811
	public void emit(C context, ObjExpr objx, GeneratorAdapter gen){emit2748,82854
	public boolean hasJavaClass() {hasJavaClass2765,83448
	public Class getJavaClass() {getJavaClass2769,83500
public static class ListExpr implements Expr{ListExpr2783,83922
	public final IPersistentVector args;args2784,83968
	final static Method arrayToListMethod = Method.getMethod("clojure.lang.ISeq arrayToList(Object[])");arrayToListMethod2785,84006
	public ListExpr(IPersistentVector args){ListExpr2788,84110
	public Object eval() {eval2792,84176
	public void emit(C context, ObjExpr objx, GeneratorAdapter gen){emit2799,84382
	public boolean hasJavaClass() {hasJavaClass2806,84590
	public Class getJavaClass() {getJavaClass2810,84642
public static class MapExpr implements Expr{MapExpr2816,84712
	public final IPersistentVector keyvals;keyvals2817,84757
	final static Method mapMethod = Method.getMethod("clojure.lang.IPersistentMap map(Object[])");mapMethod2818,84798
	final static Method mapUniqueKeysMethod = Method.getMethod("clojure.lang.IPersistentMap mapUniqueKeys(Object[])");mapUniqueKeysMethod2819,84894
	public MapExpr(IPersistentVector keyvals){MapExpr2822,85012
	public Object eval() {eval2826,85086
	public void emit(C context, ObjExpr objx, GeneratorAdapter gen){emit2833,85269
	public boolean hasJavaClass() {hasJavaClass2860,86078
	public Class getJavaClass() {getJavaClass2864,86130
	static public Expr parse(C context, IPersistentMap form) {parse2869,86197
public static class SetExpr implements Expr{SetExpr2923,87893
	public final IPersistentVector keys;keys2924,87938
	final static Method setMethod = Method.getMethod("clojure.lang.IPersistentSet set(Object[])");setMethod2925,87976
	public SetExpr(IPersistentVector keys){SetExpr2928,88074
	public Object eval() {eval2932,88139
	public void emit(C context, ObjExpr objx, GeneratorAdapter gen){emit2939,88313
	public boolean hasJavaClass() {hasJavaClass2946,88513
	public Class getJavaClass() {getJavaClass2950,88565
	static public Expr parse(C context, IPersistentSet form) {parse2955,88632
public static class VectorExpr implements Expr{VectorExpr2987,89570
	public final IPersistentVector args;args2988,89618
	final static Method vectorMethod = Method.getMethod("clojure.lang.IPersistentVector vector(Object[])");vectorMethod2989,89656
	public VectorExpr(IPersistentVector args){VectorExpr2992,89763
	public Object eval() {eval2996,89831
	public void emit(C context, ObjExpr objx, GeneratorAdapter gen){emit3003,90031
	public boolean hasJavaClass() {hasJavaClass3010,90234
	public Class getJavaClass() {getJavaClass3014,90286
	static public Expr parse(C context, IPersistentVector form) {parse3018,90355
static class KeywordInvokeExpr implements Expr{KeywordInvokeExpr3050,91244
	public final KeywordExpr kw;kw3051,91292
	public final Object tag;tag3052,91322
	public final Expr target;target3053,91348
	public final int line;line3054,91375
	public final int column;column3055,91399
	public final int siteIndex;siteIndex3056,91425
	public final String source;source3057,91454
	static Type ILOOKUP_TYPE = Type.getType(ILookup.class);ILOOKUP_TYPE3058,91483
	public KeywordInvokeExpr(String source, int line, int column, Symbol tag, KeywordExpr kw, Expr target){KeywordInvokeExpr3060,91541
	public Object eval() {eval3070,91826
    public void emit(C context, ObjExpr objx, GeneratorAdapter gen){emit3084,92079
	public boolean hasJavaClass() {hasJavaClass3117,93838
	public Class getJavaClass() {getJavaClass3121,93897
public static class InstanceOfExpr implements Expr, MaybePrimitiveExpr{InstanceOfExpr3181,95381
	Expr expr;expr3182,95453
	Class c;c3183,95465
	public InstanceOfExpr(Class c, Expr expr){InstanceOfExpr3185,95476
	public Object eval() {eval3190,95558
	public boolean canEmitPrimitive(){canEmitPrimitive3196,95649
	public void emitUnboxed(C context, ObjExpr objx, GeneratorAdapter gen){emitUnboxed3200,95704
	public void emit(C context, ObjExpr objx, GeneratorAdapter gen){emit3205,95849
	public boolean hasJavaClass() {hasJavaClass3212,96044
	public Class getJavaClass() {getJavaClass3216,96096
static class StaticInvokeExpr implements Expr, MaybePrimitiveExpr{StaticInvokeExpr3222,96157
	public final Type target;target3223,96224
	public final Class retClass;retClass3224,96251
	public final Class[] paramclasses;paramclasses3225,96281
	public final Type[] paramtypes;paramtypes3226,96317
	public final IPersistentVector args;args3227,96350
	public final boolean variadic;variadic3228,96388
	public final Symbol tag;tag3229,96420
	StaticInvokeExpr(Type target, Class retClass, Class[] paramclasses, Type[] paramtypes, boolean variadic,StaticInvokeExpr3231,96447
	public Object eval() {eval3242,96797
	public void emit(C context, ObjExpr objx, GeneratorAdapter gen){emit3246,96899
	public boolean hasJavaClass() {hasJavaClass3259,97215
	public Class getJavaClass() {getJavaClass3263,97267
	public boolean canEmitPrimitive(){canEmitPrimitive3267,97362
	public void emitUnboxed(C context, ObjExpr objx, GeneratorAdapter gen){emitUnboxed3271,97435
	public static Expr parse(Var v, ISeq args, Symbol tag) {parse3309,98470
static class InvokeExpr implements Expr{InvokeExpr3379,100644
	public final Expr fexpr;fexpr3380,100685
	public final Object tag;tag3381,100711
	public final IPersistentVector args;args3382,100737
	public final int line;line3383,100775
	public final int column;column3384,100799
	public final String source;source3385,100825
	public boolean isProtocol = false;isProtocol3386,100854
	public boolean isDirect = false;isDirect3387,100890
	public int siteIndex = -1;siteIndex3388,100924
	public Class protocolOn;protocolOn3389,100952
	public java.lang.reflect.Method onMethod;onMethod3390,100978
	static Keyword onKey = Keyword.intern("on");onKey3391,101021
	static Keyword methodMapKey = Keyword.intern("method-map");methodMapKey3392,101067
	public InvokeExpr(String source, int line, int column, Symbol tag, Expr fexpr, IPersistentVector args) {InvokeExpr3394,101129
	public Object eval() {eval3451,103490
	public void emit(C context, ObjExpr objx, GeneratorAdapter gen){emit3469,103947
	public void emitProto(C context, ObjExpr objx, GeneratorAdapter gen){emitProto3486,104289
	void emitArgsAndCall(int firstArgToEmit, C context, ObjExpr objx, GeneratorAdapter gen){emitArgsAndCall3536,106015
	public boolean hasJavaClass() {hasJavaClass3562,106880
	public Class getJavaClass() {getJavaClass3566,106939
	static public Expr parse(C context, ISeq form) {parse3570,107009
static class SourceDebugExtensionAttribute extends Attribute{SourceDebugExtensionAttribute3634,109249
	public SourceDebugExtensionAttribute(){SourceDebugExtensionAttribute3635,109311
	void writeSMAP(ClassWriter cw, String smap){writeSMAP3639,109389
static public class FnExpr extends ObjExpr{FnExpr3645,109508
	final static Type aFnType = Type.getType(AFunction.class);aFnType3646,109552
	final static Type restFnType = Type.getType(RestFn.class);restFnType3647,109612
	FnMethod variadicMethod = null;variadicMethod3649,109749
	IPersistentCollection methods;methods3650,109782
	public FnExpr(Object tag){FnExpr3655,109900
	public boolean hasJavaClass() {hasJavaClass3659,109946
	boolean supportsMeta(){supportsMeta3663,109998
	public Class getJavaClass() {getJavaClass3667,110045
	protected void emitMethods(ClassVisitor cv){emitMethods3671,110106
	static Expr parse(C context, ISeq form, String name) {parse3693,110788
	public final ObjMethod variadicMethod(){variadicMethod3831,115718
	boolean isVariadic(){isVariadic3835,115789
	public final IPersistentCollection methods(){methods3839,115849
	public void emitForDefn(ObjExpr objx, GeneratorAdapter gen){emitForDefn3843,115918
static public class ObjExpr implements Expr{ObjExpr3860,116397
	static final String CONST_PREFIX = "const__";CONST_PREFIX3861,116442
	String name;name3862,116489
	String internalName;internalName3864,116525
	String thisName;thisName3865,116547
	Type objtype;objtype3866,116565
	public final Object tag;tag3867,116580
	IPersistentMap closes = PersistentHashMap.EMPTY;closes3869,116630
    IPersistentVector closesExprs = PersistentVector.EMPTY;closesExprs3871,116703
	IPersistentSet volatiles = PersistentHashSet.EMPTY;volatiles3873,116774
	IPersistentMap fields = null;fields3876,116842
	IPersistentVector hintedFields = PersistentVector.EMPTY;hintedFields3879,116891
	IPersistentMap keywords = PersistentHashMap.EMPTY;keywords3882,116974
	IPersistentMap vars = PersistentHashMap.EMPTY;vars3883,117026
	Class compiledClass;compiledClass3884,117074
	int line;line3885,117096
	int column;column3886,117107
	PersistentVector constants;constants3887,117120
	int constantsID;constantsID3888,117149
	int altCtorDrops = 0;altCtorDrops3889,117167
	IPersistentVector keywordCallsites;keywordCallsites3891,117191
	IPersistentVector protocolCallsites;protocolCallsites3892,117228
	IPersistentSet varCallsites;varCallsites3893,117266
	boolean onceOnly = false;onceOnly3894,117296
	Object src;src3896,117324
	final static Method voidctor = Method.getMethod("void <init>()");voidctor3898,117338
	protected IPersistentMap classMeta;classMeta3899,117405
	protected boolean isStatic;isStatic3900,117442
	public final String name(){name3902,117472
	public final String internalName(){internalName3910,117586
	public final String thisName(){thisName3914,117650
	public final Type objtype(){objtype3918,117706
	public final IPersistentMap closes(){closes3922,117758
	public final IPersistentMap keywords(){keywords3926,117818
	public final IPersistentMap vars(){vars3930,117882
	public final Class compiledClass(){compiledClass3934,117938
	public final int line(){line3938,118003
	public final int column(){column3942,118048
	public final PersistentVector constants(){constants3946,118097
	public final int constantsID(){constantsID3950,118165
	final static Method kwintern = Method.getMethod("clojure.lang.Keyword intern(String, String)");kwintern3954,118224
	final static Method symintern = Method.getMethod("clojure.lang.Symbol intern(String)");symintern3955,118321
	final static Method varintern =varintern3956,118410
	final static Type DYNAMIC_CLASSLOADER_TYPE = Type.getType(DynamicClassLoader.class);DYNAMIC_CLASSLOADER_TYPE3959,118534
	final static Method getClassMethod = Method.getMethod("Class getClass()");getClassMethod3960,118620
	final static Method getClassLoaderMethod = Method.getMethod("ClassLoader getClassLoader()");getClassLoaderMethod3961,118696
	final static Method getConstantsMethod = Method.getMethod("Object[] getConstants(int)");getConstantsMethod3962,118790
	final static Method readStringMethod = Method.getMethod("Object readString(String)");readStringMethod3963,118880
	final static Type ILOOKUP_SITE_TYPE = Type.getType(ILookupSite.class);ILOOKUP_SITE_TYPE3965,118968
	final static Type ILOOKUP_THUNK_TYPE = Type.getType(ILookupThunk.class);ILOOKUP_THUNK_TYPE3966,119040
	final static Type KEYWORD_LOOKUPSITE_TYPE = Type.getType(KeywordLookupSite.class);KEYWORD_LOOKUPSITE_TYPE3967,119114
	public ObjExpr(Object tag){ObjExpr3972,119262
	static String trimGenID(String name){trimGenID3976,119313
	Type[] ctorTypes(){ctorTypes3983,119434
	void compile(String superName, String[] interfaceNames, boolean oneTimeUse) throws IOException{compile3999,119919
	protected void emitStatics(ClassVisitor gen){emitStatics4379,132131
	protected void emitMethods(ClassVisitor gen){emitMethods4382,132182
	void emitListAsObjectArray(Object value, GeneratorAdapter gen){emitListAsObjectArray4385,132233
	void emitValue(Object value, GeneratorAdapter gen){emitValue4398,132547
	void emitConstants(GeneratorAdapter clinitgen){emitConstants4603,139494
	boolean isMutable(LocalBinding lb){isMutable4621,139879
	boolean isVolatile(LocalBinding lb){isVolatile4627,140093
	boolean isDeftype(){isDeftype4632,140275
	boolean supportsMeta(){supportsMeta4636,140326
	void emitClearCloses(GeneratorAdapter gen){emitClearCloses4639,140377
	synchronized Class getCompiledClass(){getCompiledClass4654,140764
	public Object eval() {eval4673,141213
	public void emitLetFnInits(GeneratorAdapter gen, ObjExpr objx, IPersistentSet letFnLocals){emitLetFnInits4686,141396
	public void emit(C context, ObjExpr objx, GeneratorAdapter gen){emit4713,142030
	public boolean hasJavaClass() {hasJavaClass4742,142886
	public Class getJavaClass() {getJavaClass4746,142938
	public void emitAssignLocal(GeneratorAdapter gen, LocalBinding lb,Expr val){emitAssignLocal4752,143084
	public void emitVar(GeneratorAdapter gen, Var var){emitVar4856,146311
	final static Method varGetMethod = Method.getMethod("Object get()");varGetMethod4862,146497
	final static Method varGetRawMethod = Method.getMethod("Object getRawRoot()");varGetRawMethod4863,146567
	public void emitVarValue(GeneratorAdapter gen, Var v){emitVarValue4865,146648
	public void emitKeyword(GeneratorAdapter gen, Keyword k){emitKeyword4879,146940
	public void emitConstant(GeneratorAdapter gen, int id){emitConstant4885,147136
	String constantName(int id){constantName4890,147260
	String siteName(int n){siteName4894,147322
	String siteNameStatic(int n){siteNameStatic4898,147376
	String thunkName(int n){thunkName4902,147440
	String cachedClassName(int n){cachedClassName4906,147496
	String cachedVarName(int n){cachedVarName4910,147565
	String cachedProtoFnName(int n){cachedProtoFnName4914,147630
	String cachedProtoImplName(int n){cachedProtoImplName4918,147704
	String varCallsiteName(int n){varCallsiteName4922,147782
	String thunkNameStatic(int n){thunkNameStatic4926,147852
	Type constantType(int id){constantType4930,147918
enum PATHTYPE {PATHTYPE4958,148737
static class PathNode{PathNode4962,148774
    final PATHTYPE type;type4963,148797
    final PathNode parent;parent4964,148822
    PathNode(PATHTYPE type, PathNode parent) {PathNode4966,148850
static PathNode clearPathRoot(){clearPathRoot4972,148962
enum PSTATE{PSTATE4976,149042
public static class FnMethod extends ObjMethod{FnMethod4980,149075
	PersistentVector reqParms = PersistentVector.EMPTY;reqParms4982,149153
	LocalBinding restParm = null;restParm4983,149206
	Type[] argtypes;argtypes4984,149237
	Class[] argclasses;argclasses4985,149255
	Class retClass;retClass4986,149276
	String prim ;prim4987,149293
	public FnMethod(ObjExpr objx, ObjMethod parent){FnMethod4989,149309
	static public char classChar(Object x){classChar4993,149386
	static public String primInterface(IPersistentVector arglist) {primInterface5008,149767
	static FnMethod parse(ObjExpr objx, ISeq form, boolean isStatic) {parse5022,150280
	public void emit(ObjExpr fn, ClassVisitor cv){emit5148,154695
	public void doEmitStatic(ObjExpr fn, ClassVisitor cv){doEmitStatic5157,154861
	public void doEmitPrim(ObjExpr fn, ClassVisitor cv){doEmitPrim5219,156651
	public void doEmit(ObjExpr fn, ClassVisitor cv){doEmit5283,158553
	public final PersistentVector reqParms(){reqParms5322,159685
	public final LocalBinding restParm(){restParm5326,159751
	boolean isVariadic(){isVariadic5330,159813
	int numParams(){numParams5334,159867
	String getMethodName(){getMethodName5338,159941
	Type getReturnType(){getReturnType5342,160013
	Type[] getArgTypes(){getArgTypes5348,160132
	void emitClearLocals(GeneratorAdapter gen){emitClearLocals5359,160408
abstract public static class ObjMethod{ObjMethod5387,161148
	public final ObjMethod parent;parent5390,161310
	IPersistentMap locals = null;locals5392,161372
	IPersistentMap indexlocals = null;indexlocals5394,161424
	Expr body = null;body5395,161460
	ObjExpr objx;objx5396,161479
	PersistentVector argLocals;argLocals5397,161494
	int maxLocal = 0;maxLocal5398,161523
	int line;line5399,161542
	int column;column5400,161553
	PersistentHashSet localsUsedInCatchFinally = PersistentHashSet.EMPTY;localsUsedInCatchFinally5401,161566
	protected IPersistentMap methodMeta;methodMeta5402,161637
	public final IPersistentMap locals(){locals5405,161677
	public final Expr body(){body5409,161737
	public final ObjExpr objx(){objx5413,161783
	public final PersistentVector argLocals(){argLocals5417,161832
	public final int maxLocal(){maxLocal5421,161900
	public final int line(){line5425,161953
	public final int column(){column5429,161998
	public ObjMethod(ObjExpr objx, ObjMethod parent){ObjMethod5433,162047
	static void emitBody(ObjExpr objx, GeneratorAdapter gen, Class retClass, Expr body) {emitBody5438,162146
	abstract int numParams();numParams5480,163405
	abstract String getMethodName();getMethodName5481,163432
	abstract Type getReturnType();getReturnType5482,163466
	abstract Type[] getArgTypes();getArgTypes5483,163498
	public void emit(ObjExpr fn, ClassVisitor cv){emit5485,163531
    void emitClearLocals(GeneratorAdapter gen){emitClearLocals5521,164658
	void emitClearLocalsOld(GeneratorAdapter gen){emitClearLocalsOld5524,164717
public static class LocalBinding{LocalBinding5558,165631
	public final Symbol sym;sym5559,165665
	public final Symbol tag;tag5560,165691
	public Expr init;init5561,165717
	public final int idx;idx5562,165736
	public final String name;name5563,165759
	public final boolean isArg;isArg5564,165786
    public final PathNode clearPathRoot;clearPathRoot5565,165815
	public boolean canBeCleared = !RT.booleanCast(getCompilerOption(disableLocalsClearingKey));canBeCleared5566,165856
	public boolean recurMistmatch = false;recurMistmatch5567,165949
    public LocalBinding(int num, Symbol sym, Symbol tag, Expr init, boolean isArg,PathNode clearPathRoot)LocalBinding5569,165990
	public boolean hasJavaClass() {hasJavaClass5582,166438
	public Class getJavaClass() {getJavaClass5591,166698
	public Class getPrimitiveType(){getPrimitiveType5596,166825
public static class LocalBindingExpr implements Expr, MaybePrimitiveExpr, AssignableExpr{LocalBindingExpr5601,166900
	public final LocalBinding b;b5602,166990
	public final Symbol tag;tag5603,167020
    public final PathNode clearPath;clearPath5605,167047
    public final PathNode clearRoot;clearRoot5606,167084
    public boolean shouldClear = false;shouldClear5607,167121
	public LocalBindingExpr(LocalBinding b, Symbol tag)LocalBindingExpr5610,167163
	public Object eval() {eval5649,168473
	public boolean canEmitPrimitive(){canEmitPrimitive5653,168565
	public void emitUnboxed(C context, ObjExpr objx, GeneratorAdapter gen){emitUnboxed5657,168644
	public void emit(C context, ObjExpr objx, GeneratorAdapter gen){emit5661,168754
	public Object evalAssign(Expr val) {evalAssign5666,168893
	public void emitAssign(C context, ObjExpr objx, GeneratorAdapter gen, Expr val){emitAssign5670,168999
	public boolean hasJavaClass() {hasJavaClass5676,169184
	public Class getJavaClass() {getJavaClass5680,169263
public static class BodyExpr implements Expr, MaybePrimitiveExpr{BodyExpr5689,169383
	PersistentVector exprs;exprs5690,169449
	public final PersistentVector exprs(){exprs5692,169475
	public BodyExpr(PersistentVector exprs){BodyExpr5696,169535
	static class Parser implements IParser{Parser5700,169603
		public Expr parse(C context, Object frms) {parse5701,169644
	public Object eval() {eval5721,170285
	public boolean canEmitPrimitive(){canEmitPrimitive5731,170423
	public void emitUnboxed(C context, ObjExpr objx, GeneratorAdapter gen){emitUnboxed5735,170569
	public void emit(C context, ObjExpr objx, GeneratorAdapter gen){emit5745,170888
	public boolean hasJavaClass() {hasJavaClass5755,171165
	public Class getJavaClass() {getJavaClass5759,171238
public static class BindingInit{BindingInit5768,171387
	LocalBinding binding;binding5769,171420
	Expr init;init5770,171443
	public final LocalBinding binding(){binding5772,171456
	public final Expr init(){init5776,171516
	public BindingInit(LocalBinding binding, Expr init){BindingInit5780,171562
public static class LetFnExpr implements Expr{LetFnExpr5786,171668
	public final PersistentVector bindingInits;bindingInits5787,171715
	public final Expr body;body5788,171760
	public LetFnExpr(PersistentVector bindingInits, Expr body){LetFnExpr5790,171786
	static class Parser implements IParser{Parser5795,171907
		public Expr parse(C context, Object frm) {parse5796,171948
	public Object eval() {eval5851,173919
	public void emit(C context, ObjExpr objx, GeneratorAdapter gen){emit5855,174011
	public boolean hasJavaClass() {hasJavaClass5902,175602
	public Class getJavaClass() {getJavaClass5906,175669
public static class LetExpr implements Expr, MaybePrimitiveExpr{LetExpr5911,175736
	public final PersistentVector bindingInits;bindingInits5912,175801
	public final Expr body;body5913,175846
	public final boolean isLoop;isLoop5914,175871
	public LetExpr(PersistentVector bindingInits, Expr body, boolean isLoop){LetExpr5916,175902
	static class Parser implements IParser{Parser5922,176061
		public Expr parse(C context, Object frm) {parse5923,176102
	public Object eval() {eval6037,180357
	public void emit(C context, ObjExpr objx, GeneratorAdapter gen){emit6041,180451
	public void emitUnboxed(C context, ObjExpr objx, GeneratorAdapter gen){emitUnboxed6045,180558
	public void doEmit(C context, ObjExpr objx, GeneratorAdapter gen, boolean emitUnboxed){doEmit6050,180672
	public boolean hasJavaClass() {hasJavaClass6108,182462
	public Class getJavaClass() {getJavaClass6112,182529
	public boolean canEmitPrimitive(){canEmitPrimitive6116,182594
public static class RecurExpr implements Expr, MaybePrimitiveExpr{RecurExpr6122,182731
	public final IPersistentVector args;args6123,182798
	public final IPersistentVector loopLocals;loopLocals6124,182836
	final int line;line6125,182880
	final int column;column6126,182897
	final String source;source6127,182916
	public RecurExpr(IPersistentVector loopLocals, IPersistentVector args, int line, int column, String source){RecurExpr6130,182940
	public Object eval() {eval6138,183174
	public void emit(C context, ObjExpr objx, GeneratorAdapter gen){emit6142,183265
	public boolean hasJavaClass() {hasJavaClass6222,185716
	public Class getJavaClass() {getJavaClass6226,185768
	static class Parser implements IParser{Parser6230,185825
		public Expr parse(C context, Object frm) {parse6231,185866
	public boolean canEmitPrimitive() {canEmitPrimitive6292,187961
	public void emitUnboxed(C context, ObjExpr objx, GeneratorAdapter gen) {emitUnboxed6296,188017
public static Expr analyze(C context, Object form) {analyze6321,188875
static public class CompilerException extends RuntimeException{CompilerException6386,190925
	final public String source;source6387,190989
	final public int line;line6389,191020
	public CompilerException(String source, int line, int column, Throwable cause){CompilerException6391,191045
	public String toString(){toString6397,191240
static public Var isMacro(Object op) {isMacro6402,191296
static public IFn isInline(Object op, int arity) {isInline6419,191776
public static boolean namesStaticMember(Symbol sym){namesStaticMember6442,192447
public static Object preserveTag(ISeq src, Object dst) {preserveTag6446,192556
public static Object macroexpand1(Object x) {macroexpand16455,192821
static Object macroexpand(Object form) {macroexpand6528,194912
static String errorMsg(String source, int line, int column, String s){errorMsg6577,196360
public static Object eval(Object form) {eval6581,196510
public static Object eval(Object form, boolean freshLoader) {eval6585,196580
static ISeq fwdPath(PathNode p1){fwdPath6709,200217
static PathNode commonPath(PathNode n1, PathNode n2){commonPath6716,200358
static void addAnnotation(Object visitor, IPersistentMap meta){addAnnotation6729,200698
static void addParameterAnnotation(Object visitor, IPersistentMap meta, int i){addParameterAnnotation6740,200921
static String destubClassName(String className){destubClassName6799,202523
static Type getType(Class c){getType6806,202736
static Object resolve(Symbol sym, boolean allowPrivate) {resolve6813,202952
static Object resolve(Symbol sym) {resolve6817,203064
static Namespace namespaceFor(Symbol sym){namespaceFor6821,203147
static Namespace namespaceFor(Namespace inns, Symbol sym){namespaceFor6825,203233
static public Object resolveIn(Namespace n, Symbol sym, boolean allowPrivate) {resolveIn6838,203564
static public Object maybeResolveIn(Namespace n, Symbol sym) {maybeResolveIn6882,204685
static Var lookupVar(Symbol sym, boolean internNew, boolean registerMacro) {lookupVar6911,205306
static Var lookupVar(Symbol sym, boolean internNew) {lookupVar6954,206361
static Namespace currentNS(){currentNS6971,206812
static void closeOver(LocalBinding b, ObjMethod method){closeOver6975,206888
static LocalBinding referenceLocal(Symbol sym) {referenceLocal6991,207304
public static Object loadFile(String file) throws IOException{loadFile7012,207797
public static Object load(Reader rdr) {load7028,208133
public static Object load(Reader rdr, String sourcePath, String sourceName) {load7032,208219
static public void writeClassFile(String internalName, byte[] bytecode) throws IOException{writeClassFile7080,209832
public static void pushNS(){pushNS7107,210495
public static void pushNSandLoader(ClassLoader loader){pushNSandLoader7112,210723
public static ILookupThunk getLookupThunk(Object target, Keyword k){getLookupThunk7121,211112
static void compile1(GeneratorAdapter gen, ObjExpr objx, Object form) {compile17125,211273
public static Object compile(Reader rdr, String sourcePath, String sourceName) throws IOException{compile7162,212341
static public class NewInstanceExpr extends ObjExpr{NewInstanceExpr7323,218122
	IPersistentCollection methods;methods7325,218232
	Map<IPersistentVector,java.lang.reflect.Method> mmap;mmap7327,218265
	Map<IPersistentVector,Set<Class>> covariants;covariants7328,218320
	public NewInstanceExpr(Object tag){NewInstanceExpr7330,218368
	static class DeftypeParser implements IParser{DeftypeParser7334,218423
		public Expr parse(C context, final Object frm) {parse7335,218471
	static class ReifyParser implements IParser{ReifyParser7358,219331
	public Expr parse(C context, Object frm) {parse7359,219377
	static ObjExpr build(IPersistentVector interfaceSyms, IPersistentVector fieldSyms, Symbol thisSym,build7386,220307
	static Class compileStub(String superName, NewInstanceExpr ret, String[] interfaceNames, Object frm){compileStub7511,224723
	static String[] interfaceNames(IPersistentVector interfaces){interfaceNames7579,227294
	static String slashname(Class c){slashname7588,227547
	protected void emitStatics(ClassVisitor cv) {emitStatics7592,227626
	protected void emitMethods(ClassVisitor cv){emitMethods7669,230348
	static public IPersistentVector msig(java.lang.reflect.Method m){msig7709,231644
	static void considerMethod(java.lang.reflect.Method m, Map mm){considerMethod7713,231797
	static void gatherMethods(Class c, Map mm){gatherMethods7726,232120
	static public Map[] gatherMethods(Class sc, ISeq interfaces){gatherMethods7736,232387
public static class NewInstanceMethod extends ObjMethod{NewInstanceMethod7774,233552
	String name;name7775,233609
	Type[] argTypes;argTypes7776,233623
	Type retType;retType7777,233641
	Class retClass;retClass7778,233656
	Class[] exclasses;exclasses7779,233673
	static Symbol dummyThis = Symbol.intern(null,"dummy_this_dlskjsdfower");dummyThis7781,233694
	public NewInstanceMethod(ObjExpr objx, ObjMethod parent){NewInstanceMethod7784,233803
	int numParams(){numParams7788,233889
	String getMethodName(){getMethodName7792,233939
	Type getReturnType(){getReturnType7796,233983
	Type[] getArgTypes(){getArgTypes7800,234028
	static public IPersistentVector msig(String name,Class[] paramTypes){msig7806,234076
	static NewInstanceMethod parse(ObjExpr objx, ISeq form, Symbol thistag,parse7810,234196
	public void emit(ObjExpr obj, ClassVisitor cv){emit7968,239792
	static Class primClass(Symbol sym){primClass8022,241291
	static Class tagClass(Object tag) {tagClass8047,241889
	static Class primClass(Class c){primClass8058,242111
	static Class boxClass(Class p) {boxClass8062,242190
static public class MethodParamExpr implements Expr, MaybePrimitiveExpr{MethodParamExpr8088,242682
	final Class c;c8089,242755
	public MethodParamExpr(Class c){MethodParamExpr8091,242772
	public Object eval() {eval8095,242824
	public void emit(C context, ObjExpr objx, GeneratorAdapter gen){emit8099,242897
	public boolean hasJavaClass() {hasJavaClass8103,243012
	public Class getJavaClass() {getJavaClass8107,243069
	public boolean canEmitPrimitive(){canEmitPrimitive8111,243116
	public void emitUnboxed(C context, ObjExpr objx, GeneratorAdapter gen){emitUnboxed8115,243186
public static class CaseExpr implements Expr, MaybePrimitiveExpr{CaseExpr8120,243310
	public final LocalBindingExpr expr;expr8121,243376
	public final int shift, mask, low, high;shift8122,243413
	public final int shift, mask, low, high;mask8122,243413
	public final int shift, mask, low, high;low8122,243413
	public final int shift, mask, low, high;high8122,243413
	public final Expr defaultExpr;defaultExpr8123,243455
	public final SortedMap<Integer,Expr> tests;tests8124,243487
	public final HashMap<Integer,Expr> thens;thens8125,243532
	public final Keyword switchType;switchType8126,243575
	public final Keyword testType;testType8127,243609
	public final Set<Integer> skipCheck;skipCheck8128,243641
	public final Class returnType;returnType8129,243679
	public final int line;line8130,243711
	public final int column;column8131,243735
	final static Type NUMBER_TYPE = Type.getType(Number.class);NUMBER_TYPE8133,243762
	final static Method intValueMethod = Method.getMethod("int intValue()");intValueMethod8134,243823
	final static Method hashMethod = Method.getMethod("int hash(Object)");hashMethod8136,243898
	final static Method hashCodeMethod = Method.getMethod("int hashCode()");hashCodeMethod8137,243970
	final static Method equivMethod = Method.getMethod("boolean equiv(Object, Object)");equivMethod8138,244044
    final static Keyword compactKey = Keyword.intern(null, "compact");compactKey8139,244130
    final static Keyword sparseKey = Keyword.intern(null, "sparse");sparseKey8140,244201
    final static Keyword hashIdentityKey = Keyword.intern(null, "hash-identity");hashIdentityKey8141,244270
    final static Keyword hashEquivKey = Keyword.intern(null, "hash-equiv");hashEquivKey8142,244352
    final static Keyword intKey = Keyword.intern(null, "int");intKey8143,244428
	public CaseExpr(int line, int column, LocalBindingExpr expr, int shift, int mask, int low, int high, Expr defaultExpr,CaseExpr8145,244585
	public boolean hasJavaClass(){hasJavaClass8175,245963
	public boolean canEmitPrimitive(){canEmitPrimitive8179,246031
	public Class getJavaClass(){getJavaClass8183,246109
	public Object eval() {eval8187,246167
    public void emit(C context, ObjExpr objx, GeneratorAdapter gen){emit8191,246257
    public void emitUnboxed(C context, ObjExpr objx, GeneratorAdapter gen){emitUnboxed8195,246376
	public void doEmit(C context, ObjExpr objx, GeneratorAdapter gen, boolean emitUnboxed){doEmit8199,246501
	static class Parser implements IParser{Parser8366,252357
		public Expr parse(C context, Object frm) {parse8371,252655
static IPersistentCollection emptyVarCallSites(){return PersistentHashSet.EMPTY;}emptyVarCallSites8438,255257

/home/bronsa/src/clojure/src/jvm/clojure/lang/XMLHandler.java,1239
package clojure.lang;clojure.lang13,505
public class XMLHandler extends DefaultHandler{XMLHandler21,699
ContentHandler h;h22,747
public XMLHandler(ContentHandler h){XMLHandler25,767
public void setDocumentLocator(Locator locator){setDocumentLocator29,820
public void startDocument() throws SAXException{startDocument33,904
public void endDocument() throws SAXException{endDocument37,976
public void startPrefixMapping(String prefix, String uri) throws SAXException{startPrefixMapping41,1044
public void endPrefixMapping(String prefix) throws SAXException{endPrefixMapping45,1162
public void startElement(String uri, String localName, String qName, Attributes atts) throws SAXException{startElement49,1259
public void endElement(String uri, String localName, String qName) throws SAXException{endElement53,1415
public void characters(char ch[], int start, int length) throws SAXException{characters57,1544
public void ignorableWhitespace(char ch[], int start, int length) throws SAXException{ignorableWhitespace61,1659
public void processingInstruction(String target, String data) throws SAXException{processingInstruction65,1792
public void skippedEntity(String name) throws SAXException{skippedEntity69,1918

/home/bronsa/src/clojure/src/jvm/clojure/lang/IHashEq.java,111
package clojure.lang;clojure.lang13,501
public interface IHashEq{IHashEq15,524
int hasheq();hasheq16,550

/home/bronsa/src/clojure/src/jvm/clojure/lang/Namespace.java,1836
package clojure.lang;clojure.lang13,505
public class Namespace extends AReference implements Serializable {Namespace20,695
final public Symbol name;name21,763
transient final AtomicReference<IPersistentMap> mappings = new AtomicReference<IPersistentMap>();mappings22,789
transient final AtomicReference<IPersistentMap> aliases = new AtomicReference<IPersistentMap>();aliases23,887
final static ConcurrentHashMap<Symbol, Namespace> namespaces = new ConcurrentHashMap<Symbol, Namespace>();namespaces25,985
public String toString(){toString27,1093
Namespace(Symbol name){Namespace31,1147
public static ISeq all(){all38,1273
public Symbol getName(){getName42,1339
public IPersistentMap getMappings(){getMappings46,1381
public Var intern(Symbol sym){intern50,1445
Object reference(Symbol sym, Object val){reference94,2550
public static boolean areDifferentInstancesOfSameClassName(Class cls1, Class cls2) {areDifferentInstancesOfSameClassName119,3065
Class referenceClass(Symbol sym, Class val){referenceClass123,3223
public void unmap(Symbol sym) {unmap143,3869
public Class importClass(Symbol sym, Class c){importClass157,4195
public Class importClass(Class c){importClass162,4278
public Var refer(Symbol sym, Var var){refer167,4417
public static Namespace findOrCreate(Symbol name){findOrCreate172,4495
public static Namespace remove(Symbol name){remove181,4732
public static Namespace find(Symbol name){find187,4923
public Object getMapping(Symbol name){getMapping191,4999
public Var findInternedVar(Symbol symbol){findInternedVar195,5077
public IPersistentMap getAliases(){getAliases203,5257
public Namespace lookupAlias(Symbol alias){lookupAlias207,5319
public void addAlias(Symbol alias, Namespace ns){addAlias212,5440
public void removeAlias(Symbol alias) {removeAlias228,6051

/home/bronsa/src/clojure/src/jvm/clojure/lang/Ratio.java,839
package clojure.lang;clojure.lang13,505
public class Ratio extends Number implements Comparable{Ratio19,617
final public BigInteger numerator;numerator20,674
final public BigInteger denominator;denominator21,709
public Ratio(BigInteger numerator, BigInteger denominator){Ratio23,747
public boolean equals(Object arg0){equals28,872
public int hashCode(){hashCode35,1078
public String toString(){toString39,1159
public int intValue(){intValue43,1249
public long longValue(){longValue47,1304
public float floatValue(){floatValue51,1371
public double doubleValue(){doubleValue55,1431
public BigDecimal decimalValue(){decimalValue59,1522
public BigDecimal decimalValue(MathContext mc){decimalValue63,1604
public BigInteger bigIntegerValue(){bigIntegerValue70,1815
public int compareTo(Object o){compareTo74,1894

/home/bronsa/src/clojure/src/jvm/clojure/lang/IteratorSeq.java,601
package clojure.lang;clojure.lang11,490
public class IteratorSeq extends ASeq{IteratorSeq17,616
final Iterator iter;iter18,656
final State state;state19,678
    static class State{State21,700
	volatile Object val;val22,725
	volatile Object _rest;_rest23,748
public static IteratorSeq create(Iterator iter){create26,778
IteratorSeq(Iterator iter){IteratorSeq32,902
IteratorSeq(IPersistentMap meta, Iterator iter, State state){IteratorSeq39,1033
public Object first(){first45,1158
public ISeq next(){next55,1324
public IteratorSeq withMeta(IPersistentMap meta){withMeta68,1531

/home/bronsa/src/clojure/src/jvm/clojure/lang/Util.java,2354
package clojure.lang;clojure.lang13,505
public class Util{Util23,761
static public boolean equiv(Object k1, Object k2){equiv24,780
public interface EquivPred{EquivPred38,1138
    boolean equiv(Object k1, Object k2);equiv39,1166
static EquivPred equivNull = new EquivPred() {equivNull42,1210
static EquivPred equivEquals = new EquivPred(){equivEquals48,1359
static EquivPred equivNumber = new EquivPred(){equivNumber54,1512
static EquivPred equivColl = new EquivPred(){equivColl62,1758
static public EquivPred equivPred(Object k1){equivPred70,2040
static public boolean equiv(long k1, long k2){equiv82,2394
static public boolean equiv(Object k1, long k2){equiv86,2462
static public boolean equiv(long k1, Object k2){equiv90,2545
static public boolean equiv(double k1, double k2){equiv94,2628
static public boolean equiv(Object k1, double k2){equiv98,2700
static public boolean equiv(double k1, Object k2){equiv102,2785
static public boolean equiv(boolean k1, boolean k2){equiv106,2870
static public boolean equiv(Object k1, boolean k2){equiv110,2944
static public boolean equiv(boolean k1, Object k2){equiv114,3030
static public boolean equiv(char c1, char c2) {equiv118,3116
static public boolean pcequiv(Object k1, Object k2){pcequiv122,3188
static public boolean equals(Object k1, Object k2){equals128,3380
static public boolean identical(Object k1, Object k2){identical134,3501
static public Class classOf(Object x){classOf138,3577
static public int compare(Object k1, Object k2){compare144,3671
static public int hash(Object o){hash158,3937
public static int hasheq(Object o){hasheq164,4023
static public int hashCombine(int seed, int hash){hashCombine178,4295
static public boolean isPrimitive(Class c){isPrimitive184,4433
static public boolean isInteger(Object x){isInteger188,4539
static public Object ret1(Object ret, Object nil){ret1195,4701
static public ISeq ret1(ISeq ret, Object nil){ret1199,4769
static public <K,V> void clearCache(ReferenceQueue rq, ConcurrentHashMap<K, Reference<V>> cache){clearCache203,4833
static public RuntimeException runtimeException(String s){runtimeException218,5211
static public RuntimeException runtimeException(String s, Throwable e){runtimeException222,5306
static public RuntimeException sneakyThrow(Throwable t) {sneakyThrow232,5592

/home/bronsa/src/clojure/src/jvm/clojure/lang/Range.java,544
package clojure.lang;clojure.lang13,504
public class Range extends ASeq implements IReduce, Counted{Range15,527
final int end;end16,588
final int n;n17,603
public Range(int start, int end){Range19,617
public Range(IPersistentMap meta, int start, int end){Range24,688
public Obj withMeta(IPersistentMap meta){withMeta30,794
public Object first(){first36,909
public ISeq next(){next40,946
public Object reduce(IFn f) {reduce46,1037
public Object reduce(IFn f, Object start) {reduce53,1156
public int count() {count60,1305

/home/bronsa/src/clojure/src/jvm/clojure/lang/ASeq.java,1928
package clojure.lang;clojure.lang11,480
public abstract class ASeq extends Obj implements ISeq, Sequential, List, Serializable, IHashEq {ASeq16,553
transient int _hash = -1;_hash17,651
transient int _hasheq = -1;_hasheq18,677
public String toString(){toString20,706
public IPersistentCollection empty(){empty24,765
protected ASeq(IPersistentMap meta){ASeq28,836
protected ASeq(){ASeq33,891
public boolean equiv(Object obj){equiv36,912
public boolean equals(Object obj){equals50,1210
public int hashCode(){hashCode64,1539
public int hasheq(){hasheq77,1769
public int count(){count113,2442
final public ISeq seq(){seq121,2592
public ISeq cons(Object o){cons125,2634
public ISeq more(){more129,2692
public Object[] toArray(){toArray145,2969
public boolean add(Object o){add149,3029
public boolean remove(Object o){remove153,3106
public boolean addAll(Collection c){addAll157,3186
public void clear(){clear161,3270
public boolean retainAll(Collection c){retainAll165,3338
public boolean removeAll(Collection c){removeAll169,3425
public boolean containsAll(Collection c){containsAll173,3512
public Object[] toArray(Object[] a){toArray182,3634
public int size(){size186,3716
public boolean isEmpty(){isEmpty190,3755
public boolean contains(Object o){contains194,3807
public Iterator iterator(){iterator204,3962
public List subList(int fromIndex, int toIndex){subList215,4152
public Object set(int index, Object element){set219,4249
public Object remove(int index){remove223,4342
public int indexOf(Object o){indexOf227,4422
public int lastIndexOf(Object o){lastIndexOf237,4582
public ListIterator listIterator(){listIterator241,4651
public ListIterator listIterator(int index){listIterator245,4722
public Object get(int index){get249,4807
public void add(int index, Object element){add253,4869
public boolean addAll(int index, Collection c){addAll257,4960

/home/bronsa/src/clojure/src/jvm/clojure/lang/Sorted.java,271
package clojure.lang;clojure.lang13,505
public interface Sorted{Sorted17,558
Comparator comparator();comparator18,583
Object entryKey(Object entry);entryKey20,609
ISeq seq(boolean ascending);seq22,641
ISeq seqFrom(Object key, boolean ascending);seqFrom24,671

/home/bronsa/src/clojure/src/jvm/clojure/lang/Repl.java,127
package clojure.lang;clojure.lang13,505
public class Repl {Repl17,550
public static void main(String[] args) {main19,571

/home/bronsa/src/clojure/src/jvm/clojure/lang/ITransientAssociative.java,215
package clojure.lang;clojure.lang13,505
public interface ITransientAssociative extends ITransientCollection, ILookup{ITransientAssociative15,528
ITransientAssociative assoc(Object key, Object val);assoc17,607

/home/bronsa/src/clojure/src/jvm/clojure/lang/AMapEntry.java,509
package clojure.lang;clojure.lang13,504
public abstract class AMapEntry extends APersistentVector implements IMapEntry{AMapEntry17,557
public Object nth(int i){nth19,638
public IPersistentVector assocN(int i, Object val){assocN32,875
public int count(){count36,965
public ISeq seq(){seq40,999
public IPersistentVector cons(Object o){cons44,1047
public IPersistentCollection empty(){empty48,1119
public IPersistentStack pop(){pop52,1174
public Object setValue(Object value){setValue56,1260

/home/bronsa/src/clojure/src/jvm/clojure/lang/ATransientMap.java,1049
package clojure.lang;clojure.lang11,480
abstract class ATransientMap extends AFn implements ITransientMap {ATransientMap17,572
	abstract void ensureEditable();ensureEditable18,640
	abstract ITransientMap doAssoc(Object key, Object val);doAssoc19,673
	abstract ITransientMap doWithout(Object key);doWithout20,730
	abstract Object doValAt(Object key, Object notFound);doValAt21,777
	abstract int doCount();doCount22,832
	abstract IPersistentMap doPersistent();doPersistent23,857
	public ITransientMap conj(Object o) {conj25,899
	public final Object invoke(Object arg1) {invoke50,1516
	public final Object invoke(Object arg1, Object notFound) {invoke54,1585
	public final Object valAt(Object key) {valAt58,1681
	public final ITransientMap assoc(Object key, Object val) {assoc62,1753
	public final ITransientMap without(Object key) {without67,1865
	public final IPersistentMap persistent() {persistent72,1964
	public final Object valAt(Object key, Object notFound) {valAt77,2057
	public final int count() {count82,2172

/home/bronsa/src/clojure/src/jvm/clojure/lang/LineNumberingPushbackReader.java,644
package clojure.lang;clojure.lang11,475
public class LineNumberingPushbackReader extends PushbackReader{LineNumberingPushbackReader19,623
public LineNumberingPushbackReader(Reader r){LineNumberingPushbackReader32,1067
public LineNumberingPushbackReader(Reader r, int size){LineNumberingPushbackReader36,1153
public int getLineNumber(){getLineNumber40,1251
public int getColumnNumber(){getColumnNumber44,1339
public int read() throws IOException{read48,1395
public void unread(int c) throws IOException{unread64,1704
public String readLine() throws IOException{readLine70,1826
public boolean atLineStart(){atLineStart92,2340

/home/bronsa/src/clojure/src/jvm/clojure/lang/ITransientCollection.java,214
package clojure.lang;clojure.lang13,505
public interface ITransientCollection{ITransientCollection15,528
ITransientCollection conj(Object val);conj17,568
IPersistentCollection persistent();persistent19,608

/home/bronsa/src/clojure/src/jvm/clojure/lang/ISeq.java,220
package clojure.lang;clojure.lang11,475
public interface ISeq extends IPersistentCollection {ISeq19,669
Object first();first21,725
ISeq next();next23,744
ISeq more();more25,760
ISeq cons(Object o);cons27,776

/home/bronsa/src/clojure/src/jvm/clojure/lang/Counted.java,111
package clojure.lang;clojure.lang1,0
public interface Counted {Counted16,602
    int count();count17,629

/home/bronsa/src/clojure/src/jvm/clojure/lang/MapEquivalence.java,97
package clojure.lang;clojure.lang13,504
public interface MapEquivalence{MapEquivalence16,546

/home/bronsa/src/clojure/src/jvm/clojure/lang/IPersistentVector.java,304
package clojure.lang;clojure.lang1,0
public interface IPersistentVector extends Associative, Sequential, IPersistentStack, Reversible, Indexed{IPersistentVector13,500
int length();length14,608
IPersistentVector assocN(int i, Object val);assocN16,625
IPersistentVector cons(Object o);cons18,673

/home/bronsa/src/clojure/src/jvm/clojure/lang/Script.java,131
package clojure.lang;clojure.lang13,505
public class Script {Script17,550
public static void main(String[] args) {main19,573

/home/bronsa/src/clojure/src/jvm/clojure/lang/AFn.java,2802
package clojure.lang;clojure.lang13,516
public abstract class AFn implements IFn {AFn15,539
public Object call() {call17,583
public void run(){run21,627
public Object invoke() {invoke34,733
public Object invoke(Object arg1) {invoke38,784
public Object invoke(Object arg1, Object arg2) {invoke42,846
public Object invoke(Object arg1, Object arg2, Object arg3) {invoke46,921
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4) {invoke50,1009
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5) {invoke54,1110
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6) {invoke58,1224
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7)invoke62,1351
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke67,1493
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke72,1667
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke77,1854
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke82,2056
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke87,2272
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke92,2502
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke98,2748
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke104,3008
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke110,3301
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke116,3608
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke122,3929
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke128,4264
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke134,4613
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke142,4979
public Object applyTo(ISeq arglist) {applyTo150,5381
static public Object applyToHelper(IFn ifn, ISeq arglist) {applyToHelper154,5486
public Object throwArity(int n){throwArity434,16127

/home/bronsa/src/clojure/src/jvm/clojure/lang/Var.java,6721
package clojure.lang;clojure.lang13,505
public final class Var extends ARef implements IFn, IRef, Settable{Var18,580
static class TBox{TBox20,649
volatile Object val;val22,669
final Thread thread;thread23,690
public TBox(Thread t, Object val){TBox25,712
static public class Unbound extends AFn{Unbound31,787
	final public Var v;v32,828
	public Unbound(Var v){Unbound34,850
	public String toString(){toString38,892
	public Object throwArity(int n){throwArity42,949
static class Frame{Frame47,1063
	Associative bindings;bindings49,1096
	Frame prev;prev52,1161
	public Frame(){Frame55,1176
	public Frame(Associative bindings, Frame prev){Frame59,1236
    	protected Object clone() {clone65,1377
static final ThreadLocal<Frame> dvals = new ThreadLocal<Frame>(){dvals73,1487
static public volatile int rev = 0;rev80,1616
static Keyword privateKey = Keyword.intern(null, "private");privateKey82,1653
static IPersistentMap privateMeta = new PersistentArrayMap(new Object[]{privateKey, Boolean.TRUE});privateMeta83,1714
static Keyword macroKey = Keyword.intern(null, "macro");macroKey84,1814
static Keyword nameKey = Keyword.intern(null, "name");nameKey85,1871
static Keyword nsKey = Keyword.intern(null, "ns");nsKey86,1926
volatile Object root;root89,2033
volatile boolean dynamic = false;dynamic91,2056
transient final AtomicBoolean threadBound;threadBound92,2090
public final Symbol sym;sym93,2133
public final Namespace ns;ns94,2158
public static Object getThreadBindingFrame(){getThreadBindingFrame98,2211
public static Object cloneThreadBindingFrame(){cloneThreadBindingFrame105,2332
public static void resetThreadBindingFrame(Object frame){resetThreadBindingFrame112,2463
public Var setDynamic(){setDynamic116,2551
public Var setDynamic(boolean b){setDynamic121,2615
public final boolean isDynamic(){isDynamic126,2685
public static Var intern(Namespace ns, Symbol sym, Object root){intern130,2739
public static Var intern(Namespace ns, Symbol sym, Object root, boolean replaceRoot){intern134,2844
public String toString(){toString142,3039
public static Var find(Symbol nsQualifiedSym){find148,3195
public static Var intern(Symbol nsName, Symbol sym){intern157,3579
public static Var internPrivate(String nsName, String sym){internPrivate162,3708
public static Var intern(Namespace ns, Symbol sym){intern169,3917
public static Var create(){create174,3997
public static Var create(Object root){create178,4057
Var(Namespace ns, Symbol sym){Var182,4134
Var(Namespace ns, Symbol sym, Object root){Var190,4313
public boolean isBound(){isBound196,4403
final public Object get(){get200,4516
final public Object deref(){deref206,4602
public void setValidator(IFn vf){setValidator213,4709
public Object alter(IFn fn, ISeq args) {alter219,4800
public Object set(Object val){set224,4900
public Object doSet(Object val)  {doSet236,5291
public Object doReset(Object val)  {doReset240,5354
public void setMeta(IPersistentMap m) {setMeta245,5433
public void setMacro() {setMacro250,5561
public boolean isMacro(){isMacro261,5747
public boolean isPublic(){isPublic269,5914
final public Object getRawRoot(){getRawRoot273,5995
public Object getTag(){getTag277,6047
public void setTag(Symbol tag) {setTag281,6108
final public boolean hasRoot(){hasRoot292,6303
synchronized public void bindRoot(Object root){bindRoot297,6414
synchronized void swapRoot(Object root){swapRoot313,6745
synchronized public void unbindRoot(){unbindRoot321,6911
synchronized public void commuteRoot(IFn fn) {commuteRoot326,6993
synchronized public Object alterRoot(IFn fn, ISeq args) {alterRoot335,7204
public static void pushThreadBindings(Associative bindings){pushThreadBindings345,7459
public static void popThreadBindings(){popThreadBindings361,8008
public static Associative getThreadBindings(){getThreadBindings368,8179
public final TBox getThreadBinding(){getThreadBinding381,8503
final public IFn fn(){fn391,8683
public Object call() {call395,8732
public void run(){run399,8776
public Object invoke() {invoke410,8880
public Object invoke(Object arg1) {invoke414,8931
public Object invoke(Object arg1, Object arg2) {invoke418,8997
public Object invoke(Object arg1, Object arg2, Object arg3) {invoke422,9082
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4) {invoke426,9186
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5) {invoke430,9309
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6) {invoke434,9451
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7)invoke438,9612
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke443,9794
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke448,10014
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke453,10253
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke458,10513
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke463,10794
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke468,11096
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke474,11421
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke480,11767
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke486,12153
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke493,12580
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke500,13028
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke507,13497
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke514,13987
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke522,14500
public Object applyTo(ISeq arglist) {applyTo531,15056
static IFn assoc = new AFn(){assoc535,15139
static IFn dissoc = new AFn() {dissoc541,15284

/home/bronsa/src/clojure/src/jvm/clojure/lang/Binding.java,236
package clojure.lang;clojure.lang11,490
public class Binding<T>{Binding13,515
public T val;val14,541
public final Binding rest;rest15,556
public Binding(T val){Binding17,586
public Binding(T val, Binding rest){Binding22,653

/home/bronsa/src/clojure/src/jvm/clojure/lang/IKeywordLookup.java,159
package clojure.lang;clojure.lang13,505
public interface IKeywordLookup{IKeywordLookup15,528
ILookupThunk getLookupThunk(Keyword k);getLookupThunk16,561

/home/bronsa/src/clojure/src/jvm/clojure/lang/ARef.java,728
package clojure.lang;clojure.lang13,504
public abstract class ARef extends AReference implements IRef{ARef17,550
protected volatile IFn validator = null;validator18,613
public ARef(){ARef21,722
public ARef(IPersistentMap meta){ARef25,750
void validate(IFn vf, Object val){validate29,801
void validate(Object val){validate45,1108
public void setValidator(IFn vf){setValidator49,1165
public IFn getValidator(){getValidator61,1314
public IPersistentMap getWatches(){getWatches65,1363
synchronized public IRef addWatch(Object key, IFn callback){addWatch69,1419
synchronized public IRef removeWatch(Object key){removeWatch74,1538
public void notifyWatches(Object oldval, Object newval){notifyWatches87,1710

/home/bronsa/src/clojure/src/jvm/clojure/lang/Reduced.java,199
package clojure.lang;clojure.lang11,480
public class Reduced implements IDeref{Reduced13,503
Object val;val14,543
public Reduced(Object val){Reduced16,556
public Object deref(){deref20,604

/home/bronsa/src/clojure/src/jvm/clojure/lang/IType.java,80
package clojure.lang;clojure.lang11,480
public interface IType {IType13,503

/home/bronsa/src/clojure/src/jvm/clojure/lang/PersistentHashMap.java,8245
package clojure.lang;clojure.lang11,480
public class PersistentHashMap extends APersistentMap implements IEditableCollection, IObj {PersistentHashMap28,890
final int count;count30,984
final INode root;root31,1001
final boolean hasNull;hasNull32,1019
final Object nullValue;nullValue33,1042
final IPersistentMap _meta;_meta34,1066
final public static PersistentHashMap EMPTY = new PersistentHashMap(0, null, false, null);EMPTY36,1095
static public IPersistentMap create(Map other){create39,1241
public static PersistentHashMap create(Object... init){create52,1522
public static PersistentHashMap createWithCheck(Object... init){createWithCheck61,1759
static public PersistentHashMap create(ISeq items){create72,2102
static public PersistentHashMap createWithCheck(ISeq items){createWithCheck83,2485
public static PersistentHashMap create(IPersistentMap meta, Object... init){create99,3038
PersistentHashMap(int count, INode root, boolean hasNull, Object nullValue){PersistentHashMap103,3155
public PersistentHashMap(IPersistentMap meta, int count, INode root, boolean hasNull, Object nullValue){PersistentHashMap111,3349
static int hash(Object k){hash119,3571
public boolean containsKey(Object key){containsKey123,3625
public IMapEntry entryAt(Object key){entryAt129,3790
public IPersistentMap assoc(Object key, Object val){assoc135,3967
public Object valAt(Object key, Object notFound){valAt149,4472
public Object valAt(Object key){valAt155,4657
public IPersistentMap assocEx(Object key, Object val) {assocEx159,4719
public IPersistentMap without(Object key){without165,4879
public Iterator iterator(){iterator176,5228
public Object kvreduce(IFn f, Object init){kvreduce180,5291
public Object fold(long n, final IFn combinef, final IFn reducef,fold190,5530
public int count(){count206,6079
public ISeq seq(){seq210,6117
public IPersistentCollection empty(){empty215,6254
static int mask(int hash, int shift){mask219,6328
public PersistentHashMap withMeta(IPersistentMap meta){withMeta224,6450
public TransientHashMap asTransient() {asTransient228,6579
public IPersistentMap meta(){meta232,6658
static final class TransientHashMap extends ATransientMap {TransientHashMap236,6706
	AtomicReference<Thread> edit;edit237,6766
	INode root;root238,6797
	int count;count239,6810
	boolean hasNull;hasNull240,6822
	Object nullValue;nullValue241,6840
	final Box leafFlag = new Box(null);leafFlag242,6859
	TransientHashMap(PersistentHashMap m) {TransientHashMap245,6898
	TransientHashMap(AtomicReference<Thread> edit, INode root, int count, boolean hasNull, Object nullValue) {TransientHashMap249,7046
	ITransientMap doAssoc(Object key, Object val) {doAssoc257,7278
	ITransientMap doWithout(Object key) {doWithout277,7760
	IPersistentMap doPersistent() {doPersistent295,8174
	Object doValAt(Object key, Object notFound) {doValAt300,8294
	int doCount() {doCount311,8520
	void ensureEditable(){ensureEditable315,8558
static interface INode extends Serializable {INode325,8830
	INode assoc(int shift, int hash, Object key, Object val, Box addedLeaf);assoc326,8876
	INode without(int shift, int hash, Object key);without328,8951
	IMapEntry find(int shift, int hash, Object key);find330,9001
	Object find(int shift, int hash, Object key, Object notFound);find332,9052
	ISeq nodeSeq();nodeSeq334,9117
	INode assoc(AtomicReference<Thread> edit, int shift, int hash, Object key, Object val, Box addedLeaf);assoc336,9135
	INode without(AtomicReference<Thread> edit, int shift, int hash, Object key, Box removedLeaf);without338,9240
    public Object kvreduce(IFn f, Object init);kvreduce340,9337
	Object fold(IFn combinef, IFn reducef, IFn fjtask, IFn fjfork, IFn fjjoin);fold342,9386
final static class ArrayNode implements INode{ArrayNode345,9466
	int count;count346,9513
	final INode[] array;array347,9525
	final AtomicReference<Thread> edit;edit348,9547
	ArrayNode(AtomicReference<Thread> edit, int count, INode[] array){ArrayNode350,9585
	public INode assoc(int shift, int hash, Object key, Object val, Box addedLeaf){assoc356,9721
	public INode without(int shift, int hash, Object key){without367,10181
	public IMapEntry find(int shift, int hash, Object key){find383,10636
	public Object find(int shift, int hash, Object key, Object notFound){find391,10833
	public ISeq nodeSeq(){nodeSeq399,11059
    public Object kvreduce(IFn f, Object init){kvreduce403,11115
	public Object fold(final IFn combinef, final IFn reducef,fold414,11407
	static public Object foldTasks(List<Callable> tasks, final IFn combinef,foldTasks430,11867
	public INode assoc(AtomicReference<Thread> edit, int shift, int hash, Object key, Object val, Box addedLeaf){assoc493,13431
	public INode without(AtomicReference<Thread> edit, int shift, int hash, Object key, Box removedLeaf){without507,13931
	static class Seq extends ASeq {Seq525,14436
		final INode[] nodes;nodes526,14469
		final int i;i527,14492
		final ISeq s; s528,14507
		static ISeq create(INode[] nodes) {create530,14527
		public Obj withMeta(IPersistentMap meta) {withMeta553,15092
		public Object first() {first557,15180
		public ISeq next() {next561,15232
final static class BitmapIndexedNode implements INode{BitmapIndexedNode568,15312
	static final BitmapIndexedNode EMPTY = new BitmapIndexedNode(null, 0, new Object[0]);EMPTY569,15367
	int bitmap;bitmap571,15456
	Object[] array;array572,15469
	final AtomicReference<Thread> edit;edit573,15486
	final int index(int bit){index575,15524
	BitmapIndexedNode(AtomicReference<Thread> edit, int bitmap, Object[] array){BitmapIndexedNode579,15602
	public INode assoc(int shift, int hash, Object key, Object val, Box addedLeaf){assoc585,15750
	public INode without(int shift, int hash, Object key){without635,17456
	public IMapEntry find(int shift, int hash, Object key){find658,18183
	public Object find(int shift, int hash, Object key, Object notFound){find672,18591
	public ISeq nodeSeq(){nodeSeq686,19006
    public Object kvreduce(IFn f, Object init){kvreduce690,19066
	public Object fold(IFn combinef, IFn reducef, IFn fjtask, IFn fjfork, IFn fjjoin){fold694,19169
	public INode assoc(AtomicReference<Thread> edit, int shift, int hash, Object key, Object val, Box addedLeaf){assoc731,20515
	public INode without(AtomicReference<Thread> edit, int shift, int hash, Object key, Box removedLeaf){without791,22533
final static class HashCollisionNode implements INode{HashCollisionNode817,23270
	final int hash;hash819,23326
	int count;count820,23343
	Object[] array;array821,23355
	final AtomicReference<Thread> edit;edit822,23372
	HashCollisionNode(AtomicReference<Thread> edit, int hash, int count, Object... array){HashCollisionNode824,23410
	public INode assoc(int shift, int hash, Object key, Object val, Box addedLeaf){assoc831,23586
	public INode without(int shift, int hash, Object key){without851,24331
	public IMapEntry find(int shift, int hash, Object key){find860,24565
	public Object find(int shift, int hash, Object key, Object notFound){find869,24783
	public ISeq nodeSeq(){nodeSeq878,24997
    public Object kvreduce(IFn f, Object init){kvreduce882,25057
	public Object fold(IFn combinef, IFn reducef, IFn fjtask, IFn fjfork, IFn fjjoin){fold886,25160
	public int findIndex(Object key){findIndex890,25310
	public INode assoc(AtomicReference<Thread> edit, int shift, int hash, Object key, Object val, Box addedLeaf){assoc930,26433
	public INode without(AtomicReference<Thread> edit, int shift, int hash, Object key, Box removedLeaf){without956,27362
static final class NodeSeq extends ASeq {NodeSeq1110,31834
	final Object[] array;array1111,31876
	final int i;i1112,31899
	final ISeq s;s1113,31913
	NodeSeq(Object[] array, int i) {NodeSeq1115,31930
	static ISeq create(Object[] array) {create1119,31998
    static public Object kvreduce(Object[] array, IFn f, Object init){kvreduce1123,32073
	NodeSeq(IPersistentMap meta, Object[] array, int i, ISeq s) {NodeSeq1156,33045
	public Obj withMeta(IPersistentMap meta) {withMeta1163,33177
	public Object first() {first1167,33266
	public ISeq next() {next1173,33377

/home/bronsa/src/clojure/src/jvm/clojure/lang/Fn.java,73
package clojure.lang;clojure.lang13,505
public interface Fn{Fn15,528

/home/bronsa/src/clojure/src/jvm/clojure/lang/Delay.java,341
package clojure.lang;clojure.lang13,505
public class Delay implements IDeref, IPending{Delay15,528
Object val;val16,576
IFn fn;fn17,588
public Delay(IFn fn){Delay19,597
static public Object force(Object x) {force24,655
synchronized public Object deref() {deref30,769
synchronized public boolean isRealized(){isRealized39,880

/home/bronsa/src/clojure/src/jvm/clojure/lang/PersistentStructMap.java,2137
package clojure.lang;clojure.lang13,505
public class PersistentStructMap extends APersistentMap implements IObj{PersistentStructMap19,607
public static class Def implements Serializable{Def21,681
	final ISeq keys;keys22,730
	final IPersistentMap keyslots;keyslots23,748
	Def(ISeq keys, IPersistentMap keyslots){Def25,781
final Def def;def31,877
final Object[] vals;vals32,892
final IPersistentMap ext;ext33,913
final IPersistentMap _meta;_meta34,939
static public Def createSlotMap(ISeq keys){createSlotMap37,969
static public PersistentStructMap create(Def def, ISeq keyvals){create51,1291
static public PersistentStructMap construct(Def def, ISeq valseq){construct69,1900
static public IFn getAccessor(final Def def, Object key){getAccessor81,2341
protected PersistentStructMap(IPersistentMap meta, Def def, Object[] vals, IPersistentMap ext){PersistentStructMap98,2797
protected PersistentStructMap makeNew(IPersistentMap meta, Def def, Object[] vals, IPersistentMap ext){makeNew112,3302
public IObj withMeta(IPersistentMap meta){withMeta116,3464
public IPersistentMap meta(){meta122,3583
public boolean containsKey(Object key){containsKey126,3631
public IMapEntry entryAt(Object key){entryAt130,3737
public IPersistentMap assoc(Object key, Object val){assoc139,3934
public Object valAt(Object key){valAt151,4244
public Object valAt(Object key, Object notFound){valAt160,4393
public IPersistentMap assocEx(Object key, Object val) {assocEx169,4569
public IPersistentMap without(Object key) {without175,4729
public Iterator iterator(){iterator185,5011
public int count(){count190,5075
public ISeq seq(){seq194,5135
public IPersistentCollection empty(){empty198,5204
static class Seq extends ASeq{Seq202,5275
	final int i;i203,5306
	final ISeq keys;keys204,5320
	final Object[] vals;vals205,5338
	final IPersistentMap ext;ext206,5360
	public Seq(IPersistentMap meta, ISeq keys, Object[] vals, int i, IPersistentMap ext){Seq209,5389
	public Obj withMeta(IPersistentMap meta){withMeta217,5567
	public Object first(){first223,5694
	public ISeq next(){next227,5768

/home/bronsa/src/clojure/src/jvm/clojure/lang/Atom.java,629
package clojure.lang;clojure.lang13,504
final public class Atom extends ARef{Atom17,580
final AtomicReference state;state18,618
public Atom(Object state){Atom20,648
public Atom(Object state, IPersistentMap meta){Atom24,720
public Object deref(){deref29,827
public Object swap(IFn f) {swap33,874
public Object swap(IFn f, Object arg) {swap47,1080
public Object swap(IFn f, Object arg1, Object arg2) {swap61,1303
public Object swap(IFn f, Object x, Object y, ISeq args) {swap75,1547
public boolean compareAndSet(Object oldv, Object newv){compareAndSet89,1810
public Object reset(Object newval){reset97,1985

/home/bronsa/src/clojure/src/jvm/clojure/lang/ATransientSet.java,597
package clojure.lang;clojure.lang13,504
public abstract class ATransientSet extends AFn implements ITransientSet{ATransientSet15,527
	ITransientMap impl;impl16,601
	ATransientSet(ITransientMap impl) {ATransientSet18,623
	public int count() {count22,685
	public ITransientSet conj(Object val) {conj26,734
	public boolean contains(Object key) {contains32,868
	public ITransientSet disjoin(Object key)  {disjoin36,951
	public Object get(Object key) {get42,1086
	public Object invoke(Object key, Object notFound)  {invoke46,1149
	public Object invoke(Object key)  {invoke50,1243

/home/bronsa/src/clojure/src/jvm/clojure/lang/ChunkedCons.java,639
package clojure.lang;clojure.lang13,505
final public class ChunkedCons extends ASeq implements IChunkedSeq{ChunkedCons15,528
final IChunk chunk;chunk17,597
final ISeq _more;_more18,617
ChunkedCons(IPersistentMap meta, IChunk chunk, ISeq more){ChunkedCons20,636
public ChunkedCons(IChunk chunk, ISeq more){ChunkedCons26,753
public Obj withMeta(IPersistentMap meta){withMeta30,826
public Object first(){first36,950
public ISeq next(){next40,998
public ISeq more(){more46,1119
public IChunk chunkedFirst(){chunkedFirst54,1282
public ISeq chunkedNext(){chunkedNext58,1330
public ISeq chunkedMore(){chunkedMore62,1390

/home/bronsa/src/clojure/src/jvm/clojure/lang/LockingTransaction.java,2848
package clojure.lang;clojure.lang13,505
public class LockingTransaction{LockingTransaction23,816
public static final int RETRY_LIMIT = 10000;RETRY_LIMIT25,850
public static final int LOCK_WAIT_MSECS = 100;LOCK_WAIT_MSECS26,895
public static final long BARGE_WAIT_NANOS = 10 * 1000000;BARGE_WAIT_NANOS27,942
static final int RUNNING = 0;RUNNING30,1047
static final int COMMITTING = 1;COMMITTING31,1077
static final int RETRY = 2;RETRY32,1110
static final int KILLED = 3;KILLED33,1138
static final int COMMITTED = 4;COMMITTED34,1167
final static ThreadLocal<LockingTransaction> transaction = new ThreadLocal<LockingTransaction>();transaction36,1200
static class RetryEx extends Error{RetryEx39,1300
static class AbortException extends Exception{AbortException42,1339
public static class Info{Info45,1389
	final AtomicInteger status;status46,1415
	final long startPoint;startPoint47,1444
	final CountDownLatch latch;latch48,1468
	public Info(int status, long startPoint){Info51,1499
	public boolean running(){running57,1659
static class CFn{CFn63,1758
	final IFn fn;fn64,1776
	final ISeq args;args65,1791
	public CFn(IFn fn, ISeq args){CFn67,1810
void getReadPoint(){getReadPoint76,2063
long getCommitPoint(){getCommitPoint80,2129
void stop(int status){stop84,2192
Info info;info101,2419
long readPoint;readPoint102,2430
long startPoint;startPoint103,2446
long startTime;startTime104,2463
final RetryEx retryex = new RetryEx();retryex105,2479
final ArrayList<Agent.Action> actions = new ArrayList<Agent.Action>();actions106,2518
final HashMap<Ref, Object> vals = new HashMap<Ref, Object>();vals107,2589
final HashSet<Ref> sets = new HashSet<Ref>();sets108,2651
final TreeMap<Ref, ArrayList<CFn>> commutes = new TreeMap<Ref, ArrayList<CFn>>();commutes109,2697
final HashSet<Ref> ensures = new HashSet<Ref>();   //all hold readLockensures111,2780
void tryWriteLock(Ref ref){tryWriteLock114,2853
Object lock(Ref ref){lock127,3077
void abort() throws AbortException{abort183,4070
static LockingTransaction getEx(){getEx205,4580
static public boolean isRunning(){isRunning212,4766
static LockingTransaction getRunning(){getRunning216,4834
static public Object runInTransaction(Callable fn) throws Exception{runInTransaction223,4979
static class Notify{Notify234,5219
	final public Ref ref;ref235,5240
	final public Object oldval;oldval236,5263
	final public Object newval;newval237,5292
	Notify(Ref ref, Object oldval, Object newval){Notify239,5322
Object run(Callable fn) throws Exception{run246,5442
public void enqueue(Agent.Action action){enqueue385,8865
Object doGet(Ref ref){doGet389,8932
Object doSet(Ref ref, Object val){doSet416,9457
void doEnsure(Ref ref){doEnsure430,9723
Object doCommute(Ref ref, IFn fn, ISeq args) {doCommute459,10267

/home/bronsa/src/clojure/src/jvm/clojure/lang/Cons.java,435
package clojure.lang;clojure.lang13,517
final public class Cons extends ASeq implements Serializable {Cons17,570
public Cons(Object first, ISeq _more){Cons22,690
public Cons(IPersistentMap meta, Object _first, ISeq _more){Cons28,776
public Object first(){first34,898
public ISeq next(){next38,940
public ISeq more(){more42,985
public int count(){count48,1073
public Cons withMeta(IPersistentMap meta){withMeta52,1125

/home/bronsa/src/clojure/src/jvm/clojure/lang/IObj.java,155
package clojure.lang;clojure.lang11,490
public interface IObj extends IMeta {IObj14,517
    public IObj withMeta(IPersistentMap meta);withMeta16,558

/home/bronsa/src/clojure/src/jvm/clojure/lang/ArityException.java,367
package clojure.lang;clojure.lang11,480
public class ArityException extends IllegalArgumentException {ArityException16,525
	final public int actual;actual18,589
	final public String name;name20,616
	public ArityException(int actual, String name) {ArityException22,644
	public ArityException(int actual, String name, Throwable cause) {ArityException26,726

/home/bronsa/src/clojure/src/jvm/clojure/lang/PersistentTreeSet.java,1083
package clojure.lang;clojure.lang13,504
public class PersistentTreeSet extends APersistentSet implements IObj, Reversible, Sorted{PersistentTreeSet17,557
static public final PersistentTreeSet EMPTY = new PersistentTreeSet(null, PersistentTreeMap.EMPTY);EMPTY18,648
final IPersistentMap _meta;_meta19,748
static public PersistentTreeSet create(ISeq items){create22,778
static public PersistentTreeSet create(Comparator comp, ISeq items){create31,983
PersistentTreeSet(IPersistentMap meta, IPersistentMap impl){PersistentTreeSet40,1262
public IPersistentSet disjoin(Object key) {disjoin45,1360
public IPersistentSet cons(Object o){cons51,1498
public IPersistentCollection empty(){empty57,1626
public ISeq rseq() {rseq61,1738
public PersistentTreeSet withMeta(IPersistentMap meta){withMeta65,1828
public Comparator comparator(){comparator69,1930
public Object entryKey(Object entry){entryKey73,2002
public ISeq seq(boolean ascending){seq77,2058
public ISeq seqFrom(Object key, boolean ascending){seqFrom82,2181
public IPersistentMap meta(){meta87,2328

/home/bronsa/src/clojure/src/jvm/clojure/lang/IExceptionInfo.java,150
package clojure.lang;clojure.lang11,465
public interface IExceptionInfo {IExceptionInfo18,710
    public IPersistentMap getData();getData19,744

/home/bronsa/src/clojure/src/jvm/clojure/lang/Ref.java,4221
package clojure.lang;clojure.lang13,505
public class Ref extends ARef implements IFn, Comparable<Ref>, IRef{Ref19,684
    public int compareTo(Ref ref) {compareTo20,753
public int getMinHistory(){getMinHistory29,940
public Ref setMinHistory(int minHistory){setMinHistory33,991
public int getMaxHistory(){getMaxHistory38,1081
public Ref setMaxHistory(int maxHistory){setMaxHistory42,1132
public static class TVal{TVal47,1222
	Object val;val48,1248
	long point;point49,1261
	long msecs;msecs50,1274
	TVal prior;prior51,1287
	TVal next;next52,1300
	TVal(Object val, long point, long msecs, TVal prior){TVal54,1313
	TVal(Object val, long point, long msecs){TVal64,1534
TVal tvals;tvals74,1687
final AtomicInteger faults;faults75,1699
final ReentrantReadWriteLock lock;lock76,1727
LockingTransaction.Info tinfo;tinfo77,1762
final long id;id79,1810
volatile int minHistory = 0;minHistory81,1826
volatile int maxHistory = 10;maxHistory82,1855
static final AtomicLong ids = new AtomicLong();ids84,1886
public Ref(Object initVal) {Ref86,1935
public Ref(Object initVal,IPersistentMap meta) {Ref90,1989
Object currentVal(){currentVal101,2276
public Object deref(){deref117,2499
public Object set(Object val){set164,3347
public Object commute(IFn fn, ISeq args) {commute168,3434
public Object alter(IFn fn, ISeq args) {alter172,3542
public void touch(){touch177,3703
boolean isBound(){isBound182,3776
public void trimHistory(){trimHistory195,3907
public int getHistoryCount(){getHistoryCount211,4100
int histCount(){histCount223,4242
final public IFn fn(){fn235,4405
public Object call() {call239,4454
public void run(){run243,4498
public Object invoke() {invoke254,4602
public Object invoke(Object arg1) {invoke258,4653
public Object invoke(Object arg1, Object arg2) {invoke262,4719
public Object invoke(Object arg1, Object arg2, Object arg3) {invoke266,4804
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4) {invoke270,4908
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5) {invoke274,5031
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6) {invoke278,5173
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7)invoke282,5334
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke287,5516
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke292,5736
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke297,5975
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke302,6235
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke307,6516
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke312,6818
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke318,7143
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke324,7489
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke330,7875
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke337,8302
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke344,8750
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke351,9219
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke358,9709
public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7,invoke366,10222
public Object applyTo(ISeq arglist) {applyTo375,10778

/home/bronsa/src/clojure/src/jvm/clojure/lang/IPersistentCollection.java,283
package clojure.lang;clojure.lang1,0
public interface IPersistentCollection extends Seqable {IPersistentCollection14,502
int count();count16,562
IPersistentCollection cons(Object o);cons18,578
IPersistentCollection empty();empty20,619
boolean equiv(Object o);equiv22,653

/home/bronsa/src/clojure/src/jvm/clojure/lang/PersistentVector.java,4337
package clojure.lang;clojure.lang13,504
public class PersistentVector extends APersistentVector implements IObj, IEditableCollection{PersistentVector20,659
public static class Node implements Serializable {Node22,754
	transient public final AtomicReference<Thread> edit;edit23,805
	public final Object[] array;array24,859
	public Node(AtomicReference<Thread> edit, Object[] array){Node26,890
	Node(AtomicReference<Thread> edit){Node31,996
final static AtomicReference<Thread> NOEDIT = new AtomicReference<Thread>(null);NOEDIT37,1090
public final static Node EMPTY_NODE = new Node(NOEDIT, new Object[32]);EMPTY_NODE38,1171
final int cnt;cnt40,1244
public final int shift;shift41,1259
public final Node root;root42,1283
public final Object[] tail;tail43,1307
final IPersistentMap _meta;_meta44,1335
public final static PersistentVector EMPTY = new PersistentVector(0, 5, EMPTY_NODE, new Object[]{});EMPTY47,1365
static public PersistentVector create(ISeq items){create49,1467
static public PersistentVector create(List items){create56,1668
static public PersistentVector create(Object... items){create63,1842
PersistentVector(int cnt, int shift, Node root, Object[] tail){PersistentVector70,2021
PersistentVector(IPersistentMap meta, int cnt, int shift, Node root, Object[] tail){PersistentVector79,2185
public TransientVector asTransient(){asTransient87,2369
final int tailoff(){tailoff91,2445
public Object[] arrayFor(int i){arrayFor97,2527
public Object nth(int i){nth110,2812
public Object nth(int i, Object notFound){nth115,2896
public PersistentVector assocN(int i, Object val){assocN121,3000
public int count(){count154,3798
public PersistentVector withMeta(IPersistentMap meta){withMeta158,3834
public IPersistentMap meta(){meta162,3952
public PersistentVector cons(Object val){cons167,4001
public IChunkedSeq chunkedSeq(){chunkedSeq226,5660
public ISeq seq(){seq232,5763
Iterator rangedIterator(final int start, final int end){rangedIterator236,5807
public Iterator iterator(){return rangedIterator(0,count());}iterator260,6248
public Object kvreduce(IFn f, Object init){kvreduce262,6311
static public final class ChunkedSeq extends ASeq implements IChunkedSeq,Counted{ChunkedSeq276,6681
	public final PersistentVector vec;vec278,6764
	final Object[] node;node279,6800
	final int i;i280,6822
	public final int offset;offset281,6836
	public ChunkedSeq(PersistentVector vec, int i, int offset){ChunkedSeq283,6863
	ChunkedSeq(IPersistentMap meta, PersistentVector vec, Object[] node, int i, int offset){ChunkedSeq290,7015
	ChunkedSeq(PersistentVector vec, Object[] node, int i, int offset){ChunkedSeq298,7200
	public IChunk chunkedFirst() {chunkedFirst305,7349
	public ISeq chunkedNext(){chunkedNext309,7425
	public ISeq chunkedMore(){chunkedMore315,7553
	public Obj withMeta(IPersistentMap meta){withMeta322,7671
	public Object first(){first328,7812
	public ISeq next(){next332,7863
	public int count(){count338,7995
public IPersistentCollection empty(){empty343,8055
public PersistentVector pop(){pop378,8846
static final class TransientVector extends AFn implements ITransientVector, Counted{TransientVector430,10066
	int cnt;cnt431,10151
	int shift;shift432,10161
	Node root;root433,10173
	Object[] tail;tail434,10185
	TransientVector(int cnt, int shift, Node root, Object[] tail){TransientVector436,10202
	TransientVector(PersistentVector v){TransientVector443,10350
	public int count(){count447,10460
	Node ensureEditable(Node node){ensureEditable452,10520
	void ensureEditable(){ensureEditable458,10652
	static Node editableRoot(Node node){editableRoot470,10990
	public PersistentVector persistent(){persistent474,11124
	static Object[] editableTail(Object[] tl){editableTail487,11567
	public TransientVector conj(Object val){conj493,11704
	public Object valAt(Object key){valAt581,13789
	public Object valAt(Object key, Object notFound){valAt586,13905
	public Object invoke(Object arg1) {invoke597,14117
	public Object nth(int i){nth604,14332
	public Object nth(int i, Object notFound){nth610,14440
	public TransientVector assocN(int i, Object val){assocN616,14553
	public TransientVector assoc(Object key, Object val){assoc634,14874
	public TransientVector pop(){pop659,15464

/home/bronsa/src/clojure/src/jvm/clojure/lang/EdnReader.java,3815
package clojure.lang;clojure.lang11,480
public class EdnReader{EdnReader23,759
static IFn[] macros = new IFn[256];macros25,784
static IFn[] dispatchMacros = new IFn[256];dispatchMacros26,820
static Pattern symbolPat = Pattern.compile("[:]?([\\D&&[^/]].*/)?([\\D&&[^/]][^/]*)");symbolPat27,864
static Pattern intPat =intPat28,951
static Pattern ratioPat = Pattern.compile("([-+]?[0-9]+)/([0-9]+)");ratioPat31,1105
static Pattern floatPat = Pattern.compile("([-+]?[0-9]+(\\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?");floatPat32,1174
static final Symbol SLASH = Symbol.intern("/");SLASH33,1268
static IFn taggedReader = new TaggedReader();taggedReader35,1317
static boolean nonConstituent(int ch){nonConstituent59,2017
static public Object readString(String s, IPersistentMap opts){readString63,2104
static boolean isWhitespace(int ch){isWhitespace73,2326
static void unread(PushbackReader r, int ch) {unread77,2415
public static class ReaderException extends RuntimeException{ReaderException89,2575
	final int line;line90,2637
	final int column;column91,2654
	public ReaderException(int line, int column, Throwable cause){ReaderException93,2674
static public int read1(Reader r){read1100,2804
static final Keyword EOF = Keyword.intern(null,"eof");EOF111,2933
static public Object read(PushbackReader r, IPersistentMap opts){read113,2989
static public Object read(PushbackReader r, boolean eofIsError, Object eofValue, boolean isRecursive,read117,3125
public static class StringReader extends AFn{StringReader412,9905
	public Object invoke(Object reader, Object doublequote, Object opts) {invoke413,9951
public static class CommentReader extends AFn{CommentReader474,11321
	public Object invoke(Object reader, Object semicolon, Object opts) {invoke475,11368
public static class DiscardReader extends AFn{DiscardReader487,11575
	public Object invoke(Object reader, Object underscore, Object opts) {invoke488,11622
public static class DispatchReader extends AFn{DispatchReader495,11792
	public Object invoke(Object reader, Object hash, Object opts) {invoke496,11840
public static class MetaReader extends AFn{MetaReader516,12370
	public Object invoke(Object reader, Object caret, Object opts) {invoke517,12414
public static class CharacterReader extends AFn{CharacterReader559,13759
	public Object invoke(Object reader, Object backslash, Object opts) {invoke560,13808
public static class ListReader extends AFn{ListReader602,15127
	public Object invoke(Object reader, Object leftparen, Object opts) {invoke603,15171
public static class VectorReader extends AFn{VectorReader627,15831
	public Object invoke(Object reader, Object leftparen, Object opts) {invoke628,15877
public static class MapReader extends AFn{MapReader635,16079
	public Object invoke(Object reader, Object leftparen, Object opts) {invoke636,16122
public static class SetReader extends AFn{SetReader646,16439
	public Object invoke(Object reader, Object leftbracket, Object opts) {invoke647,16482
public static class UnmatchedDelimiterReader extends AFn{UnmatchedDelimiterReader654,16690
	public Object invoke(Object reader, Object rightdelim, Object opts) {invoke655,16748
public static class UnreadableReader extends AFn{UnreadableReader661,16895
	public Object invoke(Object reader, Object leftangle, Object opts) {invoke662,16945
public static List readDelimitedList(char delim, PushbackReader r, boolean isRecursive, Object opts) {readDelimitedList667,17071
public static class TaggedReader extends AFn{TaggedReader714,17965
	public Object invoke(Object reader, Object firstChar, Object opts){invoke715,18011
	static Keyword READERS = Keyword.intern(null,"readers");READERS724,18356
	static Keyword DEFAULT = Keyword.intern(null,"default");DEFAULT725,18414
