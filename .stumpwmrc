;; -*- mode: Lisp -*-


;; (in-package :xlib)
;; (defun decode-wm-size-hints (vector)
;;   (declare (type (or null (simple-vector *)) vector))
;;   (declare (values (or null wm-size-hints)))
;;   (when vector
;;     (let ((flags (aref vector 0))
;;           (hints (make-wm-size-hints)))
;;       (declare (type card16 flags)
;;                (type wm-size-hints hints))
;;       (setf (wm-size-hints-user-specified-position-p hints) (logbitp 0 flags))
;;       (setf (wm-size-hints-user-specified-size-p hints) (logbitp 1 flags))
;;       (setf (wm-size-hints-program-specified-position-p hints)
;;             (logbitp 2 flags))
;;       (setf (wm-size-hints-program-specified-size-p hints) (logbitp 3 flags))
;;       (when (logbitp 4 flags)
;;         (setf (wm-size-hints-min-width hints) (aref vector 5)
;;               (wm-size-hints-min-height hints) (aref vector 6)))
;;       (when (logbitp 5 flags)
;;         (setf (wm-size-hints-max-width hints) (aref vector 7)
;;               (wm-size-hints-max-height hints) (aref vector 8)))
;;       (when (logbitp 6 flags)
;;         (setf (wm-size-hints-width-inc hints) (aref vector 9)
;;               (wm-size-hints-height-inc hints) (aref vector 10)))
;;       (when (logbitp 7 flags)
;;         (setf (wm-size-hints-min-aspect hints) (ignore-errors (/ (aref
;;                                                                   vector 11) (aref vector 12)))
;;               (wm-size-hints-max-aspect hints) (ignore-errors (/ (aref
;;                                                                   vector 13) (aref vector 14)))))
;;       (when (> (length vector) 15)
;;         ;; This test is for backwards compatibility since old Xlib programs
;;         ;; can set a size-hints structure that is too small.  See ICCCM.
;;         (when (logbitp 8 flags)
;;           (setf (wm-size-hints-base-width hints) (aref vector 15)
;;                 (wm-size-hints-base-height hints) (aref vector 16)))
;;         (when (logbitp 9 flags)
;;           (setf (wm-size-hints-win-gravity hints)
;;                 (decode-type (member :unmap :north-west :north :north-east :west
;;                                      :center :east :south-west :south
;;                                      :south-east :static)
;;                              (aref vector 17)))))
;;       ;; Obsolete fields
;;       (when (or (logbitp 0 flags) (logbitp 2 flags))
;;         (setf (wm-size-hints-x hints) (aref vector 1)
;;               (wm-size-hints-y hints) (aref vector 2)))
;;       (when (or (logbitp 1 flags) (logbitp 3 flags))
;;         (setf (wm-size-hints-width hints) (aref vector 3)
;;               (wm-size-hints-height hints) (aref vector 4)))
;;       hints)))





(in-package :stumpwm)
(setf *default-package* :stumpwm)

(when *initializing*
 (mapcar #'load-module '("sbclfix" "stumptray" "mpd")))

(set-prefix-key (kbd "C-f"))
(set-fg-color "Gray")
(set-bg-color "Black")
(set-border-color "Gray20")
(set-msg-border-width 10)
(set-focus-color "gray40")
(set-unfocus-color "black")
(set-normal-gravity :center)
(set-font "-misc-fixed-*-*-*-*-10-*-*-*-*-*-*-*" )

(defcommand firefox () ()
            "run firefox"
            (run-or-raise "firefox" '(:class "Firefox")))

(defcommand irssi () ()
            "run irssi"
            (run-or-raise "urxvtc -title irssi" '(:title "irssi")))

(clear-window-placement-rules)

(define-frame-preference "Default1"
    (1 t t :class "Firefox"))

;; (define-frame-preference "Default0"
;;     (0 t t :title "irssi"))

(defcommand close-protected-window () ()
            (let ((*deny-quit-request* nil))
              (delete-window)))

(push '(:class "Firefox") *deny-quit-request*)

(defcommand (fprev tile-group) () ()
            "Cycle through the frame tree to the next frame."
            (focus-prev-frame (current-group)))

(defcommand vol-down () ()
            (run-shell-command "amixer set Master playback 1-"))

(defcommand vol-up () ()
            (run-shell-command "amixer set Master playback 1+"))

(defcommand vol-toggle () ()
            (run-shell-command "amixer set Master toggle"))

(setf
 *mode-line-click-hook*
 (list (lambda (&rest args)
         (cond
           ((eq (second args) 1)
            (run-commands "pull-hidden-next"))
           ((eq (second args) 2)
            (run-commands "vol-toggle"))
           ((eq (second args) 3)
            (run-commands "pull-hidden-previous"))
           ((eq (second args) 4)
            (run-commands "vol-up"))
           ((eq (second args) 5)
            (run-commands "vol-down")))))

 ;;*debug-level*                 5
 ;;*show-command-backtrace*      t
 *input-completion-type*        :fuzzy
 *mode-line-pad-y*              0
 *mode-line-pad-y*              0
 ;; *autotiling-groups*            (list "AutoTiled")
 *suppress-abort-messages*      t
 *suppress-frame-indicator*     t
 *float-window-border*          2
 *float-window-title-height*    8
 ;*escape-fake-key*              (kbd "C-f")
 *mouse-focus-policy*           :click
 *message-window-gravity*       :center
 *timeout-wait*                 2
 *input-window-gravity*         :center
 *startup-message*              nil
 *maxsize-border-width*         2
 *colors*                       (append *colors*
                                        (list "grey10"
                                              "Gray"))
 *normal-border-width*          2
 *window-border-style*          :thin
 *mode-line-border-color*       "black"
 *mode-line-background-color*   "black"
 *mode-line-foreground-color*   "grey"
 *mode-line-timeout*            1
 *mode-line-highlight-format*   "^09~a^n"
 *mode-line-position*           :bottom
 ;; *tray-viwin-background*        "black"
 ;; *tray-hiwin-background*        "black"
 ;; *tray-win-background*          "black"
 *menu-maximum-height*          70
 *frame-number-map*             "1234567890"
 *window-format*                "%n%s%m%20t")

(mapcar (lambda (s)
          (update-color-map s))
        *screen-list*)
(setf *screen-mode-line-format*
      (list
       "^90[^n%d^90]^n"
       '(:eval (format nil "~c" #\Newline))
       "^90[^n%g^90]^n "
       '(:eval (format nil "~:[^90 [^n%W^90]^n~;~]"
                (equal "" (fmt-window-list (head-mode-line (current-head))))))))

(if (not (head-mode-line (current-head)))
    (mapcar (lambda (s)
              (mapcar (lambda (h)
                        (toggle-mode-line s h))
                      (screen-heads s)))
            *screen-list*))

(undefine-key *root-map* (kbd "C-k"))
(undefine-key *root-map* (kbd "c"))
;; (undefine-key *root-map* (kbd "C-f"))
;; (undefine-key *root-map* (kbd "C-p"))
;; (undefine-key *root-map* (kbd "C-n"))

(define-key *root-map* (kbd "C-f")                 "meta C-f")
;; (define-key *root-map* (kbd "e")                   "run-shell-command urxvtc -title emacs -e emacsclient -c -nw")
;; (define-key *root-map* (kbd "N")                     '*notification-map*)
(define-key *root-map* (kbd "C-k")                 "close-protected-window")
(define-key *root-map* (kbd "L")                   "loadrc")
(define-key *root-map* (kbd "C-l")                 "reload")
;; (define-key *root-map* (kbd "C-o")                   "snext")
;; (define-key *root-map* (kbd "C-n")                   "snext")
;; (define-key *root-map* (kbd "C-p")                   "sprev")
(define-key *root-map* (kbd "TAB")                 "fnext")
(define-key *root-map* (kbd "ISO_Left_Tab")        "fprev")
(define-key *root-map* (kbd "RET")                 "fullscreen")
(define-key *root-map* (kbd "c")                   "exec urxvtc")
(define-key *root-map* (kbd "M-x")                 "colon")
(define-key *root-map* (kbd "y")                   "mark")
(define-key *root-map* (kbd "C-o")                 "gother")
(define-key *root-map* (kbd "C-s")                 "vsplit")
(define-key *root-map* (kbd "F")                   "gnew-float")
(define-key *top-map*  (kbd "M-TAB")               "snext")
(define-key *top-map*  (kbd "C-M-DEL")             "quit")
(define-key *top-map*  (kbd "C-2")                 "firefox")
(define-key *top-map*  (kbd "C-1")                 "exec dbus-launch thunar")
(define-key *top-map*  (kbd "XF86AudioPrev")       "mpd-prev")
(define-key *top-map*  (kbd "XF86AudioPlay")       "mpd-toggle-pause")
(define-key *top-map*  (kbd "XF86AudioStop")       "mpd-stop")
(define-key *top-map*  (kbd "XF86AudioNext")       "mpd-next")
(define-key *top-map*  (kbd "XF86AudioLowerVolume")"vol-down")
(define-key *top-map*  (kbd "XF86AudioMute")       "vol-toggle")
(define-key *top-map*  (kbd "XF86AudioRaiseVolume")"vol-up")

(when *initializing*
  (banish)
  (run-commands
   "mpd-connect"
   "grename Default0"
   ;; "exec xcompmgr -c &"
   "exec feh --bg-fill Pictures/1368379267406.jpg"
   "exec urxvtc -title emacs -e emacsclient -c -nw"
                                        ; "vsplit"
                                        ; "exec urxvtc"
                                        ; "irssi"
   "stumptray"
   "snext"
   "grename Default1"
   "stumptray"
   ;; "exec xcompmgr -c &"
   "exec feh --bg-fill Pictures/1368379018700.jpg"
   "firefox"
   "exec hp-systray"
   "exec dropboxd"))

;; force redisplay
(add-hook *focus-window-hook*
          (lambda (window _)
            (with-slots (width height frame) window
              (set-window-geometry window
                                   :width (+ width
                                             (* (window-width-inc window)
                                                (floor (- (frame-width frame) width)
                                                       (window-width-inc window))))
                                   :height (+ height
                                              (* (window-height-inc window)
                                                 (floor (- (frame-height frame) height)
                                                        (window-height-inc window)))))
              (maximize-window window))))
